From 0672f8eaeecbbc6b136e86cf9e137ccb328aa587 Mon Sep 17 00:00:00 2001
From: Xuefu Zhang <xuefu@apache.org>
Date: Sun, 17 Nov 2013 04:52:35 +0000
Subject: [PATCH 191/375] CDH-16146: HIVE-5825: Case statement type checking too restrictive for parameterized types (Jason via Xuefu)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1542646 13f79535-47bb-0310-9956-ffa450edef68

Conflicts:
	ql/src/test/queries/clientpositive/udf_case.q
	ql/src/test/queries/clientpositive/udf_when.q

Luckily, conflict is only test conflict.  HIVE-5825 was committed upstream before HIVE-5356 and 5565 (UDF->GenericUDF refactoring), but backported after them.  I re-generated the test outputs for this backport, and will do fix-up's of 5356 and 5565 to reapply those test changes on top of this.
---
 .../hadoop/hive/ql/udf/generic/GenericUDFCase.java |   23 +++++-----
 .../hadoop/hive/ql/udf/generic/GenericUDFWhen.java |   10 ++--
 .../queries/clientnegative/udf_case_type_wrong.q   |    6 ---
 .../queries/clientnegative/udf_case_type_wrong2.q  |    6 ---
 .../queries/clientnegative/udf_case_type_wrong3.q  |    6 ---
 .../queries/clientnegative/udf_when_type_wrong2.q  |    6 ---
 .../queries/clientnegative/udf_when_type_wrong3.q  |    6 ---
 ql/src/test/queries/clientpositive/udf_case.q      |   19 ++++++++-
 ql/src/test/queries/clientpositive/udf_when.q      |   19 ++++++++-
 .../clientnegative/udf_case_type_wrong.q.out       |    1 -
 .../clientnegative/udf_case_type_wrong2.q.out      |    1 -
 .../clientnegative/udf_case_type_wrong3.q.out      |    1 -
 .../clientnegative/udf_when_type_wrong2.q.out      |    1 -
 .../clientnegative/udf_when_type_wrong3.q.out      |    1 -
 ql/src/test/results/clientpositive/udf_case.q.out  |   43 +++++++++++++++++++-
 ql/src/test/results/clientpositive/udf_when.q.out  |   43 +++++++++++++++++++-
 16 files changed, 135 insertions(+), 57 deletions(-)
 delete mode 100644 ql/src/test/queries/clientnegative/udf_case_type_wrong.q
 delete mode 100644 ql/src/test/queries/clientnegative/udf_case_type_wrong2.q
 delete mode 100644 ql/src/test/queries/clientnegative/udf_case_type_wrong3.q
 delete mode 100644 ql/src/test/queries/clientnegative/udf_when_type_wrong2.q
 delete mode 100644 ql/src/test/queries/clientnegative/udf_when_type_wrong3.q
 delete mode 100644 ql/src/test/results/clientnegative/udf_case_type_wrong.q.out
 delete mode 100644 ql/src/test/results/clientnegative/udf_case_type_wrong2.q.out
 delete mode 100644 ql/src/test/results/clientnegative/udf_case_type_wrong3.q.out
 delete mode 100644 ql/src/test/results/clientnegative/udf_when_type_wrong2.q.out
 delete mode 100644 ql/src/test/results/clientnegative/udf_when_type_wrong3.q.out

diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCase.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCase.java
index 49ec215..e10a2eb 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCase.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCase.java
@@ -25,11 +25,11 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
 
 /**
- * GenericUDF Class for SQL construct
- * "CASE WHEN a THEN b WHEN c THEN d [ELSE f] END".
+ * GenericUDF Class for SQL construct "CASE a WHEN b THEN c [ELSE f] END".
  * 
- * NOTES: 1. a and c should be boolean, or an exception will be thrown. 2. b, d
- * and f should have the same TypeInfo, or an exception will be thrown.
+ * NOTES: 1. a and b should be compatible, or an exception will be
+ * thrown. 2. c and f should be compatible types, or an exception will be
+ * thrown.
  */
 public class GenericUDFCase extends GenericUDF {
   private transient ObjectInspector[] argumentOIs;
@@ -40,8 +40,8 @@
   public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumentTypeException {
 
     argumentOIs = arguments;
-    caseOIResolver = new GenericUDFUtils.ReturnObjectInspectorResolver();
-    returnOIResolver = new GenericUDFUtils.ReturnObjectInspectorResolver();
+    caseOIResolver = new GenericUDFUtils.ReturnObjectInspectorResolver(true);
+    returnOIResolver = new GenericUDFUtils.ReturnObjectInspectorResolver(true);
 
     boolean r = caseOIResolver.update(arguments[0]);
     assert (r);
@@ -79,12 +79,13 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
     Object exprValue = arguments[0].get();
     for (int i = 1; i + 1 < arguments.length; i += 2) {
       Object caseKey = arguments[i].get();
-      if (PrimitiveObjectInspectorUtils.comparePrimitiveObjects(exprValue,
-          (PrimitiveObjectInspector) argumentOIs[0], caseKey,
-          (PrimitiveObjectInspector) argumentOIs[i])) {
+      // May need to convert to common type to compare
+      PrimitiveObjectInspector caseOI = (PrimitiveObjectInspector) caseOIResolver.get();
+      if (PrimitiveObjectInspectorUtils.comparePrimitiveObjects(
+            caseOIResolver.convertIfNecessary(exprValue, argumentOIs[0]), caseOI,
+            caseOIResolver.convertIfNecessary(caseKey, argumentOIs[i]), caseOI)) {
         Object caseValue = arguments[i + 1].get();
-        return returnOIResolver.convertIfNecessary(caseValue,
-            argumentOIs[i + 1]);
+        return returnOIResolver.convertIfNecessary(caseValue, argumentOIs[i + 1]);
       }
     }
     // Process else statement
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFWhen.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFWhen.java
index 554af2c..6ffdbd8 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFWhen.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFWhen.java
@@ -25,11 +25,11 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.BooleanObjectInspector;
 
 /**
- * GenericUDF Class for SQL construct "CASE a WHEN b THEN c [ELSE f] END".
+ * GenericUDF Class for SQL construct
+ * "CASE WHEN a THEN b WHEN c THEN d [ELSE f] END".
  * 
- * NOTES: 1. a and b should have the same TypeInfo, or an exception will be
- * thrown. 2. c and f should have the same TypeInfo, or an exception will be
- * thrown.
+ * NOTES: 1. a and c should be boolean, or an exception will be thrown. 2. b, d
+ * and f should be common types, or an exception will be thrown.
  */
 public class GenericUDFWhen extends GenericUDF {
   private transient ObjectInspector[] argumentOIs;
@@ -39,7 +39,7 @@
   public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumentTypeException {
 
     argumentOIs = arguments;
-    returnOIResolver = new GenericUDFUtils.ReturnObjectInspectorResolver();
+    returnOIResolver = new GenericUDFUtils.ReturnObjectInspectorResolver(true);
 
     for (int i = 0; i + 1 < arguments.length; i += 2) {
       if (!arguments[i].getTypeName().equals(serdeConstants.BOOLEAN_TYPE_NAME)) {
diff --git a/src/ql/src/test/queries/clientnegative/udf_case_type_wrong.q b/src/ql/src/test/queries/clientnegative/udf_case_type_wrong.q
deleted file mode 100644
index 2fb5ff7..0000000
--- a/src/ql/src/test/queries/clientnegative/udf_case_type_wrong.q
+++ /dev/null
@@ -1,6 +0,0 @@
-SELECT CASE '1'
-        WHEN 1 THEN 2
-        WHEN 3 THEN 4
-        ELSE 5
-       END
-FROM src LIMIT 1;
diff --git a/src/ql/src/test/queries/clientnegative/udf_case_type_wrong2.q b/src/ql/src/test/queries/clientnegative/udf_case_type_wrong2.q
deleted file mode 100644
index 5772dc1..0000000
--- a/src/ql/src/test/queries/clientnegative/udf_case_type_wrong2.q
+++ /dev/null
@@ -1,6 +0,0 @@
-SELECT CASE 1
-        WHEN 1 THEN '2'
-        WHEN 3 THEN 4
-        ELSE 5
-       END
-FROM src LIMIT 1;
diff --git a/src/ql/src/test/queries/clientnegative/udf_case_type_wrong3.q b/src/ql/src/test/queries/clientnegative/udf_case_type_wrong3.q
deleted file mode 100644
index 5aaf018..0000000
--- a/src/ql/src/test/queries/clientnegative/udf_case_type_wrong3.q
+++ /dev/null
@@ -1,6 +0,0 @@
-SELECT CASE 1
-        WHEN 1 THEN NULL
-        WHEN 3 THEN '2'
-        ELSE 7
-       END
-FROM src LIMIT 1;
diff --git a/src/ql/src/test/queries/clientnegative/udf_when_type_wrong2.q b/src/ql/src/test/queries/clientnegative/udf_when_type_wrong2.q
deleted file mode 100644
index 79fa65f..0000000
--- a/src/ql/src/test/queries/clientnegative/udf_when_type_wrong2.q
+++ /dev/null
@@ -1,6 +0,0 @@
-SELECT CASE
-        WHEN 1=2 THEN '2'
-        WHEN 3=4 THEN 4
-        ELSE 5
-       END
-FROM src LIMIT 1;
diff --git a/src/ql/src/test/queries/clientnegative/udf_when_type_wrong3.q b/src/ql/src/test/queries/clientnegative/udf_when_type_wrong3.q
deleted file mode 100644
index 8bb5fdd..0000000
--- a/src/ql/src/test/queries/clientnegative/udf_when_type_wrong3.q
+++ /dev/null
@@ -1,6 +0,0 @@
-SELECT CASE
-        WHEN 1=2 THEN '2'
-        WHEN 3=4 THEN '5'
-        ELSE 5.3
-       END
-FROM src LIMIT 1;
diff --git a/src/ql/src/test/queries/clientpositive/udf_case.q b/src/ql/src/test/queries/clientpositive/udf_case.q
index 4f71e70..75b31ae 100644
--- a/src/ql/src/test/queries/clientpositive/udf_case.q
+++ b/src/ql/src/test/queries/clientpositive/udf_case.q
@@ -60,4 +60,21 @@ FROM src LIMIT 1;
 -- we should never get to the ELSE branch, which would raise an exception
 SELECT CASE 1 WHEN 1 THEN 'yo'
 ELSE reflect('java.lang.String', 'bogus', 1) END
-FROM src LIMIT 1;
+FROM src tablesample (1 rows);
+
+-- Allow compatible types in when/return type
+SELECT CASE 1
+        WHEN 1 THEN 123.0BD
+        ELSE 0.0BD
+       END,
+       CASE 1
+        WHEN 1.0 THEN 123
+        WHEN 2 THEN 1.0
+        ELSE 0.0BD
+       END,
+       CASE 'abc'
+        WHEN cast('abc' as varchar(3)) THEN 'abcd'
+        WHEN 'efg' THEN cast('efgh' as varchar(10))
+        ELSE cast('ijkl' as char(4))
+       END
+FROM src tablesample (1 rows);
\ No newline at end of file
diff --git a/src/ql/src/test/queries/clientpositive/udf_when.q b/src/ql/src/test/queries/clientpositive/udf_when.q
index d94a594..8959054 100644
--- a/src/ql/src/test/queries/clientpositive/udf_when.q
+++ b/src/ql/src/test/queries/clientpositive/udf_when.q
@@ -54,4 +54,21 @@ SELECT CASE
         WHEN 25=26 THEN 27
         WHEN 28=28 THEN NULL
        END
-FROM src LIMIT 1;
+FROM src tablesample (1 rows);
+
+-- Allow compatible types to be used in return value
+SELECT CASE
+        WHEN 1=1 THEN 123.0BD
+        ELSE 0.0BD
+       END,
+       CASE
+        WHEN 1=1 THEN 123
+        WHEN 1=2 THEN 1.0
+        ELSE 0.0BD
+       END,
+       CASE
+        WHEN 1=1 THEN 'abcd'
+        WHEN 1=2 THEN cast('efgh' as varchar(10))
+        ELSE cast('ijkl' as char(4))
+       END
+FROM src tablesample (1 rows);
\ No newline at end of file
diff --git a/src/ql/src/test/results/clientnegative/udf_case_type_wrong.q.out b/src/ql/src/test/results/clientnegative/udf_case_type_wrong.q.out
deleted file mode 100644
index 3314002..0000000
--- a/src/ql/src/test/results/clientnegative/udf_case_type_wrong.q.out
+++ /dev/null
@@ -1 +0,0 @@
-FAILED: SemanticException [Error 10016]: Line 2:13 Argument type mismatch '1': The expressions after WHEN should have the same type with that after CASE: "string" is expected but "int" is found
diff --git a/src/ql/src/test/results/clientnegative/udf_case_type_wrong2.q.out b/src/ql/src/test/results/clientnegative/udf_case_type_wrong2.q.out
deleted file mode 100644
index 5be7d66..0000000
--- a/src/ql/src/test/results/clientnegative/udf_case_type_wrong2.q.out
+++ /dev/null
@@ -1 +0,0 @@
-FAILED: SemanticException [Error 10016]: Line 3:20 Argument type mismatch '4': The expressions after THEN should have the same type: "string" is expected but "int" is found
diff --git a/src/ql/src/test/results/clientnegative/udf_case_type_wrong3.q.out b/src/ql/src/test/results/clientnegative/udf_case_type_wrong3.q.out
deleted file mode 100644
index 901d9a9..0000000
--- a/src/ql/src/test/results/clientnegative/udf_case_type_wrong3.q.out
+++ /dev/null
@@ -1 +0,0 @@
-FAILED: SemanticException [Error 10016]: Line 4:13 Argument type mismatch '7': The expression after ELSE should have the same type as those after THEN: "string" is expected but "int" is found
diff --git a/src/ql/src/test/results/clientnegative/udf_when_type_wrong2.q.out b/src/ql/src/test/results/clientnegative/udf_when_type_wrong2.q.out
deleted file mode 100644
index e94e6e3..0000000
--- a/src/ql/src/test/results/clientnegative/udf_when_type_wrong2.q.out
+++ /dev/null
@@ -1 +0,0 @@
-FAILED: SemanticException [Error 10016]: Line 3:22 Argument type mismatch '4': The expressions after THEN should have the same type: "string" is expected but "int" is found
diff --git a/src/ql/src/test/results/clientnegative/udf_when_type_wrong3.q.out b/src/ql/src/test/results/clientnegative/udf_when_type_wrong3.q.out
deleted file mode 100644
index 7d4c12f..0000000
--- a/src/ql/src/test/results/clientnegative/udf_when_type_wrong3.q.out
+++ /dev/null
@@ -1 +0,0 @@
-FAILED: SemanticException [Error 10016]: Line 4:13 Argument type mismatch '5.3': The expression after ELSE should have the same type as those after THEN: "string" is expected but "double" is found
diff --git a/src/ql/src/test/results/clientpositive/udf_case.q.out b/src/ql/src/test/results/clientpositive/udf_case.q.out
index 0b8c542..fbd66b5 100644
--- a/src/ql/src/test/results/clientpositive/udf_case.q.out
+++ b/src/ql/src/test/results/clientpositive/udf_case.q.out
@@ -170,7 +170,7 @@ PREHOOK: query: -- verify that short-circuiting is working correctly for CASE
 -- we should never get to the ELSE branch, which would raise an exception
 SELECT CASE 1 WHEN 1 THEN 'yo'
 ELSE reflect('java.lang.String', 'bogus', 1) END
-FROM src LIMIT 1
+FROM src tablesample (1 rows)
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
 #### A masked pattern was here ####
@@ -178,8 +178,47 @@ POSTHOOK: query: -- verify that short-circuiting is working correctly for CASE
 -- we should never get to the ELSE branch, which would raise an exception
 SELECT CASE 1 WHEN 1 THEN 'yo'
 ELSE reflect('java.lang.String', 'bogus', 1) END
-FROM src LIMIT 1
+FROM src tablesample (1 rows)
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 yo
+PREHOOK: query: -- Allow compatible types in when/return type
+SELECT CASE 1
+        WHEN 1 THEN 123.0BD
+        ELSE 0.0BD
+       END,
+       CASE 1
+        WHEN 1.0 THEN 123
+        WHEN 2 THEN 1.0
+        ELSE 0.0BD
+       END,
+       CASE 'abc'
+        WHEN cast('abc' as varchar(3)) THEN 'abcd'
+        WHEN 'efg' THEN cast('efgh' as varchar(10))
+        ELSE cast('ijkl' as char(4))
+       END
+FROM src tablesample (1 rows)
+PREHOOK: type: QUERY
+PREHOOK: Input: default@src
+#### A masked pattern was here ####
+POSTHOOK: query: -- Allow compatible types in when/return type
+SELECT CASE 1
+        WHEN 1 THEN 123.0BD
+        ELSE 0.0BD
+       END,
+       CASE 1
+        WHEN 1.0 THEN 123
+        WHEN 2 THEN 1.0
+        ELSE 0.0BD
+       END,
+       CASE 'abc'
+        WHEN cast('abc' as varchar(3)) THEN 'abcd'
+        WHEN 'efg' THEN cast('efgh' as varchar(10))
+        ELSE cast('ijkl' as char(4))
+       END
+FROM src tablesample (1 rows)
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@src
+#### A masked pattern was here ####
+123	123.0	abcd
diff --git a/src/ql/src/test/results/clientpositive/udf_when.q.out b/src/ql/src/test/results/clientpositive/udf_when.q.out
index 9320c4f..9f6cfc6 100644
--- a/src/ql/src/test/results/clientpositive/udf_when.q.out
+++ b/src/ql/src/test/results/clientpositive/udf_when.q.out
@@ -132,7 +132,7 @@ PREHOOK: query: SELECT CASE
         WHEN 25=26 THEN 27
         WHEN 28=28 THEN NULL
        END
-FROM src LIMIT 1
+FROM src tablesample (1 rows)
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
 #### A masked pattern was here ####
@@ -161,8 +161,47 @@ POSTHOOK: query: SELECT CASE
         WHEN 25=26 THEN 27
         WHEN 28=28 THEN NULL
        END
-FROM src LIMIT 1
+FROM src tablesample (1 rows)
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 2	9	14	NULL	24	NULL
+PREHOOK: query: -- Allow compatible types to be used in return value
+SELECT CASE
+        WHEN 1=1 THEN 123.0BD
+        ELSE 0.0BD
+       END,
+       CASE
+        WHEN 1=1 THEN 123
+        WHEN 1=2 THEN 1.0
+        ELSE 0.0BD
+       END,
+       CASE
+        WHEN 1=1 THEN 'abcd'
+        WHEN 1=2 THEN cast('efgh' as varchar(10))
+        ELSE cast('ijkl' as char(4))
+       END
+FROM src tablesample (1 rows)
+PREHOOK: type: QUERY
+PREHOOK: Input: default@src
+#### A masked pattern was here ####
+POSTHOOK: query: -- Allow compatible types to be used in return value
+SELECT CASE
+        WHEN 1=1 THEN 123.0BD
+        ELSE 0.0BD
+       END,
+       CASE
+        WHEN 1=1 THEN 123
+        WHEN 1=2 THEN 1.0
+        ELSE 0.0BD
+       END,
+       CASE
+        WHEN 1=1 THEN 'abcd'
+        WHEN 1=2 THEN cast('efgh' as varchar(10))
+        ELSE cast('ijkl' as char(4))
+       END
+FROM src tablesample (1 rows)
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@src
+#### A masked pattern was here ####
+123	123.0	abcd
-- 
1.7.0.4

