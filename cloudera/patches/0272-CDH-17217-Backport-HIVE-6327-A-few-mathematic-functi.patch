From 3622e5912c89166b7d767ab92164c9a095beeff5 Mon Sep 17 00:00:00 2001
From: Xuefu Zhang <xzhang@xzlt.(none)>
Date: Thu, 6 Feb 2014 09:27:31 -0800
Subject: [PATCH 272/375] CDH-17217: Backport HIVE-6327: A few mathematic functions don't take decimal input

---
 .../org/apache/hadoop/hive/ql/udf/UDFAcos.java     |    3 +-
 .../org/apache/hadoop/hive/ql/udf/UDFAsin.java     |    3 +-
 .../org/apache/hadoop/hive/ql/udf/UDFAtan.java     |    3 +-
 .../java/org/apache/hadoop/hive/ql/udf/UDFCos.java |    3 +-
 .../java/org/apache/hadoop/hive/ql/udf/UDFExp.java |    3 +-
 .../java/org/apache/hadoop/hive/ql/udf/UDFLn.java  |    3 +-
 .../java/org/apache/hadoop/hive/ql/udf/UDFLog.java |   54 ++++++-
 .../org/apache/hadoop/hive/ql/udf/UDFLog10.java    |    3 +-
 .../org/apache/hadoop/hive/ql/udf/UDFLog2.java     |    3 +-
 .../org/apache/hadoop/hive/ql/udf/UDFMath.java     |   49 +++++++
 .../org/apache/hadoop/hive/ql/udf/UDFRadians.java  |    3 +-
 .../java/org/apache/hadoop/hive/ql/udf/UDFSin.java |    3 +-
 .../org/apache/hadoop/hive/ql/udf/UDFSqrt.java     |    3 +-
 .../java/org/apache/hadoop/hive/ql/udf/UDFTan.java |    3 +-
 .../org/apache/hadoop/hive/ql/udf/TestUDFMath.java |  150 ++++++++++++++++++++
 15 files changed, 259 insertions(+), 30 deletions(-)
 create mode 100644 ql/src/java/org/apache/hadoop/hive/ql/udf/UDFMath.java
 create mode 100644 ql/src/test/org/apache/hadoop/hive/ql/udf/TestUDFMath.java

diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFAcos.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFAcos.java
index 9844ec8..3c880c9 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFAcos.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFAcos.java
@@ -19,7 +19,6 @@
 package org.apache.hadoop.hive.ql.udf;
 
 import org.apache.hadoop.hive.ql.exec.Description;
-import org.apache.hadoop.hive.ql.exec.UDF;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
 
 /**
@@ -30,7 +29,7 @@
     + "NULL otherwise", extended = "Example:\n"
     + "  > SELECT _FUNC_(1) FROM src LIMIT 1;\n" + "  0\n"
     + "  > SELECT _FUNC_(2) FROM src LIMIT 1;\n" + "  NULL")
-public class UDFAcos extends UDF {
+public class UDFAcos extends UDFMath {
   private DoubleWritable result = new DoubleWritable();
 
   public UDFAcos() {
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFAsin.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFAsin.java
index f850790..da9f2db 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFAsin.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFAsin.java
@@ -19,7 +19,6 @@
 package org.apache.hadoop.hive.ql.udf;
 
 import org.apache.hadoop.hive.ql.exec.Description;
-import org.apache.hadoop.hive.ql.exec.UDF;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
 
 /**
@@ -32,7 +31,7 @@
     + "  > SELECT _FUNC_(0) FROM src LIMIT 1;\n"
     + "  0\n"
     + "  > SELECT _FUNC_(2) FROM src LIMIT 1;\n" + "  NULL")
-public class UDFAsin extends UDF {
+public class UDFAsin extends UDFMath {
   private DoubleWritable result = new DoubleWritable();
 
   public UDFAsin() {
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFAtan.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFAtan.java
index c4504bf..af4923c 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFAtan.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFAtan.java
@@ -21,7 +21,6 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hive.ql.exec.Description;
-import org.apache.hadoop.hive.ql.exec.UDF;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
 
 @Description(
@@ -31,7 +30,7 @@
         "  > SELECT _FUNC_(0) FROM src LIMIT 1;\n" +
         "  0"
     )
-public class UDFAtan extends UDF {
+public class UDFAtan extends UDFMath {
 
   @SuppressWarnings("unused")
   private static Log LOG = LogFactory.getLog(UDFAtan.class.getName());
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFCos.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFCos.java
index 06bbc39..07644da 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFCos.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFCos.java
@@ -19,7 +19,6 @@
 package org.apache.hadoop.hive.ql.udf;
 
 import org.apache.hadoop.hive.ql.exec.Description;
-import org.apache.hadoop.hive.ql.exec.UDF;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
 
 /**
@@ -30,7 +29,7 @@
     value = "_FUNC_(x) - returns the cosine of x (x is in radians)",
     extended = "Example:\n "
     + "  > SELECT _FUNC_(0) FROM src LIMIT 1;\n" + "  1")
-public class UDFCos extends UDF {
+public class UDFCos extends UDFMath {
   private DoubleWritable result = new DoubleWritable();
 
   public UDFCos() {
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFExp.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFExp.java
index 35b0987..9b0de92 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFExp.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFExp.java
@@ -19,7 +19,6 @@
 package org.apache.hadoop.hive.ql.udf;
 
 import org.apache.hadoop.hive.ql.exec.Description;
-import org.apache.hadoop.hive.ql.exec.UDF;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
 
 /**
@@ -30,7 +29,7 @@
     value = "_FUNC_(x) - Returns e to the power of x",
     extended = "Example:\n "
     + "  > SELECT _FUNC_(0) FROM src LIMIT 1;\n" + "  1")
-public class UDFExp extends UDF {
+public class UDFExp extends UDFMath {
   private DoubleWritable result = new DoubleWritable();
 
   public UDFExp() {
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLn.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLn.java
index 0e11a6c..266b402 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLn.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLn.java
@@ -19,7 +19,6 @@
 package org.apache.hadoop.hive.ql.udf;
 
 import org.apache.hadoop.hive.ql.exec.Description;
-import org.apache.hadoop.hive.ql.exec.UDF;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
 
 /**
@@ -30,7 +29,7 @@
     value = "_FUNC_(x) - Returns the natural logarithm of x",
     extended = "Example:\n"
     + "  > SELECT _FUNC_(1) FROM src LIMIT 1;\n" + "  0")
-public class UDFLn extends UDF {
+public class UDFLn extends UDFMath {
   private DoubleWritable result = new DoubleWritable();
 
   public UDFLn() {
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLog.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLog.java
index 6aa7f6a..c6967a4 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLog.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLog.java
@@ -19,8 +19,8 @@
 package org.apache.hadoop.hive.ql.udf;
 
 import org.apache.hadoop.hive.ql.exec.Description;
-import org.apache.hadoop.hive.ql.exec.UDF;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
+import org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;
 
 /**
  * UDFLog.
@@ -30,7 +30,7 @@
     value = "_FUNC_([b], x) - Returns the logarithm of x with base b",
     extended = "Example:\n"
     + "  > SELECT _FUNC_(13, 13) FROM src LIMIT 1;\n" + "  1")
-public class UDFLog extends UDF {
+public class UDFLog extends UDFMath {
   private DoubleWritable result = new DoubleWritable();
 
   public UDFLog() {
@@ -52,12 +52,54 @@ public DoubleWritable evaluate(DoubleWritable a) {
    * Returns the logarithm of "a" with base "base".
    */
   public DoubleWritable evaluate(DoubleWritable base, DoubleWritable a) {
-    if (a == null || a.get() <= 0.0 || base == null || base.get() <= 1.0) {
+    if (a == null || base == null) {
+      return null;
+    }
+    return log(base.get(), a.get());
+  }
+
+  private DoubleWritable log(double base, double input) {
+    if( base <= 1.0 || input <= 0.0) {
+      return null;
+    }
+    result.set(Math.log(input) / Math.log(base));
+    return result;
+  }
+
+  /**
+   * Get the logarithm of the given decimal with the given base.
+   */
+  public DoubleWritable evaluate(DoubleWritable base, HiveDecimalWritable writable) {
+    if (base == null || writable == null) {
+      return null;
+    }
+    double d = writable.getHiveDecimal().bigDecimalValue().doubleValue();
+    return log(base.get(), d);
+  }
+
+  /**
+   * Get the logarithm of input with the given decimal as the base.
+   */
+  public DoubleWritable evaluate(HiveDecimalWritable base, DoubleWritable d) {
+    if (base == null || d == null) {
       return null;
-    } else {
-      result.set(Math.log(a.get()) / Math.log(base.get()));
-      return result;
     }
+
+    double b = base.getHiveDecimal().bigDecimalValue().doubleValue();
+    return log(b, d.get());
+  }
+
+  /**
+   * Get the logarithm of the given decimal input with the given decimal base.
+   */
+  public DoubleWritable evaluate(HiveDecimalWritable baseWritable, HiveDecimalWritable writable) {
+    if (baseWritable == null || writable == null) {
+      return null;
+    }
+
+    double base = baseWritable.getHiveDecimal().bigDecimalValue().doubleValue();
+    double d = writable.getHiveDecimal().bigDecimalValue().doubleValue();
+    return log(base, d);
   }
 
 }
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLog10.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLog10.java
index a6e7c5e..1f6ffdb 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLog10.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLog10.java
@@ -19,7 +19,6 @@
 package org.apache.hadoop.hive.ql.udf;
 
 import org.apache.hadoop.hive.ql.exec.Description;
-import org.apache.hadoop.hive.ql.exec.UDF;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
 
 /**
@@ -30,7 +29,7 @@
     value = "_FUNC_(x) - Returns the logarithm of x with base 10",
     extended = "Example:\n"
     + "  > SELECT _FUNC_(10) FROM src LIMIT 1;\n" + "  1")
-public class UDFLog10 extends UDF {
+public class UDFLog10 extends UDFMath {
   private static double log10 = Math.log(10.0);
 
   private DoubleWritable result = new DoubleWritable();
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLog2.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLog2.java
index 87c6d22..c6d1f07 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLog2.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFLog2.java
@@ -19,7 +19,6 @@
 package org.apache.hadoop.hive.ql.udf;
 
 import org.apache.hadoop.hive.ql.exec.Description;
-import org.apache.hadoop.hive.ql.exec.UDF;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
 
 /**
@@ -30,7 +29,7 @@
     value = "_FUNC_(x) - Returns the logarithm of x with base 2",
     extended = "Example:\n"
     + "  > SELECT _FUNC_(2) FROM src LIMIT 1;\n" + "  1")
-public class UDFLog2 extends UDF {
+public class UDFLog2 extends UDFMath {
   private static double log2 = Math.log(2.0);
 
   private DoubleWritable result = new DoubleWritable();
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFMath.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFMath.java
new file mode 100644
index 0000000..c1981af
--- /dev/null
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFMath.java
@@ -0,0 +1,49 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hive.ql.udf;
+
+import org.apache.hadoop.hive.ql.exec.UDF;
+import org.apache.hadoop.hive.serde2.io.DoubleWritable;
+import org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;
+
+public abstract class UDFMath extends UDF {
+  private final DoubleWritable doubleWritable = new DoubleWritable();
+
+  public UDFMath() {
+  }
+
+  /**
+   * For subclass to implement.
+   */
+  public abstract DoubleWritable evaluate(DoubleWritable a);
+
+  /**
+   * Convert HiveDecimal to a double and call evaluate() on it.
+   */
+  public final DoubleWritable evaluate(HiveDecimalWritable writable) {
+    if (writable == null) {
+      return null;
+    }
+
+    double d = writable.getHiveDecimal().bigDecimalValue().doubleValue();
+    doubleWritable.set(d);
+    return evaluate(doubleWritable);
+  }
+
+}
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFRadians.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFRadians.java
index 484a926..949d82d 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFRadians.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFRadians.java
@@ -20,7 +20,6 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hive.ql.exec.Description;
-import org.apache.hadoop.hive.ql.exec.UDF;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
 
 
@@ -31,7 +30,7 @@
           "  > SELECT _FUNC_(90) FROM src LIMIT 1;\n" +
           "  1.5707963267949mo\n"
       )
-public class UDFRadians extends UDF {
+public class UDFRadians extends UDFMath {
 
   @SuppressWarnings("unused")
   private static Log LOG = LogFactory.getLog(UDFRadians.class.getName());
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFSin.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFSin.java
index 25ac46a..a6a6447 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFSin.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFSin.java
@@ -19,7 +19,6 @@
 package org.apache.hadoop.hive.ql.udf;
 
 import org.apache.hadoop.hive.ql.exec.Description;
-import org.apache.hadoop.hive.ql.exec.UDF;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
 
 /**
@@ -30,7 +29,7 @@
     value = "_FUNC_(x) - returns the sine of x (x is in radians)",
     extended = "Example:\n "
     + "  > SELECT _FUNC_(0) FROM src LIMIT 1;\n" + "  0")
-public class UDFSin extends UDF {
+public class UDFSin extends UDFMath {
   private DoubleWritable result = new DoubleWritable();
 
   public UDFSin() {
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFSqrt.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFSqrt.java
index 6717e9d..00b4a86 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFSqrt.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFSqrt.java
@@ -19,7 +19,6 @@
 package org.apache.hadoop.hive.ql.udf;
 
 import org.apache.hadoop.hive.ql.exec.Description;
-import org.apache.hadoop.hive.ql.exec.UDF;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
 
 /**
@@ -29,7 +28,7 @@
     value = "_FUNC_(x) - returns the square root of x",
     extended = "Example:\n "
     + "  > SELECT _FUNC_(4) FROM src LIMIT 1;\n" + "  2")
-public class UDFSqrt extends UDF {
+public class UDFSqrt extends UDFMath {
   private DoubleWritable result = new DoubleWritable();
 
   public UDFSqrt() {
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFTan.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFTan.java
index 9fe260a..ecae10e 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFTan.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFTan.java
@@ -21,7 +21,6 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hive.ql.exec.Description;
-import org.apache.hadoop.hive.ql.exec.UDF;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
 
 @Description(
@@ -31,7 +30,7 @@
     		"  > SELECT _FUNC_(0) FROM src LIMIT 1;\n" +
     		"  1"
     )
-public class UDFTan extends UDF {
+public class UDFTan extends UDFMath {
 
   @SuppressWarnings("unused")
   private static Log LOG = LogFactory.getLog(UDFTan.class.getName());
diff --git a/src/ql/src/test/org/apache/hadoop/hive/ql/udf/TestUDFMath.java b/src/ql/src/test/org/apache/hadoop/hive/ql/udf/TestUDFMath.java
new file mode 100644
index 0000000..dde978e
--- /dev/null
+++ b/src/ql/src/test/org/apache/hadoop/hive/ql/udf/TestUDFMath.java
@@ -0,0 +1,150 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hive.ql.udf;
+
+import org.apache.hadoop.hive.common.type.HiveDecimal;
+import org.apache.hadoop.hive.ql.metadata.HiveException;
+import org.apache.hadoop.hive.serde2.io.DoubleWritable;
+import org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestUDFMath {
+  private HiveDecimalWritable input = null;
+
+  @Test
+  public void testAcos() throws HiveException {
+    UDFAcos udf = new UDFAcos();
+    input = createDecimal("0.716");
+    DoubleWritable res = udf.evaluate(input);
+    Assert.assertEquals(0.7727408115633954, res.get(), 0.000001);
+  }
+
+  @Test
+  public void testAsin() throws HiveException {
+    UDFAsin udf = new UDFAsin();
+    input = createDecimal("0.716");
+    DoubleWritable res = udf.evaluate(input);
+    Assert.assertEquals(0.7980555152315012, res.get(), 0.000001);
+  }
+
+  @Test
+  public void testAtan() throws HiveException {
+    UDFAtan udf = new UDFAtan();
+    input = createDecimal("1.0");
+    DoubleWritable res = udf.evaluate(input);
+    Assert.assertEquals(0.7853981633974483, res.get(), 0.000001);
+  }
+
+  @Test
+  public void testCos() throws HiveException {
+    UDFCos udf = new UDFCos();
+    input = createDecimal("0.7727408115633954");
+    DoubleWritable res = udf.evaluate(input);
+    Assert.assertEquals(0.716, res.get(), 0.000001);
+  }
+
+  @Test
+  public void testSin() throws HiveException {
+    UDFSin udf = new UDFSin();
+    input = createDecimal("0.7980555152315012");
+    DoubleWritable res = udf.evaluate(input);
+    Assert.assertEquals(0.716, res.get(), 0.000001);
+  }
+
+  @Test
+  public void testTan() throws HiveException {
+    UDFTan udf = new UDFTan();
+    input = createDecimal("0.7853981633974483");
+    DoubleWritable res = udf.evaluate(input);
+    Assert.assertEquals(1.0, res.get(), 0.000001);
+  }
+
+  @Test
+  public void testExp() throws HiveException {
+    UDFExp udf = new UDFExp();
+    input = createDecimal("2.0");
+    DoubleWritable res = udf.evaluate(input);
+    Assert.assertEquals(7.38905609893065, res.get(), 0.000001);
+  }
+
+  @Test
+  public void testLn() throws HiveException {
+    UDFLn udf = new UDFLn();
+    input = createDecimal("7.38905609893065");
+    DoubleWritable res = udf.evaluate(input);
+    Assert.assertEquals(2.0, res.get(), 0.000001);
+  }
+
+  @Test
+  public void testLog() throws HiveException {
+    UDFLog udf = new UDFLog();
+    input = createDecimal("7.38905609893065");
+    DoubleWritable res = udf.evaluate(input);
+    Assert.assertEquals(2.0, res.get(), 0.000001);
+    
+    DoubleWritable input = new DoubleWritable(9.0);
+    res = udf.evaluate(createDecimal("3.0"), input);
+    Assert.assertEquals(2.0, res.get(), 0.000001);
+
+    DoubleWritable base = new DoubleWritable(3.0);
+    res = udf.evaluate(base, createDecimal("9.0"));
+    Assert.assertEquals(2.0, res.get(), 0.000001);
+
+    res = udf.evaluate(createDecimal("3.0"), createDecimal("9.0"));
+    Assert.assertEquals(2.0, res.get(), 0.000001);
+}
+
+  @Test
+  public void testLog10() throws HiveException {
+    UDFLog10 udf = new UDFLog10();
+    input = createDecimal("100.0");
+    DoubleWritable res = udf.evaluate(input);
+    Assert.assertEquals(2.0, res.get(), 0.000001);
+  }
+
+  @Test
+  public void testLog2() throws HiveException {
+    UDFLog2 udf = new UDFLog2();
+    input = createDecimal("8.0");
+    DoubleWritable res = udf.evaluate(input);
+    Assert.assertEquals(3.0, res.get(), 0.000001);
+  }
+
+  @Test
+  public void testRadians() throws HiveException {
+    UDFRadians udf = new UDFRadians();
+    input = createDecimal("45.0");
+    DoubleWritable res = udf.evaluate(input);
+    Assert.assertEquals(0.7853981633974483, res.get(), 0.000001);
+  }
+
+  @Test
+  public void testSqrt() throws HiveException {
+    UDFSqrt udf = new UDFSqrt();
+    input = createDecimal("49.0");
+    DoubleWritable res = udf.evaluate(input);
+    Assert.assertEquals(7.0, res.get(), 0.000001);
+  }
+
+  private HiveDecimalWritable createDecimal(String input) {
+    return new HiveDecimalWritable(HiveDecimal.create(input));
+  }
+
+}
-- 
1.7.0.4

