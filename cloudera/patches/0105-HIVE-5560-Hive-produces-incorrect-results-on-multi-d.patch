From bad1d128a5f699e36bb8361bb7d9d6d0faf10c0d Mon Sep 17 00:00:00 2001
From: Ashutosh Chauhan <hashutosh@apache.org>
Date: Wed, 23 Oct 2013 15:26:21 +0000
Subject: [PATCH 105/375] HIVE-5560 : Hive produces incorrect results on multi-distinct query (Navis via Ashutosh Chauhan)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1535059 13f79535-47bb-0310-9956-ffa450edef68
---
 .../hadoop/hive/ql/parse/SemanticAnalyzer.java     |   21 ++-
 .../clientpositive/groupby2_map_multi_distinct.q   |   11 ++
 .../auto_join18_multi_distinct.q.out               |    4 +-
 ql/src/test/results/clientpositive/count.q.out     |    8 +-
 .../groupby2_map_multi_distinct.q.out              |  178 +++++++++++++++++++-
 .../groupby2_noskew_multi_distinct.q.out           |   10 +-
 .../groupby3_map_multi_distinct.q.out              |    8 +-
 .../groupby3_noskew_multi_distinct.q.out           |   48 +++---
 .../clientpositive/groupby_distinct_samekey.q.out  |    4 +-
 .../groupby_map_ppr_multi_distinct.q.out           |    4 +-
 .../groupby_multi_single_reducer.q.out             |   12 +-
 .../groupby_ppr_multi_distinct.q.out               |   10 +-
 .../results/clientpositive/groupby_sort_11.q.out   |    4 +-
 .../clientpositive/join18_multi_distinct.q.out     |   55 ++----
 .../results/clientpositive/limit_pushdown.q.out    |    2 +-
 15 files changed, 270 insertions(+), 109 deletions(-)

diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
index c34b261..76ca606 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
@@ -3410,7 +3410,6 @@ private Operator genGroupByPlanMapGroupByOperator(QB qb,
       ASTNode value = entry.getValue();
       String aggName = unescapeIdentifier(value.getChild(0).getText());
       ArrayList<ExprNodeDesc> aggParameters = new ArrayList<ExprNodeDesc>();
-      new ArrayList<Class<?>>();
       // 0 is the function name
       for (int i = 1; i < value.getChildCount(); i++) {
         ASTNode paraExpr = (ASTNode) value.getChild(i);
@@ -3436,8 +3435,10 @@ private Operator genGroupByPlanMapGroupByOperator(QB qb,
       String field = getColumnInternalName(groupByKeys.size()
           + aggregations.size() - 1);
       outputColumnNames.add(field);
-      groupByOutputRowResolver.putExpression(value, new ColumnInfo(
-          field, udaf.returnType, "", false));
+      if (groupByOutputRowResolver.getExpression(value) == null) {
+        groupByOutputRowResolver.putExpression(value, new ColumnInfo(
+            field, udaf.returnType, "", false));
+      }
       // Save the evaluator so that it can be used by the next-stage
       // GroupByOperators
       if (genericUDAFEvaluators != null) {
@@ -3618,17 +3619,17 @@ private ReduceSinkOperator genGroupByPlanReduceSinkOperator(QB qb,
           }
           // add the expr to reduceKeys if it is not present
           if (ri == reduceKeys.size()) {
+            String name = getColumnInternalName(numExprs);
+            String field = Utilities.ReduceField.KEY.toString() + "." + colName
+                + ":" + i
+                + "." + name;
+            ColumnInfo colInfo = new ColumnInfo(field, expr.getTypeInfo(), null, false);
+            reduceSinkOutputRowResolver.putExpression(parameter, colInfo);
+            colExprMap.put(field, expr);
             reduceKeys.add(expr);
           }
           // add the index of expr in reduceKeys to distinctIndices
           distinctIndices.add(ri);
-          String name = getColumnInternalName(numExprs);
-          String field = Utilities.ReduceField.KEY.toString() + "." + colName
-              + ":" + i
-              + "." + name;
-          ColumnInfo colInfo = new ColumnInfo(field, expr.getTypeInfo(), null, false);
-          reduceSinkOutputRowResolver.putExpression(parameter, colInfo);
-          colExprMap.put(field, expr);
           numExprs++;
         }
         distinctColIndices.add(distinctIndices);
diff --git a/src/ql/src/test/queries/clientpositive/groupby2_map_multi_distinct.q b/src/ql/src/test/queries/clientpositive/groupby2_map_multi_distinct.q
index 25e6789..26071d6 100644
--- a/src/ql/src/test/queries/clientpositive/groupby2_map_multi_distinct.q
+++ b/src/ql/src/test/queries/clientpositive/groupby2_map_multi_distinct.q
@@ -12,3 +12,14 @@ FROM src
 INSERT OVERWRITE TABLE dest1 SELECT substr(src.key,1,1), count(DISTINCT substr(src.value,5)), concat(substr(src.key,1,1),sum(substr(src.value,5))), sum(DISTINCT substr(src.value, 5)), count(src.value) GROUP BY substr(src.key,1,1);
 
 SELECT dest1.* FROM dest1;
+
+-- HIVE-5560 when group by key is used in distinct funtion, invalid result are returned
+
+EXPLAIN
+FROM src
+INSERT OVERWRITE TABLE dest1 SELECT substr(src.key,1,1), count(DISTINCT substr(src.key,1,1)), concat(substr(src.key,1,1),sum(substr(src.value,5))), sum(DISTINCT substr(src.value, 5)), count(src.value) GROUP BY substr(src.key,1,1);
+
+FROM src
+INSERT OVERWRITE TABLE dest1 SELECT substr(src.key,1,1), count(DISTINCT substr(src.key,1,1)), concat(substr(src.key,1,1),sum(substr(src.value,5))), sum(DISTINCT substr(src.value, 5)), count(src.value) GROUP BY substr(src.key,1,1);
+
+SELECT dest1.* FROM dest1;
diff --git a/src/ql/src/test/results/clientpositive/auto_join18_multi_distinct.q.out b/src/ql/src/test/results/clientpositive/auto_join18_multi_distinct.q.out
index 307a74c..15e0a80 100644
--- a/src/ql/src/test/results/clientpositive/auto_join18_multi_distinct.q.out
+++ b/src/ql/src/test/results/clientpositive/auto_join18_multi_distinct.q.out
@@ -85,7 +85,7 @@ STAGE PLANS:
                 expr: count(DISTINCT KEY._col1:1._col0)
           bucketGroup: false
           keys:
-                expr: KEY._col1:1._col0
+                expr: KEY._col0
                 type: string
           mode: mergepartial
           outputColumnNames: _col0, _col1, _col2
@@ -306,4 +306,4 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 POSTHOOK: Input: default@src1
 #### A masked pattern was here ####
-14748607855
+40694575227
diff --git a/src/ql/src/test/results/clientpositive/count.q.out b/src/ql/src/test/results/clientpositive/count.q.out
index 05d5217..296f727 100644
--- a/src/ql/src/test/results/clientpositive/count.q.out
+++ b/src/ql/src/test/results/clientpositive/count.q.out
@@ -491,10 +491,10 @@ STAGE PLANS:
           aggregations:
                 expr: count(1)
                 expr: count()
-                expr: count(KEY._col0:14._col0)
-                expr: count(KEY._col0:14._col1)
-                expr: count(KEY._col0:14._col2)
-                expr: count(KEY._col0:14._col3)
+                expr: count(KEY._col0:0._col0)
+                expr: count(KEY._col0:1._col0)
+                expr: count(KEY._col0:2._col0)
+                expr: count(KEY._col0:3._col0)
                 expr: count(DISTINCT KEY._col0:0._col0)
                 expr: count(DISTINCT KEY._col0:1._col0)
                 expr: count(DISTINCT KEY._col0:2._col0)
diff --git a/src/ql/src/test/results/clientpositive/groupby2_map_multi_distinct.q.out b/src/ql/src/test/results/clientpositive/groupby2_map_multi_distinct.q.out
index 06dc53a..8de3728 100644
--- a/src/ql/src/test/results/clientpositive/groupby2_map_multi_distinct.q.out
+++ b/src/ql/src/test/results/clientpositive/groupby2_map_multi_distinct.q.out
@@ -128,8 +128,8 @@ POSTHOOK: Input: default@src
 POSTHOOK: Output: default@dest1
 POSTHOOK: Lineage: dest1.c1 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c2 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c3 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c3 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
 PREHOOK: query: SELECT dest1.* FROM dest1
 PREHOOK: type: QUERY
@@ -141,8 +141,8 @@ POSTHOOK: Input: default@dest1
 #### A masked pattern was here ####
 POSTHOOK: Lineage: dest1.c1 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c2 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c3 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c3 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
 0	1	00.0	0	3
 1	71	116414.0	10044	115
@@ -154,3 +154,173 @@ POSTHOOK: Lineage: dest1.key EXPRESSION [(src)src.FieldSchema(name:key, type:str
 7	6	7735.0	447	10
 8	8	8762.0	595	10
 9	7	91047.0	577	12
+PREHOOK: query: -- HIVE-5560 when group by key is used in distinct funtion, invalid result are returned
+
+EXPLAIN
+FROM src
+INSERT OVERWRITE TABLE dest1 SELECT substr(src.key,1,1), count(DISTINCT substr(src.key,1,1)), concat(substr(src.key,1,1),sum(substr(src.value,5))), sum(DISTINCT substr(src.value, 5)), count(src.value) GROUP BY substr(src.key,1,1)
+PREHOOK: type: QUERY
+POSTHOOK: query: -- HIVE-5560 when group by key is used in distinct funtion, invalid result are returned
+
+EXPLAIN
+FROM src
+INSERT OVERWRITE TABLE dest1 SELECT substr(src.key,1,1), count(DISTINCT substr(src.key,1,1)), concat(substr(src.key,1,1),sum(substr(src.value,5))), sum(DISTINCT substr(src.value, 5)), count(src.value) GROUP BY substr(src.key,1,1)
+POSTHOOK: type: QUERY
+POSTHOOK: Lineage: dest1.c1 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c2 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c3 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
+ABSTRACT SYNTAX TREE:
+  (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB (TOK_TABNAME dest1))) (TOK_SELECT (TOK_SELEXPR (TOK_FUNCTION substr (. (TOK_TABLE_OR_COL src) key) 1 1)) (TOK_SELEXPR (TOK_FUNCTIONDI count (TOK_FUNCTION substr (. (TOK_TABLE_OR_COL src) key) 1 1))) (TOK_SELEXPR (TOK_FUNCTION concat (TOK_FUNCTION substr (. (TOK_TABLE_OR_COL src) key) 1 1) (TOK_FUNCTION sum (TOK_FUNCTION substr (. (TOK_TABLE_OR_COL src) value) 5)))) (TOK_SELEXPR (TOK_FUNCTIONDI sum (TOK_FUNCTION substr (. (TOK_TABLE_OR_COL src) value) 5))) (TOK_SELEXPR (TOK_FUNCTION count (. (TOK_TABLE_OR_COL src) value)))) (TOK_GROUPBY (TOK_FUNCTION substr (. (TOK_TABLE_OR_COL src) key) 1 1))))
+
+STAGE DEPENDENCIES:
+  Stage-1 is a root stage
+  Stage-0 depends on stages: Stage-1
+  Stage-2 depends on stages: Stage-0
+
+STAGE PLANS:
+  Stage: Stage-1
+    Map Reduce
+      Alias -> Map Operator Tree:
+        src 
+          TableScan
+            alias: src
+            Select Operator
+              expressions:
+                    expr: key
+                    type: string
+                    expr: value
+                    type: string
+              outputColumnNames: key, value
+              Group By Operator
+                aggregations:
+                      expr: count(DISTINCT substr(key, 1, 1))
+                      expr: sum(substr(value, 5))
+                      expr: sum(DISTINCT substr(value, 5))
+                      expr: count(value)
+                bucketGroup: false
+                keys:
+                      expr: substr(key, 1, 1)
+                      type: string
+                      expr: substr(value, 5)
+                      type: string
+                mode: hash
+                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
+                Reduce Output Operator
+                  key expressions:
+                        expr: _col0
+                        type: string
+                        expr: _col1
+                        type: string
+                  sort order: ++
+                  Map-reduce partition columns:
+                        expr: _col0
+                        type: string
+                  tag: -1
+                  value expressions:
+                        expr: _col2
+                        type: bigint
+                        expr: _col3
+                        type: double
+                        expr: _col4
+                        type: double
+                        expr: _col5
+                        type: bigint
+      Reduce Operator Tree:
+        Group By Operator
+          aggregations:
+                expr: count(DISTINCT KEY._col1:0._col0)
+                expr: sum(VALUE._col1)
+                expr: sum(DISTINCT KEY._col1:1._col0)
+                expr: count(VALUE._col3)
+          bucketGroup: false
+          keys:
+                expr: KEY._col0
+                type: string
+          mode: mergepartial
+          outputColumnNames: _col0, _col1, _col2, _col3, _col4
+          Select Operator
+            expressions:
+                  expr: _col0
+                  type: string
+                  expr: UDFToInteger(_col1)
+                  type: int
+                  expr: concat(_col0, _col2)
+                  type: string
+                  expr: UDFToInteger(_col3)
+                  type: int
+                  expr: UDFToInteger(_col4)
+                  type: int
+            outputColumnNames: _col0, _col1, _col2, _col3, _col4
+            File Output Operator
+              compressed: false
+              GlobalTableId: 1
+              table:
+                  input format: org.apache.hadoop.mapred.TextInputFormat
+                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
+                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
+                  name: default.dest1
+
+  Stage: Stage-0
+    Move Operator
+      tables:
+          replace: true
+          table:
+              input format: org.apache.hadoop.mapred.TextInputFormat
+              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
+              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
+              name: default.dest1
+
+  Stage: Stage-2
+    Stats-Aggr Operator
+
+
+PREHOOK: query: FROM src
+INSERT OVERWRITE TABLE dest1 SELECT substr(src.key,1,1), count(DISTINCT substr(src.key,1,1)), concat(substr(src.key,1,1),sum(substr(src.value,5))), sum(DISTINCT substr(src.value, 5)), count(src.value) GROUP BY substr(src.key,1,1)
+PREHOOK: type: QUERY
+PREHOOK: Input: default@src
+PREHOOK: Output: default@dest1
+POSTHOOK: query: FROM src
+INSERT OVERWRITE TABLE dest1 SELECT substr(src.key,1,1), count(DISTINCT substr(src.key,1,1)), concat(substr(src.key,1,1),sum(substr(src.value,5))), sum(DISTINCT substr(src.value, 5)), count(src.value) GROUP BY substr(src.key,1,1)
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@src
+POSTHOOK: Output: default@dest1
+POSTHOOK: Lineage: dest1.c1 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c1 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c2 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c2 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c3 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c3 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
+PREHOOK: query: SELECT dest1.* FROM dest1
+PREHOOK: type: QUERY
+PREHOOK: Input: default@dest1
+#### A masked pattern was here ####
+POSTHOOK: query: SELECT dest1.* FROM dest1
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@dest1
+#### A masked pattern was here ####
+POSTHOOK: Lineage: dest1.c1 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c1 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c2 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c2 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c3 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c3 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
+0	1	00.0	0	3
+1	1	116414.0	10044	115
+2	1	225571.0	15780	111
+3	1	332004.0	20119	99
+4	1	452763.0	30965	124
+5	1	5397.0	278	10
+6	1	6398.0	331	6
+7	1	7735.0	447	10
+8	1	8762.0	595	10
+9	1	91047.0	577	12
diff --git a/src/ql/src/test/results/clientpositive/groupby2_noskew_multi_distinct.q.out b/src/ql/src/test/results/clientpositive/groupby2_noskew_multi_distinct.q.out
index f697ea0..1750a5a 100644
--- a/src/ql/src/test/results/clientpositive/groupby2_noskew_multi_distinct.q.out
+++ b/src/ql/src/test/results/clientpositive/groupby2_noskew_multi_distinct.q.out
@@ -51,7 +51,7 @@ STAGE PLANS:
         Group By Operator
           aggregations:
                 expr: count(DISTINCT KEY._col1:0._col0)
-                expr: sum(KEY._col1:1._col0)
+                expr: sum(KEY._col1:0._col0)
                 expr: sum(DISTINCT KEY._col1:1._col0)
                 expr: count(VALUE._col0)
           bucketGroup: false
@@ -108,8 +108,8 @@ POSTHOOK: Input: default@src
 POSTHOOK: Output: default@dest_g2
 POSTHOOK: Lineage: dest_g2.c1 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest_g2.c2 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest_g2.c3 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest_g2.c4 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest_g2.c3 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest_g2.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest_g2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
 PREHOOK: query: SELECT dest_g2.* FROM dest_g2
 PREHOOK: type: QUERY
@@ -121,8 +121,8 @@ POSTHOOK: Input: default@dest_g2
 #### A masked pattern was here ####
 POSTHOOK: Lineage: dest_g2.c1 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest_g2.c2 EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest_g2.c3 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest_g2.c4 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest_g2.c3 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest_g2.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest_g2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
 0	1	00.0	0	3
 1	71	116414.0	10044	115
diff --git a/src/ql/src/test/results/clientpositive/groupby3_map_multi_distinct.q.out b/src/ql/src/test/results/clientpositive/groupby3_map_multi_distinct.q.out
index b212c90..a301633 100644
--- a/src/ql/src/test/results/clientpositive/groupby3_map_multi_distinct.q.out
+++ b/src/ql/src/test/results/clientpositive/groupby3_map_multi_distinct.q.out
@@ -199,8 +199,8 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 POSTHOOK: Output: default@dest1
 POSTHOOK: Lineage: dest1.c1 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c10 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c11 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c10 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c11 EXPRESSION [(src)src.null, ]
 POSTHOOK: Lineage: dest1.c2 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c3 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
@@ -218,8 +218,8 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest1
 #### A masked pattern was here ####
 POSTHOOK: Lineage: dest1.c1 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c10 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c11 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c10 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c11 EXPRESSION [(src)src.null, ]
 POSTHOOK: Lineage: dest1.c2 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c3 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
diff --git a/src/ql/src/test/results/clientpositive/groupby3_noskew_multi_distinct.q.out b/src/ql/src/test/results/clientpositive/groupby3_noskew_multi_distinct.q.out
index ae7caea..2bb05ac 100644
--- a/src/ql/src/test/results/clientpositive/groupby3_noskew_multi_distinct.q.out
+++ b/src/ql/src/test/results/clientpositive/groupby3_noskew_multi_distinct.q.out
@@ -62,15 +62,15 @@ STAGE PLANS:
       Reduce Operator Tree:
         Group By Operator
           aggregations:
-                expr: sum(KEY._col0:2._col0)
-                expr: avg(KEY._col0:2._col0)
+                expr: sum(KEY._col0:0._col0)
+                expr: avg(KEY._col0:0._col0)
                 expr: avg(DISTINCT KEY._col0:0._col0)
-                expr: max(KEY._col0:2._col0)
-                expr: min(KEY._col0:2._col0)
-                expr: std(KEY._col0:2._col0)
-                expr: stddev_samp(KEY._col0:2._col0)
-                expr: variance(KEY._col0:2._col0)
-                expr: var_samp(KEY._col0:2._col0)
+                expr: max(KEY._col0:0._col0)
+                expr: min(KEY._col0:0._col0)
+                expr: std(KEY._col0:0._col0)
+                expr: stddev_samp(KEY._col0:0._col0)
+                expr: variance(KEY._col0:0._col0)
+                expr: var_samp(KEY._col0:0._col0)
                 expr: sum(DISTINCT KEY._col0:1._col0)
                 expr: count(DISTINCT KEY._col0:2._col0)
           bucketGroup: false
@@ -156,17 +156,17 @@ INSERT OVERWRITE TABLE dest1 SELECT
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 POSTHOOK: Output: default@dest1
-POSTHOOK: Lineage: dest1.c1 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c1 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c10 EXPRESSION [(src)src.null, ]
 POSTHOOK: Lineage: dest1.c11 EXPRESSION [(src)src.null, ]
-POSTHOOK: Lineage: dest1.c2 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c2 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c3 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.null, ]
-POSTHOOK: Lineage: dest1.c5 EXPRESSION [(src)src.null, ]
-POSTHOOK: Lineage: dest1.c6 EXPRESSION [(src)src.null, ]
-POSTHOOK: Lineage: dest1.c7 EXPRESSION [(src)src.null, ]
-POSTHOOK: Lineage: dest1.c8 EXPRESSION [(src)src.null, ]
-POSTHOOK: Lineage: dest1.c9 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c5 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c6 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c7 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c8 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c9 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 PREHOOK: query: SELECT dest1.* FROM dest1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@dest1
@@ -175,15 +175,15 @@ POSTHOOK: query: SELECT dest1.* FROM dest1
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest1
 #### A masked pattern was here ####
-POSTHOOK: Lineage: dest1.c1 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c1 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c10 EXPRESSION [(src)src.null, ]
 POSTHOOK: Lineage: dest1.c11 EXPRESSION [(src)src.null, ]
-POSTHOOK: Lineage: dest1.c2 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c2 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c3 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.null, ]
-POSTHOOK: Lineage: dest1.c5 EXPRESSION [(src)src.null, ]
-POSTHOOK: Lineage: dest1.c6 EXPRESSION [(src)src.null, ]
-POSTHOOK: Lineage: dest1.c7 EXPRESSION [(src)src.null, ]
-POSTHOOK: Lineage: dest1.c8 EXPRESSION [(src)src.null, ]
-POSTHOOK: Lineage: dest1.c9 EXPRESSION [(src)src.null, ]
+POSTHOOK: Lineage: dest1.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c5 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c6 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c7 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c8 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c9 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 130091.0	260.182	256.10355987055016	98.0	0.0	142.92680950752379	143.06995106518903	20428.07287599999	20469.010897795582	79136.0	309.0
diff --git a/src/ql/src/test/results/clientpositive/groupby_distinct_samekey.q.out b/src/ql/src/test/results/clientpositive/groupby_distinct_samekey.q.out
index 3b846d7..318ffa1 100644
--- a/src/ql/src/test/results/clientpositive/groupby_distinct_samekey.q.out
+++ b/src/ql/src/test/results/clientpositive/groupby_distinct_samekey.q.out
@@ -119,7 +119,7 @@ STAGE PLANS:
                 expr: sum(DISTINCT KEY._col1:0._col0)
           bucketGroup: false
           keys:
-                expr: KEY._col1:0._col0
+                expr: KEY._col0
                 type: int
           mode: mergepartial
           outputColumnNames: _col0, _col1
@@ -197,7 +197,7 @@ STAGE PLANS:
                 expr: sum(DISTINCT KEY._col1:0._col0)
           bucketGroup: false
           keys:
-                expr: KEY._col1:0._col0
+                expr: KEY._col0
                 type: int
           mode: mergepartial
           outputColumnNames: _col0, _col1
diff --git a/src/ql/src/test/results/clientpositive/groupby_map_ppr_multi_distinct.q.out b/src/ql/src/test/results/clientpositive/groupby_map_ppr_multi_distinct.q.out
index 07d4d52..507a17a 100644
--- a/src/ql/src/test/results/clientpositive/groupby_map_ppr_multi_distinct.q.out
+++ b/src/ql/src/test/results/clientpositive/groupby_map_ppr_multi_distinct.q.out
@@ -277,7 +277,7 @@ POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
 POSTHOOK: Output: default@dest1
 POSTHOOK: Lineage: dest1.c1 EXPRESSION [(srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c2 EXPRESSION [(srcpart)src.FieldSchema(name:key, type:string, comment:default), (srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c3 EXPRESSION [(srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c3 EXPRESSION [(srcpart)src.null, ]
 POSTHOOK: Lineage: dest1.c4 EXPRESSION [(srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.key EXPRESSION [(srcpart)src.FieldSchema(name:key, type:string, comment:default), ]
 PREHOOK: query: SELECT dest1.* FROM dest1
@@ -290,7 +290,7 @@ POSTHOOK: Input: default@dest1
 #### A masked pattern was here ####
 POSTHOOK: Lineage: dest1.c1 EXPRESSION [(srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c2 EXPRESSION [(srcpart)src.FieldSchema(name:key, type:string, comment:default), (srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c3 EXPRESSION [(srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: dest1.c3 EXPRESSION [(srcpart)src.null, ]
 POSTHOOK: Lineage: dest1.c4 EXPRESSION [(srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.key EXPRESSION [(srcpart)src.FieldSchema(name:key, type:string, comment:default), ]
 0	1	00.0	0	1
diff --git a/src/ql/src/test/results/clientpositive/groupby_multi_single_reducer.q.out b/src/ql/src/test/results/clientpositive/groupby_multi_single_reducer.q.out
index 0e4a26a..ea124f3 100644
--- a/src/ql/src/test/results/clientpositive/groupby_multi_single_reducer.q.out
+++ b/src/ql/src/test/results/clientpositive/groupby_multi_single_reducer.q.out
@@ -84,7 +84,7 @@ STAGE PLANS:
             Group By Operator
               aggregations:
                     expr: count(DISTINCT KEY._col1:0._col0)
-                    expr: sum(KEY._col1:1._col0)
+                    expr: sum(KEY._col1:0._col0)
                     expr: sum(DISTINCT KEY._col1:1._col0)
                     expr: count(VALUE._col0)
               bucketGroup: false
@@ -121,7 +121,7 @@ STAGE PLANS:
             Group By Operator
               aggregations:
                     expr: count(DISTINCT KEY._col1:0._col0)
-                    expr: sum(KEY._col1:1._col0)
+                    expr: sum(KEY._col1:0._col0)
                     expr: sum(DISTINCT KEY._col1:1._col0)
                     expr: count(VALUE._col0)
               bucketGroup: false
@@ -154,7 +154,7 @@ STAGE PLANS:
           Group By Operator
             aggregations:
                   expr: count(DISTINCT KEY._col1:0._col0)
-                  expr: sum(KEY._col1:1._col0)
+                  expr: sum(KEY._col1:0._col0)
                   expr: sum(DISTINCT KEY._col1:1._col0)
                   expr: count(VALUE._col0)
             bucketGroup: false
@@ -447,7 +447,7 @@ STAGE PLANS:
             Group By Operator
               aggregations:
                     expr: count(DISTINCT KEY._col1:0._col0)
-                    expr: sum(KEY._col1:1._col0)
+                    expr: sum(KEY._col1:0._col0)
                     expr: sum(DISTINCT KEY._col1:1._col0)
                     expr: count(VALUE._col0)
               bucketGroup: false
@@ -484,7 +484,7 @@ STAGE PLANS:
             Group By Operator
               aggregations:
                     expr: count(DISTINCT KEY._col1:0._col0)
-                    expr: sum(KEY._col1:1._col0)
+                    expr: sum(KEY._col1:0._col0)
                     expr: sum(DISTINCT KEY._col1:1._col0)
                     expr: count(VALUE._col0)
               bucketGroup: false
@@ -517,7 +517,7 @@ STAGE PLANS:
           Group By Operator
             aggregations:
                   expr: count(DISTINCT KEY._col1:0._col0)
-                  expr: sum(KEY._col1:1._col0)
+                  expr: sum(KEY._col1:0._col0)
                   expr: sum(DISTINCT KEY._col1:1._col0)
                   expr: count(VALUE._col0)
             bucketGroup: false
diff --git a/src/ql/src/test/results/clientpositive/groupby_ppr_multi_distinct.q.out b/src/ql/src/test/results/clientpositive/groupby_ppr_multi_distinct.q.out
index ccabf06..fb454d1 100644
--- a/src/ql/src/test/results/clientpositive/groupby_ppr_multi_distinct.q.out
+++ b/src/ql/src/test/results/clientpositive/groupby_ppr_multi_distinct.q.out
@@ -156,7 +156,7 @@ STAGE PLANS:
         Group By Operator
           aggregations:
                 expr: count(DISTINCT KEY._col1:0._col0)
-                expr: sum(KEY._col1:1._col0)
+                expr: sum(KEY._col1:0._col0)
                 expr: sum(DISTINCT KEY._col1:1._col0)
                 expr: count(DISTINCT KEY._col1:2._col0)
           bucketGroup: false
@@ -252,8 +252,8 @@ POSTHOOK: Input: default@srcpart@ds=2008-04-08/hr=12
 POSTHOOK: Output: default@dest1
 POSTHOOK: Lineage: dest1.c1 EXPRESSION [(srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c2 EXPRESSION [(srcpart)src.FieldSchema(name:key, type:string, comment:default), (srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c3 EXPRESSION [(srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c4 EXPRESSION [(srcpart)src.null, ]
+POSTHOOK: Lineage: dest1.c3 EXPRESSION [(srcpart)src.null, ]
+POSTHOOK: Lineage: dest1.c4 EXPRESSION [(srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.key EXPRESSION [(srcpart)src.FieldSchema(name:key, type:string, comment:default), ]
 PREHOOK: query: SELECT dest1.* FROM dest1
 PREHOOK: type: QUERY
@@ -265,8 +265,8 @@ POSTHOOK: Input: default@dest1
 #### A masked pattern was here ####
 POSTHOOK: Lineage: dest1.c1 EXPRESSION [(srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.c2 EXPRESSION [(srcpart)src.FieldSchema(name:key, type:string, comment:default), (srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c3 EXPRESSION [(srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
-POSTHOOK: Lineage: dest1.c4 EXPRESSION [(srcpart)src.null, ]
+POSTHOOK: Lineage: dest1.c3 EXPRESSION [(srcpart)src.null, ]
+POSTHOOK: Lineage: dest1.c4 EXPRESSION [(srcpart)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest1.key EXPRESSION [(srcpart)src.FieldSchema(name:key, type:string, comment:default), ]
 0	1	00.0	0	1
 1	71	132828.0	10044	71
diff --git a/src/ql/src/test/results/clientpositive/groupby_sort_11.q.out b/src/ql/src/test/results/clientpositive/groupby_sort_11.q.out
index b637db5..82c6404 100644
--- a/src/ql/src/test/results/clientpositive/groupby_sort_11.q.out
+++ b/src/ql/src/test/results/clientpositive/groupby_sort_11.q.out
@@ -269,7 +269,7 @@ STAGE PLANS:
                 expr: sum(DISTINCT KEY._col1:1._col0)
           bucketGroup: false
           keys:
-                expr: KEY._col1:1._col0
+                expr: KEY._col0
                 type: string
           mode: mergepartial
           outputColumnNames: _col0, _col1, _col2, _col3, _col4
@@ -381,7 +381,7 @@ STAGE PLANS:
                 expr: sum(DISTINCT KEY._col1:1._col0)
           bucketGroup: false
           keys:
-                expr: KEY._col1:1._col0
+                expr: KEY._col0
                 type: string
           mode: mergepartial
           outputColumnNames: _col0, _col1, _col2, _col3, _col4
diff --git a/src/ql/src/test/results/clientpositive/join18_multi_distinct.q.out b/src/ql/src/test/results/clientpositive/join18_multi_distinct.q.out
index 7b94748..ce43246 100644
--- a/src/ql/src/test/results/clientpositive/join18_multi_distinct.q.out
+++ b/src/ql/src/test/results/clientpositive/join18_multi_distinct.q.out
@@ -85,7 +85,7 @@ STAGE PLANS:
                 expr: count(DISTINCT KEY._col1:1._col0)
           bucketGroup: false
           keys:
-                expr: KEY._col1:1._col0
+                expr: KEY._col0
                 type: string
           mode: mergepartial
           outputColumnNames: _col0, _col1, _col2
@@ -309,28 +309,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 POSTHOOK: Input: default@src1
 #### A masked pattern was here ####
-NULL	NULL		1	0
-NULL	NULL		1	0
-NULL	NULL		1	0
-NULL	NULL		1	1
-NULL	NULL	val_146	1	0
-NULL	NULL	val_150	1	0
-NULL	NULL	val_165	1	0
-NULL	NULL	val_193	1	0
-NULL	NULL	val_213	1	0
-NULL	NULL	val_238	1	0
-NULL	NULL	val_255	1	0
-NULL	NULL	val_265	1	0
-NULL	NULL	val_27	1	0
-NULL	NULL	val_273	1	0
-NULL	NULL	val_278	1	0
-NULL	NULL	val_311	1	0
-NULL	NULL	val_401	1	0
-NULL	NULL	val_406	1	0
-NULL	NULL	val_409	1	0
-NULL	NULL	val_484	1	0
-NULL	NULL	val_66	1	0
-NULL	NULL	val_98	1	0
+NULL	NULL		7	1
 0	3	NULL	NULL	NULL
 10	1	NULL	NULL	NULL
 100	2	NULL	NULL	NULL
@@ -348,7 +327,7 @@ NULL	NULL	val_98	1	0
 120	2	NULL	NULL	NULL
 125	2	NULL	NULL	NULL
 126	1	NULL	NULL	NULL
-128	3	128	0	1
+128	3	128	1	1
 129	2	NULL	NULL	NULL
 131	1	NULL	NULL	NULL
 133	1	NULL	NULL	NULL
@@ -358,10 +337,10 @@ NULL	NULL	val_98	1	0
 138	4	NULL	NULL	NULL
 143	1	NULL	NULL	NULL
 145	1	NULL	NULL	NULL
-146	2	146	0	1
+146	2	146	1	1
 149	2	NULL	NULL	NULL
 15	2	NULL	NULL	NULL
-150	1	150	0	1
+150	1	150	1	1
 152	2	NULL	NULL	NULL
 153	1	NULL	NULL	NULL
 155	1	NULL	NULL	NULL
@@ -413,7 +392,7 @@ NULL	NULL	val_98	1	0
 207	2	NULL	NULL	NULL
 208	3	NULL	NULL	NULL
 209	2	NULL	NULL	NULL
-213	2	213	0	1
+213	2	213	1	1
 214	1	NULL	NULL	NULL
 216	2	NULL	NULL	NULL
 217	2	NULL	NULL	NULL
@@ -422,7 +401,7 @@ NULL	NULL	val_98	1	0
 221	2	NULL	NULL	NULL
 222	1	NULL	NULL	NULL
 223	2	NULL	NULL	NULL
-224	2	224	0	1
+224	2	224	1	1
 226	1	NULL	NULL	NULL
 228	1	NULL	NULL	NULL
 229	2	NULL	NULL	NULL
@@ -430,7 +409,7 @@ NULL	NULL	val_98	1	0
 233	2	NULL	NULL	NULL
 235	1	NULL	NULL	NULL
 237	2	NULL	NULL	NULL
-238	2	238	0	1
+238	2	238	1	1
 239	2	NULL	NULL	NULL
 24	2	NULL	NULL	NULL
 241	1	NULL	NULL	NULL
@@ -440,7 +419,7 @@ NULL	NULL	val_98	1	0
 248	1	NULL	NULL	NULL
 249	1	NULL	NULL	NULL
 252	1	NULL	NULL	NULL
-255	2	255	0	1
+255	2	255	1	1
 256	2	NULL	NULL	NULL
 257	1	NULL	NULL	NULL
 258	1	NULL	NULL	NULL
@@ -452,11 +431,11 @@ NULL	NULL	val_98	1	0
 266	1	NULL	NULL	NULL
 27	1	NULL	NULL	NULL
 272	2	NULL	NULL	NULL
-273	3	273	0	1
+273	3	273	1	1
 274	1	NULL	NULL	NULL
 275	1	NULL	NULL	NULL
 277	4	NULL	NULL	NULL
-278	2	278	0	1
+278	2	278	1	1
 28	1	NULL	NULL	NULL
 280	2	NULL	NULL	NULL
 281	2	NULL	NULL	NULL
@@ -480,7 +459,7 @@ NULL	NULL	val_98	1	0
 308	1	NULL	NULL	NULL
 309	2	NULL	NULL	NULL
 310	1	NULL	NULL	NULL
-311	3	311	0	1
+311	3	311	1	1
 315	1	NULL	NULL	NULL
 316	3	NULL	NULL	NULL
 317	2	NULL	NULL	NULL
@@ -515,7 +494,7 @@ NULL	NULL	val_98	1	0
 366	1	NULL	NULL	NULL
 367	2	NULL	NULL	NULL
 368	1	NULL	NULL	NULL
-369	3	369	0	1
+369	3	369	1	1
 37	2	NULL	NULL	NULL
 373	1	NULL	NULL	NULL
 374	1	NULL	NULL	NULL
@@ -536,11 +515,11 @@ NULL	NULL	val_98	1	0
 399	2	NULL	NULL	NULL
 4	1	NULL	NULL	NULL
 400	1	NULL	NULL	NULL
-401	5	401	0	1
+401	5	401	1	1
 402	1	NULL	NULL	NULL
 403	3	NULL	NULL	NULL
 404	2	NULL	NULL	NULL
-406	4	406	0	1
+406	4	406	1	1
 407	1	NULL	NULL	NULL
 409	3	NULL	NULL	NULL
 41	1	NULL	NULL	NULL
@@ -616,7 +595,7 @@ NULL	NULL	val_98	1	0
 58	2	NULL	NULL	NULL
 64	1	NULL	NULL	NULL
 65	1	NULL	NULL	NULL
-66	1	66	0	1
+66	1	66	1	1
 67	2	NULL	NULL	NULL
 69	1	NULL	NULL	NULL
 70	3	NULL	NULL	NULL
@@ -639,4 +618,4 @@ NULL	NULL	val_98	1	0
 95	2	NULL	NULL	NULL
 96	1	NULL	NULL	NULL
 97	2	NULL	NULL	NULL
-98	2	98	0	1
+98	2	98	1	1
diff --git a/src/ql/src/test/results/clientpositive/limit_pushdown.q.out b/src/ql/src/test/results/clientpositive/limit_pushdown.q.out
index ae29100..6aa5feb 100644
--- a/src/ql/src/test/results/clientpositive/limit_pushdown.q.out
+++ b/src/ql/src/test/results/clientpositive/limit_pushdown.q.out
@@ -544,7 +544,7 @@ STAGE PLANS:
                 expr: count(DISTINCT KEY._col1:0._col0)
           bucketGroup: false
           keys:
-                expr: KEY._col1:0._col0
+                expr: KEY._col0
                 type: string
           mode: mergepartial
           outputColumnNames: _col0, _col1
-- 
1.7.0.4

