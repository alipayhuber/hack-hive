From 171f1fe2bdb95a96ae1bc33fed0c9eabf67f18bc Mon Sep 17 00:00:00 2001
From: Xuefu Zhang <xuefu@apache.org>
Date: Wed, 4 Dec 2013 02:35:45 +0000
Subject: [PATCH 182/375] CDH-16015: HIVE-5866: Hive divide operator generates wrong results in certain cases (reviewed by Prasad)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1547691 13f79535-47bb-0310-9956-ffa450edef68

Conflicts:
	ql/src/test/results/clientpositive/decimal_udf.q.out
	ql/src/test/results/clientpositive/vectorization_5.q.out
	ql/src/test/results/clientpositive/vectorization_short_regress.q.out

Vectorization tests removed, as they are not in cdh5-0.12.0 branch.
Test output regenerated, as missing a test optimization in cdh5-0.12.0 branch.
---
 .../hive/ql/udf/generic/GenericUDFBaseNumeric.java |   22 +-
 .../hive/ql/udf/generic/GenericUDFOPDivide.java    |   29 +-
 .../hive/ql/udf/generic/GenericUDFOPMinus.java     |    4 +-
 .../hive/ql/udf/generic/GenericUDFOPMod.java       |    9 +-
 .../hive/ql/udf/generic/GenericUDFOPMultiply.java  |    6 +-
 .../hive/ql/udf/generic/GenericUDFOPPlus.java      |    6 +-
 .../hive/ql/udf/generic/GenericUDFPosMod.java      |   10 +-
 .../ql/udf/generic/TestGenericUDFOPDivide.java     |   48 ++
 .../queries/clientpositive/decimal_precision.q     |    2 +-
 ql/src/test/queries/clientpositive/decimal_udf.q   |    2 +-
 .../results/clientpositive/decimal_precision.q.out |  466 ++++++++++----------
 .../test/results/clientpositive/decimal_udf.q.out  |  216 +++++-----
 .../clientpositive/ql_rewrite_gbtoidx.q.out        |    2 +-
 13 files changed, 448 insertions(+), 374 deletions(-)

diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseNumeric.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseNumeric.java
index a1015e9..28b5ffd 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseNumeric.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseNumeric.java
@@ -21,6 +21,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.hadoop.hive.common.type.HiveDecimal;
 import org.apache.hadoop.hive.ql.exec.Description;
 import org.apache.hadoop.hive.ql.exec.FunctionRegistry;
 import org.apache.hadoop.hive.ql.exec.NoMatchingMethodException;
@@ -38,6 +39,7 @@
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
+import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
 import org.apache.hadoop.hive.serde2.typeinfo.DecimalTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
@@ -113,6 +115,17 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
       return null;
     }
 
+    // Handle decimal separately.
+    if (resultOI.getPrimitiveCategory() == PrimitiveCategory.DECIMAL) {
+      HiveDecimal hdLeft = PrimitiveObjectInspectorUtils.getHiveDecimal(left, leftOI);
+      HiveDecimal hdRight = PrimitiveObjectInspectorUtils.getHiveDecimal(right, rightOI);
+      if (hdLeft == null || hdRight == null) {
+        return null;
+      }
+      HiveDecimalWritable result = evaluate(hdLeft, hdRight);
+      return resultOI.getPrimitiveWritableObject(result);
+    }
+
     left = converterLeft.convert(left);
     if (left == null) {
       return null;
@@ -135,9 +148,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
       return evaluate((FloatWritable) left, (FloatWritable) right);
     case DOUBLE:
       return evaluate((DoubleWritable) left, (DoubleWritable) right);
-    case DECIMAL:
-      return resultOI.getPrimitiveWritableObject(
-          evaluate((HiveDecimalWritable) left, (HiveDecimalWritable) right));
     default:
       // Should never happen.
       throw new RuntimeException("Unexpected type in evaluating " + opName + ": " +
@@ -161,15 +171,15 @@ protected LongWritable evaluate(LongWritable left, LongWritable right) {
     return null;
   }
 
-  protected HiveDecimalWritable evaluate(HiveDecimalWritable left, HiveDecimalWritable right) {
+  protected FloatWritable evaluate(FloatWritable left, FloatWritable right) {
     return null;
   }
 
-  protected FloatWritable evaluate(FloatWritable left, FloatWritable right) {
+  protected DoubleWritable evaluate(DoubleWritable left, DoubleWritable right) {
     return null;
   }
 
-  protected DoubleWritable evaluate(DoubleWritable left, DoubleWritable right) {
+  protected HiveDecimalWritable evaluate(HiveDecimal left, HiveDecimal right) {
     return null;
   }
 
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPDivide.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPDivide.java
index b3c4300..36713fa 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPDivide.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPDivide.java
@@ -56,22 +56,35 @@ protected DoubleWritable evaluate(DoubleWritable left, DoubleWritable right) {
   }
 
   @Override
-  protected HiveDecimalWritable evaluate(HiveDecimalWritable left, HiveDecimalWritable right) {
-    HiveDecimal hd1 = left.getHiveDecimal();
-    HiveDecimal hd2 = right.getHiveDecimal();
-    if (hd2.compareTo(HiveDecimal.ZERO) == 0) {
+  protected HiveDecimalWritable evaluate(HiveDecimal left, HiveDecimal right) {
+    if (right.compareTo(HiveDecimal.ZERO) == 0) {
       return null;
     }
-    HiveDecimal dec = hd1.divide(hd2);
+
+    HiveDecimal dec = left.divide(right);
+    if (dec == null) {
+      return null;
+    }
+
     decimalWritable.set(dec);
     return decimalWritable;
   }
 
+  /**
+   * A balanced way to determine the precision/scale of decimal division result. Integer digits and
+   * decimal digits are computed independently. However, when the precision from above reaches above
+   * HiveDecimal.MAX_PRECISION, interger digit and decimal digits are shrunk equally to fit.
+   */
   @Override
   protected DecimalTypeInfo deriveResultDecimalTypeInfo(int prec1, int scale1, int prec2, int scale2) {
-    int scale = Math.min(HiveDecimal.MAX_SCALE, Math.max(6, scale1 + prec2 + 1));
-    int prec = Math.min(HiveDecimal.MAX_PRECISION, prec1 - scale1 + scale2 + scale);
-    return TypeInfoFactory.getDecimalTypeInfo(prec, scale);
+    int intDig = Math.min(HiveDecimal.MAX_SCALE, prec1 - scale1 + scale2);
+    int decDig = Math.min(HiveDecimal.MAX_SCALE, Math.max(6, scale1 + prec2 + 1));
+    int diff = intDig + decDig -  HiveDecimal.MAX_SCALE;
+    if (diff > 0) {
+      decDig -= diff/2 + 1; // Slight negative bias.
+      intDig = HiveDecimal.MAX_SCALE - decDig;
+    }
+    return TypeInfoFactory.getDecimalTypeInfo(intDig + decDig, decDig);
   }
 
 }
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPMinus.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPMinus.java
index b53b267..58b429a 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPMinus.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPMinus.java
@@ -75,8 +75,8 @@ protected DoubleWritable evaluate(DoubleWritable left, DoubleWritable right) {
   }
 
   @Override
-  protected HiveDecimalWritable evaluate(HiveDecimalWritable left, HiveDecimalWritable right) {
-    HiveDecimal dec = left.getHiveDecimal().subtract(right.getHiveDecimal());
+  protected HiveDecimalWritable evaluate(HiveDecimal left, HiveDecimal right) {
+    HiveDecimal dec = left.subtract(right);
     if (dec == null) {
       return null;
     }
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPMod.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPMod.java
index 1efa0a3..cb36929 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPMod.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPMod.java
@@ -93,17 +93,16 @@ protected DoubleWritable evaluate(DoubleWritable left, DoubleWritable right) {
   }
 
   @Override
-  protected HiveDecimalWritable evaluate(HiveDecimalWritable left, HiveDecimalWritable right) {
-    HiveDecimal hd1 = left.getHiveDecimal();
-    HiveDecimal hd2 = right.getHiveDecimal();
-    if (hd2.compareTo(HiveDecimal.ZERO) == 0) {
+  protected HiveDecimalWritable evaluate(HiveDecimal left, HiveDecimal right) {
+    if (right.compareTo(HiveDecimal.ZERO) == 0) {
       return null;
     }
 
-    HiveDecimal dec = hd1.remainder(hd2);
+    HiveDecimal dec = left.remainder(right);
     if (dec == null) {
       return null;
     }
+
     decimalWritable.set(dec);
     return decimalWritable;
   }
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPMultiply.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPMultiply.java
index adfdfa5..15528dc 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPMultiply.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPMultiply.java
@@ -75,11 +75,13 @@ protected DoubleWritable evaluate(DoubleWritable left, DoubleWritable right) {
   }
 
   @Override
-  protected HiveDecimalWritable evaluate(HiveDecimalWritable left, HiveDecimalWritable right) {
-    HiveDecimal dec = left.getHiveDecimal().multiply(right.getHiveDecimal());
+  protected HiveDecimalWritable evaluate(HiveDecimal left, HiveDecimal right) {
+    HiveDecimal dec = left.multiply(right);
+
     if (dec == null) {
       return null;
     }
+
     decimalWritable.set(dec);
     return decimalWritable;
   }
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPPlus.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPPlus.java
index e514d73..8e6874b 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPPlus.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFOPPlus.java
@@ -84,11 +84,13 @@ protected DoubleWritable evaluate(DoubleWritable left, DoubleWritable right) {
   }
 
   @Override
-  protected HiveDecimalWritable evaluate(HiveDecimalWritable left, HiveDecimalWritable right) {
-    HiveDecimal dec = left.getHiveDecimal().add(right.getHiveDecimal());
+  protected HiveDecimalWritable evaluate(HiveDecimal left, HiveDecimal right) {
+    HiveDecimal dec = left.add(right);
+
     if (dec == null) {
       return null;
     }
+
     decimalWritable.set(dec);
     return decimalWritable;
   }
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPosMod.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPosMod.java
index 096ca6d..76ed771 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPosMod.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPosMod.java
@@ -98,16 +98,16 @@ protected DoubleWritable evaluate(DoubleWritable left, DoubleWritable right) {
   }
 
   @Override
-  protected HiveDecimalWritable evaluate(HiveDecimalWritable left, HiveDecimalWritable right) {
-    HiveDecimal hd1 = left.getHiveDecimal();
-    HiveDecimal hd2 = right.getHiveDecimal();
-    if (hd2.compareTo(HiveDecimal.ZERO) == 0) {
+  protected HiveDecimalWritable evaluate(HiveDecimal left, HiveDecimal right) {
+    if (right.compareTo(HiveDecimal.ZERO) == 0) {
       return null;
     }
-    HiveDecimal dec = hd1.remainder(hd2).add(hd2).remainder(hd2);
+
+    HiveDecimal dec = left.remainder(right).add(right).remainder(right);
     if (dec == null) {
       return null;
     }
+
     decimalWritable.set(dec);
     return decimalWritable;
   }
diff --git a/src/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPDivide.java b/src/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPDivide.java
index dcae9e4..738e281 100644
--- a/src/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPDivide.java
+++ b/src/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPDivide.java
@@ -166,6 +166,27 @@ public void testDecimalDivideDecimal() throws HiveException {
   }
 
   @Test
+  public void testDecimalDivideDecimal2() throws HiveException {
+    GenericUDFOPDivide udf = new GenericUDFOPDivide();
+
+    HiveDecimalWritable left = new HiveDecimalWritable(HiveDecimal.create("5"));
+    HiveDecimalWritable right = new HiveDecimalWritable(HiveDecimal.create("25"));
+    ObjectInspector[] inputOIs = {
+        PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getDecimalTypeInfo(1, 0)),
+        PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getDecimalTypeInfo(2, 0))
+    };
+    DeferredObject[] args = {
+        new DeferredJavaObject(left),
+        new DeferredJavaObject(right),
+    };
+
+    PrimitiveObjectInspector oi = (PrimitiveObjectInspector) udf.initialize(inputOIs);
+    Assert.assertEquals(TypeInfoFactory.getDecimalTypeInfo(7, 6), oi.getTypeInfo());
+    HiveDecimalWritable res = (HiveDecimalWritable) udf.evaluate(args);
+    Assert.assertEquals(HiveDecimal.create("0.2"), res.getHiveDecimal());
+  }
+
+  @Test
   public void testDecimalDivideDecimalSameParams() throws HiveException {
     GenericUDFOPDivide udf = new GenericUDFOPDivide();
 
@@ -178,4 +199,31 @@ public void testDecimalDivideDecimalSameParams() throws HiveException {
     Assert.assertEquals(TypeInfoFactory.getDecimalTypeInfo(13, 8), oi.getTypeInfo());
   }
 
+  @Test
+  public void testDecimalDivisionResultType() throws HiveException {
+    testDecimalDivisionResultType(5, 2, 3, 2, 11, 6);
+    testDecimalDivisionResultType(38, 18, 38, 18, 38, 18);
+    testDecimalDivisionResultType(38, 18, 20, 0, 38, 27);
+    testDecimalDivisionResultType(20, 0, 8, 5, 34, 9);
+    testDecimalDivisionResultType(10, 0, 10, 0, 21, 11);
+    testDecimalDivisionResultType(5, 2, 5, 5, 16, 8);
+    testDecimalDivisionResultType(10, 10, 5, 0, 16, 16);
+    testDecimalDivisionResultType(10, 10, 5, 5, 21, 16);
+    testDecimalDivisionResultType(38, 38, 38, 38, 38, 18);
+    testDecimalDivisionResultType(38, 0, 38, 0, 38, 18);
+  }
+
+  private void testDecimalDivisionResultType(int prec1, int scale1, int prec2, int scale2, int prec3, int scale3)
+      throws HiveException {
+    GenericUDFOPDivide udf = new GenericUDFOPDivide();
+
+    ObjectInspector[] inputOIs = {
+        PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getDecimalTypeInfo(prec1, scale1)),
+        PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getDecimalTypeInfo(prec2, scale2))
+    };
+
+    PrimitiveObjectInspector oi = (PrimitiveObjectInspector) udf.initialize(inputOIs);
+    Assert.assertEquals(TypeInfoFactory.getDecimalTypeInfo(prec3, scale3), oi.getTypeInfo());
+  }
+
 }
diff --git a/src/ql/src/test/queries/clientpositive/decimal_precision.q b/src/ql/src/test/queries/clientpositive/decimal_precision.q
index d46d3ce..1b15282 100644
--- a/src/ql/src/test/queries/clientpositive/decimal_precision.q
+++ b/src/ql/src/test/queries/clientpositive/decimal_precision.q
@@ -1,6 +1,6 @@
 DROP TABLE IF EXISTS DECIMAL_PRECISION;
 
-CREATE TABLE DECIMAL_PRECISION(dec decimal(38,18))
+CREATE TABLE DECIMAL_PRECISION(dec decimal(20,10))
 ROW FORMAT DELIMITED
    FIELDS TERMINATED BY ' '
 STORED AS TEXTFILE;
diff --git a/src/ql/src/test/queries/clientpositive/decimal_udf.q b/src/ql/src/test/queries/clientpositive/decimal_udf.q
index 6e8d892..e86659a 100644
--- a/src/ql/src/test/queries/clientpositive/decimal_udf.q
+++ b/src/ql/src/test/queries/clientpositive/decimal_udf.q
@@ -1,6 +1,6 @@
 DROP TABLE IF EXISTS DECIMAL_UDF;
 
-CREATE TABLE DECIMAL_UDF (key decimal(38,18), value int)
+CREATE TABLE DECIMAL_UDF (key decimal(20,10), value int)
 ROW FORMAT DELIMITED
    FIELDS TERMINATED BY ' '
 STORED AS TEXTFILE;
diff --git a/src/ql/src/test/results/clientpositive/decimal_precision.q.out b/src/ql/src/test/results/clientpositive/decimal_precision.q.out
index 2ee3578..530314f 100644
--- a/src/ql/src/test/results/clientpositive/decimal_precision.q.out
+++ b/src/ql/src/test/results/clientpositive/decimal_precision.q.out
@@ -2,12 +2,12 @@ PREHOOK: query: DROP TABLE IF EXISTS DECIMAL_PRECISION
 PREHOOK: type: DROPTABLE
 POSTHOOK: query: DROP TABLE IF EXISTS DECIMAL_PRECISION
 POSTHOOK: type: DROPTABLE
-PREHOOK: query: CREATE TABLE DECIMAL_PRECISION(dec decimal(38,18))
+PREHOOK: query: CREATE TABLE DECIMAL_PRECISION(dec decimal(20,10))
 ROW FORMAT DELIMITED
    FIELDS TERMINATED BY ' '
 STORED AS TEXTFILE
 PREHOOK: type: CREATETABLE
-POSTHOOK: query: CREATE TABLE DECIMAL_PRECISION(dec decimal(38,18))
+POSTHOOK: query: CREATE TABLE DECIMAL_PRECISION(dec decimal(20,10))
 ROW FORMAT DELIMITED
    FIELDS TERMINATED BY ' '
 STORED AS TEXTFILE
@@ -56,52 +56,52 @@ NULL
 NULL
 NULL
 NULL
+NULL
+NULL
+NULL
+NULL
+NULL
+NULL
+NULL
+NULL
+NULL
+NULL
+NULL
+NULL
+NULL
+NULL
+NULL
 0
 0
 0
 0
 0
-0.123456789012345
-0.123456789012345679
-1.234567890123456
-1.234567890123456789
-1.234567890123456789
-12.34567890123456
-12.34567890123456789
-12.34567890123456789
-123.4567890123456
-123.456789012345678901
-123.456789012345678901
-1234.567890123456
-1234.567890123456789012
-1234.567890123456789012
-12345.67890123456
-12345.678901234567890123
+0.123456789
+0.123456789
+1.2345678901
+1.2345678901
+1.2345678901
+12.3456789012
+12.3456789012
+12.3456789012
+123.4567890123
+123.4567890123
+123.4567890123
+1234.5678901235
+1234.5678901235
+1234.5678901235
+12345.6789012346
+12345.6789012346
 123456.7890123456
-123456.789012345678901235
+123456.7890123457
 1234567.890123456
-1234567.890123456789012346
+1234567.8901234568
 12345678.90123456
-12345678.901234567890123457
+12345678.9012345679
 123456789.0123456
-123456789.012345678901234568
+123456789.0123456789
 1234567890.123456
-1234567890.123456789012345679
-12345678901.23456
-12345678901.234567890123456789
-123456789012.3456
-123456789012.34567890123456789
-1234567890123.456
-1234567890123.456789012345678901
-12345678901234.56
-12345678901234.567890123456789012
-123456789012345.6
-123456789012345.678901234567890123
-1234567890123456.789012345678901235
-12345678901234567.890123456789012346
-123456789012345678.901234567890123457
-1234567890123456789.012345678901234568
-12345678901234567890.123456789012345678
+1234567890.123456789
 PREHOOK: query: SELECT dec, dec + 1, dec - 1 FROM DECIMAL_PRECISION ORDER BY dec
 PREHOOK: type: QUERY
 PREHOOK: Input: default@decimal_precision
@@ -139,52 +139,52 @@ NULL	NULL	NULL
 NULL	NULL	NULL
 NULL	NULL	NULL
 NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
 0	1	-1
 0	1	-1
 0	1	-1
 0	1	-1
 0	1	-1
-0.123456789012345	1.123456789012345	-0.876543210987655
-0.123456789012345679	1.123456789012345679	-0.876543210987654321
-1.234567890123456	2.234567890123456	0.234567890123456
-1.234567890123456789	2.234567890123456789	0.234567890123456789
-1.234567890123456789	2.234567890123456789	0.234567890123456789
-12.34567890123456	13.34567890123456	11.34567890123456
-12.34567890123456789	13.34567890123456789	11.34567890123456789
-12.34567890123456789	13.34567890123456789	11.34567890123456789
-123.4567890123456	124.4567890123456	122.4567890123456
-123.456789012345678901	124.456789012345678901	122.456789012345678901
-123.456789012345678901	124.456789012345678901	122.456789012345678901
-1234.567890123456	1235.567890123456	1233.567890123456
-1234.567890123456789012	1235.567890123456789012	1233.567890123456789012
-1234.567890123456789012	1235.567890123456789012	1233.567890123456789012
-12345.67890123456	12346.67890123456	12344.67890123456
-12345.678901234567890123	12346.678901234567890123	12344.678901234567890123
+0.123456789	1.123456789	-0.876543211
+0.123456789	1.123456789	-0.876543211
+1.2345678901	2.2345678901	0.2345678901
+1.2345678901	2.2345678901	0.2345678901
+1.2345678901	2.2345678901	0.2345678901
+12.3456789012	13.3456789012	11.3456789012
+12.3456789012	13.3456789012	11.3456789012
+12.3456789012	13.3456789012	11.3456789012
+123.4567890123	124.4567890123	122.4567890123
+123.4567890123	124.4567890123	122.4567890123
+123.4567890123	124.4567890123	122.4567890123
+1234.5678901235	1235.5678901235	1233.5678901235
+1234.5678901235	1235.5678901235	1233.5678901235
+1234.5678901235	1235.5678901235	1233.5678901235
+12345.6789012346	12346.6789012346	12344.6789012346
+12345.6789012346	12346.6789012346	12344.6789012346
 123456.7890123456	123457.7890123456	123455.7890123456
-123456.789012345678901235	123457.789012345678901235	123455.789012345678901235
+123456.7890123457	123457.7890123457	123455.7890123457
 1234567.890123456	1234568.890123456	1234566.890123456
-1234567.890123456789012346	1234568.890123456789012346	1234566.890123456789012346
+1234567.8901234568	1234568.8901234568	1234566.8901234568
 12345678.90123456	12345679.90123456	12345677.90123456
-12345678.901234567890123457	12345679.901234567890123457	12345677.901234567890123457
+12345678.9012345679	12345679.9012345679	12345677.9012345679
 123456789.0123456	123456790.0123456	123456788.0123456
-123456789.012345678901234568	123456790.012345678901234568	123456788.012345678901234568
+123456789.0123456789	123456790.0123456789	123456788.0123456789
 1234567890.123456	1234567891.123456	1234567889.123456
-1234567890.123456789012345679	1234567891.123456789012345679	1234567889.123456789012345679
-12345678901.23456	12345678902.23456	12345678900.23456
-12345678901.234567890123456789	12345678902.234567890123456789	12345678900.234567890123456789
-123456789012.3456	123456789013.3456	123456789011.3456
-123456789012.34567890123456789	123456789013.34567890123456789	123456789011.34567890123456789
-1234567890123.456	1234567890124.456	1234567890122.456
-1234567890123.456789012345678901	1234567890124.456789012345678901	1234567890122.456789012345678901
-12345678901234.56	12345678901235.56	12345678901233.56
-12345678901234.567890123456789012	12345678901235.567890123456789012	12345678901233.567890123456789012
-123456789012345.6	123456789012346.6	123456789012344.6
-123456789012345.678901234567890123	123456789012346.678901234567890123	123456789012344.678901234567890123
-1234567890123456.789012345678901235	1234567890123457.789012345678901235	1234567890123455.789012345678901235
-12345678901234567.890123456789012346	12345678901234568.890123456789012346	12345678901234566.890123456789012346
-123456789012345678.901234567890123457	123456789012345679.901234567890123457	123456789012345677.901234567890123457
-1234567890123456789.012345678901234568	1234567890123456790.012345678901234568	1234567890123456788.012345678901234568
-12345678901234567890.123456789012345678	12345678901234567891.123456789012345678	12345678901234567889.123456789012345678
+1234567890.123456789	1234567891.123456789	1234567889.123456789
 PREHOOK: query: SELECT dec, dec * 2, dec / 3  FROM DECIMAL_PRECISION ORDER BY dec
 PREHOOK: type: QUERY
 PREHOOK: Input: default@decimal_precision
@@ -222,52 +222,52 @@ NULL	NULL	NULL
 NULL	NULL	NULL
 NULL	NULL	NULL
 NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
+NULL	NULL	NULL
 0	0	0
 0	0	0
 0	0	0
 0	0	0
 0	0	0
-0.123456789012345	0.24691357802469	0.041152263004115
-0.123456789012345679	0.246913578024691358	0.04115226300411522633
-1.234567890123456	2.469135780246912	0.411522630041152
-1.234567890123456789	2.469135780246913578	0.411522630041152263
-1.234567890123456789	2.469135780246913578	0.411522630041152263
-12.34567890123456	24.69135780246912	4.11522630041152
-12.34567890123456789	24.69135780246913578	4.11522630041152263
-12.34567890123456789	24.69135780246913578	4.11522630041152263
-123.4567890123456	246.9135780246912	41.1522630041152
-123.456789012345678901	246.913578024691357802	41.15226300411522630033
-123.456789012345678901	246.913578024691357802	41.15226300411522630033
-1234.567890123456	2469.135780246912	411.522630041152
-1234.567890123456789012	2469.135780246913578024	411.522630041152263004
-1234.567890123456789012	2469.135780246913578024	411.522630041152263004
-12345.67890123456	24691.35780246912	4115.22630041152
-12345.678901234567890123	24691.357802469135780246	4115.226300411522630041
+0.123456789	0.246913578	0.041152263
+0.123456789	0.246913578	0.041152263
+1.2345678901	2.4691357802	0.411522630033
+1.2345678901	2.4691357802	0.411522630033
+1.2345678901	2.4691357802	0.411522630033
+12.3456789012	24.6913578024	4.1152263004
+12.3456789012	24.6913578024	4.1152263004
+12.3456789012	24.6913578024	4.1152263004
+123.4567890123	246.9135780246	41.1522630041
+123.4567890123	246.9135780246	41.1522630041
+123.4567890123	246.9135780246	41.1522630041
+1234.5678901235	2469.135780247	411.522630041167
+1234.5678901235	2469.135780247	411.522630041167
+1234.5678901235	2469.135780247	411.522630041167
+12345.6789012346	24691.3578024692	4115.226300411533
+12345.6789012346	24691.3578024692	4115.226300411533
 123456.7890123456	246913.5780246912	41152.2630041152
-123456.789012345678901235	246913.57802469135780247	41152.26300411522630041167
+123456.7890123457	246913.5780246914	41152.263004115233
 1234567.890123456	2469135.780246912	411522.630041152
-1234567.890123456789012346	2469135.780246913578024692	411522.63004115226300411533
+1234567.8901234568	2469135.7802469136	411522.630041152267
 12345678.90123456	24691357.80246912	4115226.30041152
-12345678.901234567890123457	24691357.802469135780246914	4115226.30041152263004115233
+12345678.9012345679	24691357.8024691358	4115226.300411522633
 123456789.0123456	246913578.0246912	41152263.0041152
-123456789.012345678901234568	246913578.024691357802469136	41152263.00411522630041152267
+123456789.0123456789	246913578.0246913578	41152263.0041152263
 1234567890.123456	2469135780.246912	411522630.041152
-1234567890.123456789012345679	2469135780.246913578024691358	411522630.04115226300411522633
-12345678901.23456	24691357802.46912	4115226300.41152
-12345678901.234567890123456789	24691357802.469135780246913578	4115226300.411522630041152263
-123456789012.3456	246913578024.6912	41152263004.1152
-123456789012.34567890123456789	246913578024.69135780246913578	41152263004.11522630041152263
-1234567890123.456	2469135780246.912	411522630041.152
-1234567890123.456789012345678901	2469135780246.913578024691357802	411522630041.15226300411522630033
-12345678901234.56	24691357802469.12	4115226300411.52
-12345678901234.567890123456789012	24691357802469.135780246913578024	4115226300411.522630041152263004
-123456789012345.6	246913578024691.2	41152263004115.2
-123456789012345.678901234567890123	246913578024691.357802469135780246	41152263004115.226300411522630041
-1234567890123456.789012345678901235	2469135780246913.57802469135780247	411522630041152.26300411522630041167
-12345678901234567.890123456789012346	24691357802469135.780246913578024692	4115226300411522.63004115226300411533
-123456789012345678.901234567890123457	246913578024691357.802469135780246914	41152263004115226.30041152263004115233
-1234567890123456789.012345678901234568	2469135780246913578.024691357802469136	NULL
-12345678901234567890.123456789012345678	24691357802469135780.246913578024691356	NULL
+1234567890.123456789	2469135780.246913578	411522630.041152263
 PREHOOK: query: SELECT dec, dec / 9 FROM DECIMAL_PRECISION ORDER BY dec
 PREHOOK: type: QUERY
 PREHOOK: Input: default@decimal_precision
@@ -305,52 +305,52 @@ NULL	NULL
 NULL	NULL
 NULL	NULL
 NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
 0	0
 0	0
 0	0
 0	0
 0	0
-0.123456789012345	0.01371742100137166667
-0.123456789012345679	0.01371742100137174211
-1.234567890123456	0.13717421001371733333
-1.234567890123456789	0.137174210013717421
-1.234567890123456789	0.137174210013717421
-12.34567890123456	1.37174210013717333333
-12.34567890123456789	1.37174210013717421
-12.34567890123456789	1.37174210013717421
-123.4567890123456	13.71742100137173333333
-123.456789012345678901	13.71742100137174210011
-123.456789012345678901	13.71742100137174210011
-1234.567890123456	137.17421001371733333333
-1234.567890123456789012	137.17421001371742100133
-1234.567890123456789012	137.17421001371742100133
-12345.67890123456	1371.74210013717333333333
-12345.678901234567890123	1371.74210013717421001367
-123456.7890123456	13717.42100137173333333333
-123456.789012345678901235	13717.42100137174210013722
-1234567.890123456	137174.21001371733333333333
-1234567.890123456789012346	137174.21001371742100137178
-12345678.90123456	1371742.10013717333333333333
-12345678.901234567890123457	1371742.10013717421001371744
-123456789.0123456	13717421.00137173333333333333
-123456789.012345678901234568	13717421.00137174210013717422
-1234567890.123456	137174210.01371733333333333333
-1234567890.123456789012345679	137174210.01371742100137174211
-12345678901.23456	1371742100.13717333333333333333
-12345678901.234567890123456789	1371742100.137174210013717421
-123456789012.3456	13717421001.37173333333333333333
-123456789012.34567890123456789	13717421001.37174210013717421
-1234567890123.456	137174210013.71733333333333333333
-1234567890123.456789012345678901	137174210013.71742100137174210011
-12345678901234.56	1371742100137.17333333333333333333
-12345678901234.567890123456789012	1371742100137.17421001371742100133
-123456789012345.6	13717421001371.73333333333333333333
-123456789012345.678901234567890123	13717421001371.74210013717421001367
-1234567890123456.789012345678901235	137174210013717.42100137174210013722
-12345678901234567.890123456789012346	1371742100137174.21001371742100137178
-123456789012345678.901234567890123457	13717421001371742.10013717421001371744
-1234567890123456789.012345678901234568	NULL
-12345678901234567890.123456789012345678	NULL
+0.123456789	0.013717421
+0.123456789	0.013717421
+1.2345678901	0.137174210011
+1.2345678901	0.137174210011
+1.2345678901	0.137174210011
+12.3456789012	1.371742100133
+12.3456789012	1.371742100133
+12.3456789012	1.371742100133
+123.4567890123	13.717421001367
+123.4567890123	13.717421001367
+123.4567890123	13.717421001367
+1234.5678901235	137.174210013722
+1234.5678901235	137.174210013722
+1234.5678901235	137.174210013722
+12345.6789012346	1371.742100137178
+12345.6789012346	1371.742100137178
+123456.7890123456	13717.421001371733
+123456.7890123457	13717.421001371744
+1234567.890123456	137174.210013717333
+1234567.8901234568	137174.210013717422
+12345678.90123456	1371742.100137173333
+12345678.9012345679	1371742.100137174211
+123456789.0123456	13717421.001371733333
+123456789.0123456789	13717421.0013717421
+1234567890.123456	137174210.013717333333
+1234567890.123456789	137174210.013717421
 PREHOOK: query: SELECT dec, dec / 27 FROM DECIMAL_PRECISION ORDER BY dec
 PREHOOK: type: QUERY
 PREHOOK: Input: default@decimal_precision
@@ -388,52 +388,52 @@ NULL	NULL
 NULL	NULL
 NULL	NULL
 NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
 0	0
 0	0
 0	0
 0	0
 0	0
-0.123456789012345	0.004572473667123888889
-0.123456789012345679	0.004572473667123914037
-1.234567890123456	0.045724736671239111111
-1.234567890123456789	0.045724736671239140333
-1.234567890123456789	0.045724736671239140333
-12.34567890123456	0.457247366712391111111
-12.34567890123456789	0.457247366712391403333
-12.34567890123456789	0.457247366712391403333
-123.4567890123456	4.572473667123911111111
-123.456789012345678901	4.57247366712391403337
-123.456789012345678901	4.57247366712391403337
-1234.567890123456	45.724736671239111111111
-1234.567890123456789012	45.724736671239140333778
-1234.567890123456789012	45.724736671239140333778
-12345.67890123456	457.247366712391111111111
-12345.678901234567890123	457.247366712391403337889
-123456.7890123456	4572.473667123911111111111
-123456.789012345678901235	4572.473667123914033379074
-1234567.890123456	45724.736671239111111111111
-1234567.890123456789012346	45724.736671239140333790593
-12345678.90123456	457247.366712391111111111111
-12345678.901234567890123457	457247.366712391403337905815
-123456789.0123456	4572473.667123911111111111111
-123456789.012345678901234568	4572473.667123914033379058074
-1234567890.123456	45724736.671239111111111111111
-1234567890.123456789012345679	45724736.671239140333790580704
-12345678901.23456	457247366.712391111111111111111
-12345678901.234567890123456789	457247366.712391403337905807
-123456789012.3456	4572473667.123911111111111111111
-123456789012.34567890123456789	4572473667.12391403337905807
-1234567890123.456	45724736671.239111111111111111111
-1234567890123.456789012345678901	45724736671.239140333790580700037
-12345678901234.56	457247366712.391111111111111111111
-12345678901234.567890123456789012	457247366712.391403337905807000444
-123456789012345.6	4572473667123.911111111111111111111
-123456789012345.678901234567890123	4572473667123.914033379058070004556
-1234567890123456.789012345678901235	45724736671239.140333790580700045741
-12345678901234567.890123456789012346	457247366712391.403337905807000457259
-123456789012345678.901234567890123457	NULL
-1234567890123456789.012345678901234568	NULL
-12345678901234567890.123456789012345678	NULL
+0.123456789	0.0045724736667
+0.123456789	0.0045724736667
+1.2345678901	0.0457247366704
+1.2345678901	0.0457247366704
+1.2345678901	0.0457247366704
+12.3456789012	0.4572473667111
+12.3456789012	0.4572473667111
+12.3456789012	0.4572473667111
+123.4567890123	4.5724736671222
+123.4567890123	4.5724736671222
+123.4567890123	4.5724736671222
+1234.5678901235	45.7247366712407
+1234.5678901235	45.7247366712407
+1234.5678901235	45.7247366712407
+12345.6789012346	457.2473667123926
+12345.6789012346	457.2473667123926
+123456.7890123456	4572.4736671239111
+123456.7890123457	4572.4736671239148
+1234567.890123456	45724.7366712391111
+1234567.8901234568	45724.7366712391407
+12345678.90123456	457247.3667123911111
+12345678.9012345679	457247.3667123914037
+123456789.0123456	4572473.6671239111111
+123456789.0123456789	4572473.6671239140333
+1234567890.123456	45724736.6712391111111
+1234567890.123456789	45724736.6712391403333
 PREHOOK: query: SELECT dec, dec * dec FROM DECIMAL_PRECISION ORDER BY dec
 PREHOOK: type: QUERY
 PREHOOK: Input: default@decimal_precision
@@ -471,52 +471,52 @@ NULL	NULL
 NULL	NULL
 NULL	NULL
 NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
+NULL	NULL
 0	0
 0	0
 0	0
 0	0
 0	0
-0.123456789012345	0.015241578753238669120562399025
-0.123456789012345679	0.015241578753238836774881877789971041
-1.234567890123456	1.524157875323881726870921383936
-1.234567890123456789	1.524157875323883675019051998750190521
-1.234567890123456789	1.524157875323883675019051998750190521
-12.34567890123456	NULL
-12.34567890123456789	NULL
-12.34567890123456789	NULL
-123.4567890123456	NULL
-123.456789012345678901	NULL
-123.456789012345678901	NULL
-1234.567890123456	NULL
-1234.567890123456789012	NULL
-1234.567890123456789012	NULL
-12345.67890123456	NULL
-12345.678901234567890123	NULL
-123456.7890123456	NULL
-123456.789012345678901235	NULL
-1234567.890123456	NULL
-1234567.890123456789012346	NULL
-12345678.90123456	NULL
-12345678.901234567890123457	NULL
-123456789.0123456	NULL
-123456789.012345678901234568	NULL
+0.123456789	0.015241578750190521
+0.123456789	0.015241578750190521
+1.2345678901	1.52415787526596567801
+1.2345678901	1.52415787526596567801
+1.2345678901	1.52415787526596567801
+12.3456789012	152.41578753153483936144
+12.3456789012	152.41578753153483936144
+12.3456789012	152.41578753153483936144
+123.4567890123	15241.57875322755800955129
+123.4567890123	15241.57875322755800955129
+123.4567890123	15241.57875322755800955129
+1234.5678901235	1524157.87532399036884525225
+1234.5678901235	1524157.87532399036884525225
+1234.5678901235	1524157.87532399036884525225
+12345.6789012346	152415787.53238916034140423716
+12345.6789012346	152415787.53238916034140423716
+123456.7890123456	15241578753.23881726870921383936
+123456.7890123457	15241578753.23884196006701630849
+1234567.890123456	1524157875323.881726870921383936
+1234567.8901234568	1524157875323.88370217954558146624
+12345678.90123456	152415787532388.1726870921383936
+12345678.9012345679	152415787532388.36774881877789971041
+123456789.0123456	15241578753238817.26870921383936
+123456789.0123456789	15241578753238836.75019051998750190521
 1234567890.123456	NULL
-1234567890.123456789012345679	NULL
-12345678901.23456	NULL
-12345678901.234567890123456789	NULL
-123456789012.3456	NULL
-123456789012.34567890123456789	NULL
-1234567890123.456	NULL
-1234567890123.456789012345678901	NULL
-12345678901234.56	NULL
-12345678901234.567890123456789012	NULL
-123456789012345.6	NULL
-123456789012345.678901234567890123	NULL
-1234567890123456.789012345678901235	NULL
-12345678901234567.890123456789012346	NULL
-123456789012345678.901234567890123457	NULL
-1234567890123456789.012345678901234568	NULL
-12345678901234567890.123456789012345678	NULL
+1234567890.123456789	NULL
 PREHOOK: query: SELECT avg(dec), sum(dec) FROM DECIMAL_PRECISION
 PREHOOK: type: QUERY
 PREHOOK: Input: default@decimal_precision
@@ -525,7 +525,7 @@ POSTHOOK: query: SELECT avg(dec), sum(dec) FROM DECIMAL_PRECISION
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@decimal_precision
 #### A masked pattern was here ####
-298207786425690373.674956491924017375	13717558175581757189.04799862850479927
+88499534.575865762206451613	2743485571.8518386284
 PREHOOK: query: SELECT dec * cast('12345678901234567890.12345678' as decimal(38,18)) FROM DECIMAL_PRECISION LIMIT 1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@decimal_precision
diff --git a/src/ql/src/test/results/clientpositive/decimal_udf.q.out b/src/ql/src/test/results/clientpositive/decimal_udf.q.out
index 16c4d28..b730fb3 100644
--- a/src/ql/src/test/results/clientpositive/decimal_udf.q.out
+++ b/src/ql/src/test/results/clientpositive/decimal_udf.q.out
@@ -2,12 +2,12 @@ PREHOOK: query: DROP TABLE IF EXISTS DECIMAL_UDF
 PREHOOK: type: DROPTABLE
 POSTHOOK: query: DROP TABLE IF EXISTS DECIMAL_UDF
 POSTHOOK: type: DROPTABLE
-PREHOOK: query: CREATE TABLE DECIMAL_UDF (key decimal(38,18), value int)
+PREHOOK: query: CREATE TABLE DECIMAL_UDF (key decimal(20,10), value int)
 ROW FORMAT DELIMITED
    FIELDS TERMINATED BY ' '
 STORED AS TEXTFILE
 PREHOOK: type: CREATETABLE
-POSTHOOK: query: CREATE TABLE DECIMAL_UDF (key decimal(38,18), value int)
+POSTHOOK: query: CREATE TABLE DECIMAL_UDF (key decimal(20,10), value int)
 ROW FORMAT DELIMITED
    FIELDS TERMINATED BY ' '
 STORED AS TEXTFILE
@@ -42,7 +42,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: (key + key)
-                    type: decimal(38,18)
+                    type: decimal(21,10)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -124,7 +124,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: (key + value)
-                    type: decimal(38,18)
+                    type: decimal(21,10)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -206,7 +206,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: (key + (value / 2))
-                    type: decimal(38,18)
+                    type: decimal(21,10)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -372,7 +372,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: (key - key)
-                    type: decimal(38,18)
+                    type: decimal(21,10)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -454,7 +454,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: (key - value)
-                    type: decimal(38,18)
+                    type: decimal(21,10)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -536,7 +536,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: (key - (value / 2))
-                    type: decimal(38,18)
+                    type: decimal(21,10)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -702,7 +702,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: (key * key)
-                    type: decimal(38,36)
+                    type: decimal(38,20)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -725,17 +725,17 @@ POSTHOOK: query: SELECT key * key FROM DECIMAL_UDF
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@decimal_udf
 #### A masked pattern was here ####
-NULL
+19360000
 NULL
 0
 0
-NULL
-NULL
+10000
+100
 1
 0.01
 0.0001
-NULL
-NULL
+40000
+400
 4
 0
 0.04
@@ -754,9 +754,9 @@ NULL
 1.258884
 1.2544
 1.258884
-NULL
-NULL
-NULL
+15376
+15675.04
+1576255.1401
 9.8596
 9.8596
 9.8596
@@ -784,7 +784,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: (key * value)
-                    type: decimal(38,18)
+                    type: decimal(31,10)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -866,7 +866,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: (key * (value / 2))
-                    type: decimal(38,24)
+                    type: decimal(37,16)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -925,8 +925,8 @@ NULL
 4.71
 6.28
 0.5
-NULL
-NULL
+762078937585733943.750952605
+762078937585733938.1953971
 PREHOOK: query: EXPLAIN SELECT key * '2.0' FROM DECIMAL_UDF
 PREHOOK: type: QUERY
 POSTHOOK: query: EXPLAIN SELECT key * '2.0' FROM DECIMAL_UDF
@@ -1032,7 +1032,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: (key / 0)
-                    type: decimal(38,20)
+                    type: decimal(22,12)
               outputColumnNames: _col0
               Limit
                 File Output Operator
@@ -1128,7 +1128,7 @@ STAGE PLANS:
               Select Operator
                 expressions:
                       expr: (key / key)
-                      type: decimal(38,38)
+                      type: decimal(38,24)
                 outputColumnNames: _col0
                 File Output Operator
                   compressed: false
@@ -1151,40 +1151,40 @@ POSTHOOK: query: SELECT key / key FROM DECIMAL_UDF WHERE key is not null and key
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@decimal_udf
 #### A masked pattern was here ####
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
 PREHOOK: query: EXPLAIN SELECT key / value FROM DECIMAL_UDF WHERE value is not null and value <> 0
 PREHOOK: type: QUERY
 POSTHOOK: query: EXPLAIN SELECT key / value FROM DECIMAL_UDF WHERE value is not null and value <> 0
@@ -1210,7 +1210,7 @@ STAGE PLANS:
               Select Operator
                 expressions:
                       expr: (key / value)
-                      type: decimal(38,29)
+                      type: decimal(31,21)
                 outputColumnNames: _col0
                 File Output Operator
                   compressed: false
@@ -1242,7 +1242,7 @@ POSTHOOK: Input: default@decimal_udf
 1
 1
 1
-1.04666666666666666666666666667
+1.046666666666666666667
 1.12
 1.12
 0.102
@@ -1250,13 +1250,13 @@ POSTHOOK: Input: default@decimal_udf
 1.122
 1
 1.0016
-1.00039043824701195219123505976
-1.04666666666666666666666666667
-1.04666666666666666666666666667
+1.000390438247011952191
+1.046666666666666666667
+1.046666666666666666667
 0.785
 1
-NULL
-NULL
+1.0000000001
+1.00000000009999999271
 PREHOOK: query: EXPLAIN SELECT key / (value/2) FROM DECIMAL_UDF  WHERE value is not null and value <> 0
 PREHOOK: type: QUERY
 POSTHOOK: query: EXPLAIN SELECT key / (value/2) FROM DECIMAL_UDF  WHERE value is not null and value <> 0
@@ -1282,7 +1282,7 @@ STAGE PLANS:
               Select Operator
                 expressions:
                       expr: (key / (value / 2))
-                      type: decimal(38,35)
+                      type: decimal(38,24)
                 outputColumnNames: _col0
                 File Output Operator
                   compressed: false
@@ -1305,7 +1305,7 @@ POSTHOOK: query: SELECT key / (value/2) FROM DECIMAL_UDF  WHERE value is not nul
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@decimal_udf
 #### A masked pattern was here ####
-NULL
+-2
 2
 2
 2
@@ -1314,7 +1314,7 @@ NULL
 2
 2
 2
-2.09333333333333333333333333333333333
+2.093333333333333333333333
 2.24
 2.24
 0.204
@@ -1322,13 +1322,13 @@ NULL
 2.244
 2
 2.0032
-NULL
-2.09333333333333333333333333333333333
-2.09333333333333333333333333333333333
+2.00078087649402390438247
+2.093333333333333333333333
+2.093333333333333333333333
 1.57
 2
-NULL
-NULL
+2.0000000002
+2.00000000019999998542
 PREHOOK: query: EXPLAIN SELECT key / '2.0' FROM DECIMAL_UDF
 PREHOOK: type: QUERY
 POSTHOOK: query: EXPLAIN SELECT key / '2.0' FROM DECIMAL_UDF
@@ -1521,7 +1521,7 @@ STAGE PLANS:
                     expr: value
                     type: int
                     expr: key
-                    type: decimal(38,18)
+                    type: decimal(20,10)
               outputColumnNames: value, key
               Group By Operator
                 aggregations:
@@ -1567,7 +1567,7 @@ STAGE PLANS:
                   expr: _col0
                   type: int
                   expr: (_col1 / _col2)
-                  type: decimal(38,38)
+                  type: decimal(38,27)
                   expr: _col3
                   type: decimal(38,18)
             outputColumnNames: _col0, _col1, _col2
@@ -1594,7 +1594,7 @@ STAGE PLANS:
                     expr: _col0
                     type: int
                     expr: _col1
-                    type: decimal(38,38)
+                    type: decimal(38,27)
                     expr: _col2
                     type: decimal(38,18)
       Reduce Operator Tree:
@@ -1620,23 +1620,23 @@ POSTHOOK: query: SELECT value, sum(key) / count(key), avg(key) FROM DECIMAL_UDF
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@decimal_udf
 #### A masked pattern was here ####
--1234567890	NULL	-1234567890.123456789
--1255	NULL	-1255.49
--11	NULL	-1.122
--1	NULL	-1.12
-0	NULL	0.025384615384615385
-1	NULL	1.0484
-2	NULL	2
-3	NULL	3.14
-4	NULL	3.14
-10	NULL	10
-20	NULL	20
-100	NULL	100
-124	NULL	124
-125	NULL	125.2
-200	NULL	200
-4400	NULL	-4400
-1234567890	NULL	1234567890.12345678
+-1234567890	-1234567890.123456789	-1234567890.123456789
+-1255	-1255.49	-1255.49
+-11	-1.122	-1.122
+-1	-1.12	-1.12
+0	0.025384615384615384615384615	0.025384615384615385
+1	1.0484	1.0484
+2	2	2
+3	3.14	3.14
+4	3.14	3.14
+10	10	10
+20	20	20
+100	100	100
+124	124	124
+125	125.2	125.2
+200	200	200
+4400	-4400	-4400
+1234567890	1234567890.12345678	1234567890.12345678
 PREHOOK: query: -- negative
 EXPLAIN SELECT -key FROM DECIMAL_UDF
 PREHOOK: type: QUERY
@@ -1660,7 +1660,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: (- key)
-                    type: decimal(38,18)
+                    type: decimal(20,10)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -1744,7 +1744,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: key
-                    type: decimal(38,18)
+                    type: decimal(20,10)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -1828,7 +1828,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: ceil(key)
-                    type: decimal(21,0)
+                    type: decimal(11,0)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -1912,7 +1912,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: floor(key)
-                    type: decimal(21,0)
+                    type: decimal(11,0)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -1996,7 +1996,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: round(key, 2)
-                    type: decimal(23,2)
+                    type: decimal(13,2)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -2164,7 +2164,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: ((key + 1) % (key / 2))
-                    type: decimal(38,20)
+                    type: decimal(22,12)
               outputColumnNames: _col0
               File Output Operator
                 compressed: false
@@ -2250,7 +2250,7 @@ STAGE PLANS:
                     expr: value
                     type: int
                     expr: key
-                    type: decimal(38,18)
+                    type: decimal(20,10)
               outputColumnNames: value, key
               Group By Operator
                 aggregations:
@@ -2359,7 +2359,7 @@ STAGE PLANS:
                     expr: value
                     type: int
                     expr: key
-                    type: decimal(38,18)
+                    type: decimal(20,10)
               outputColumnNames: value, key
               Group By Operator
                 aggregations:
@@ -2466,7 +2466,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: key
-                    type: decimal(38,18)
+                    type: decimal(20,10)
               outputColumnNames: key
               Group By Operator
                 aggregations:
@@ -2537,7 +2537,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: key
-                    type: decimal(38,18)
+                    type: decimal(20,10)
               outputColumnNames: key
               Group By Operator
                 aggregations:
@@ -2550,7 +2550,7 @@ STAGE PLANS:
                   tag: -1
                   value expressions:
                         expr: _col0
-                        type: decimal(38,18)
+                        type: decimal(20,10)
       Reduce Operator Tree:
         Group By Operator
           aggregations:
@@ -2561,7 +2561,7 @@ STAGE PLANS:
           Select Operator
             expressions:
                   expr: _col0
-                  type: decimal(38,18)
+                  type: decimal(20,10)
             outputColumnNames: _col0
             File Output Operator
               compressed: false
@@ -2608,7 +2608,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: key
-                    type: decimal(38,18)
+                    type: decimal(20,10)
               outputColumnNames: key
               Group By Operator
                 aggregations:
@@ -2621,7 +2621,7 @@ STAGE PLANS:
                   tag: -1
                   value expressions:
                         expr: _col0
-                        type: decimal(38,18)
+                        type: decimal(20,10)
       Reduce Operator Tree:
         Group By Operator
           aggregations:
@@ -2632,7 +2632,7 @@ STAGE PLANS:
           Select Operator
             expressions:
                   expr: _col0
-                  type: decimal(38,18)
+                  type: decimal(20,10)
             outputColumnNames: _col0
             File Output Operator
               compressed: false
@@ -2679,7 +2679,7 @@ STAGE PLANS:
             Select Operator
               expressions:
                     expr: key
-                    type: decimal(38,18)
+                    type: decimal(20,10)
               outputColumnNames: key
               Group By Operator
                 aggregations:
diff --git a/src/ql/src/test/results/clientpositive/ql_rewrite_gbtoidx.q.out b/src/ql/src/test/results/clientpositive/ql_rewrite_gbtoidx.q.out
index 83787ee..41fea1a 100644
--- a/src/ql/src/test/results/clientpositive/ql_rewrite_gbtoidx.q.out
+++ b/src/ql/src/test/results/clientpositive/ql_rewrite_gbtoidx.q.out
@@ -1022,7 +1022,7 @@ STAGE PLANS:
                   expr: _col4
                   type: int
                   expr: ((_col5 - _col2) / _col2)
-                  type: decimal(38,20)
+                  type: decimal(38,19)
             outputColumnNames: _col0, _col1, _col2
             File Output Operator
               compressed: false
-- 
1.7.0.4

