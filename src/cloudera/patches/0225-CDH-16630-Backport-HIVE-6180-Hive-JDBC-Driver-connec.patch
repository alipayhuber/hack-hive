From 5578e832d066558712d3438d31cf5006810ab442 Mon Sep 17 00:00:00 2001
From: Prasad Mujumdar <prasadm@cloudera.com>
Date: Tue, 14 Jan 2014 11:50:50 -0800
Subject: [PATCH 225/375] CDH-16630: Backport HIVE-6180: Hive JDBC Driver connection fail when no default database passed in the connection string

---
 .../org/apache/hive/jdbc/TestJdbcWithMiniHS2.java  |   41 ++++++++++++++++++++
 .../java/org/apache/hive/jdbc/HiveConnection.java  |    6 ++-
 jdbc/src/java/org/apache/hive/jdbc/Utils.java      |   12 +++--
 3 files changed, 52 insertions(+), 7 deletions(-)

diff --git a/src/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java b/src/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java
index 912c6c3..b271d65 100644
--- a/src/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java
+++ b/src/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java
@@ -163,5 +163,46 @@ public void testURIDatabaseName() throws Exception{
      stmt.execute(" drop table if exists table_in_non_default_schema");
      expected = stmt.execute("DROP DATABASE "+ dbName);
      stmt.close();
+     
+     hs2Conn  = DriverManager.getConnection(jdbcUri+"default",System.getProperty("user.name"),"bar");
+     stmt = hs2Conn .createStatement();
+     res = stmt.executeQuery("show tables");
+     testTableExists = false;
+     while (res.next()) {
+       assertNotNull("table name is null in result set", res.getString(1));
+       if (tableInNonDefaultSchema.equalsIgnoreCase(res.getString(1))) {
+         testTableExists = true;
+        }
+     }
+
+     // test URI with no dbName
+     hs2Conn  = DriverManager.getConnection(jdbcUri, System.getProperty("user.name"),"bar");
+     verifyCurrentDB("default", hs2Conn);
+     hs2Conn.close();
+
+     hs2Conn  = DriverManager.getConnection(jdbcUri + ";", System.getProperty("user.name"),"bar");
+     verifyCurrentDB("default", hs2Conn);
+     hs2Conn.close();
+
+     hs2Conn  = DriverManager.getConnection(jdbcUri + ";/foo=bar;foo1=bar1", System.getProperty("user.name"),"bar");
+     verifyCurrentDB("default", hs2Conn);
+     hs2Conn.close();
+     }
+
+   /**
+    * verify that the current db is the one expected. first create table as <db>.tab and then 
+    * describe that table to check if <db> is the current database
+    * @param expectedDbName
+    * @param hs2Conn
+    * @throws Exception
+    */
+   private void verifyCurrentDB(String expectedDbName, Connection hs2Conn) throws Exception {
+     String verifyTab = "miniHS2DbVerificationTable";
+     Statement stmt = hs2Conn.createStatement();
+     stmt.execute("DROP TABLE IF EXISTS " + expectedDbName + "." + verifyTab);
+     stmt.execute("CREATE TABLE " + expectedDbName + "." + verifyTab + "(id INT)");
+     stmt.execute("DESCRIBE " + verifyTab);
+     stmt.execute("DROP TABLE IF EXISTS " + expectedDbName + "." + verifyTab);
+     stmt.close();
    }
 }
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
index ade7166..db73cf3 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
@@ -357,8 +357,10 @@ private void configureConnection(String dbName) throws SQLException {
       for (Entry<String, String> hiveVar : hiveVarMap.entrySet()) {
         stmt.execute("set hivevar:" + hiveVar.getKey() + "=" + hiveVar.getValue());
       }
-      if(dbName!=null)
-        stmt.execute("use "+dbName);
+      // if the client is setting a non-default db, then switch the database
+      if (!Utils.DEFAULT_DATABASE.equalsIgnoreCase(dbName)) {
+        stmt.execute("use " + dbName);
+      }
       stmt.close();
     }
   }
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java b/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java
index 7d7d015..d2d09c6 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java
@@ -229,17 +229,16 @@ public static JdbcConnectionParams parseURL(String uri) throws IllegalArgumentEx
 
     // dbname and session settings
     String sessVars = jdbcURI.getPath();
-    if ((sessVars == null) || sessVars.isEmpty()) {
-      connParams.setDbName(DEFAULT_DATABASE);
-    } else {
+    if ((sessVars != null) && !sessVars.isEmpty()) {
+      String dbName = "";
       // removing leading '/' returned by getPath()
       sessVars = sessVars.substring(1);
       if (!sessVars.contains(";")) {
         // only dbname is provided
-        connParams.setDbName(sessVars);
+        dbName = sessVars;
       } else {
         // we have dbname followed by session parameters
-        connParams.setDbName(sessVars.substring(0, sessVars.indexOf(';')));
+        dbName = sessVars.substring(0, sessVars.indexOf(';'));
         sessVars = sessVars.substring(sessVars.indexOf(';')+1);
         if (sessVars != null) {
           Matcher sessMatcher = pattern.matcher(sessVars);
@@ -250,6 +249,9 @@ public static JdbcConnectionParams parseURL(String uri) throws IllegalArgumentEx
           }
         }
       }
+      if (!dbName.isEmpty()) {
+        connParams.setDbName(dbName);
+      }
     }
 
     // parse hive conf settings
-- 
1.7.0.4

