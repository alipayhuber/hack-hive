From 3e1a73eb1028a611ff7bd89e802bcf1c1bb4f977 Mon Sep 17 00:00:00 2001
From: Thejas Madhavan Nair <thejas@apache.org>
Date: Fri, 25 Oct 2013 22:50:46 +0000
Subject: [PATCH 122/375] HIVE-5440: HiveServer2 doesn't apply SQL operation's config property (Prasad Mujumdar via Thejas Nair)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1535889 13f79535-47bb-0310-9956-ffa450edef68
---
 .../cli/operation/ExecuteStatementOperation.java   |   12 +++-
 .../hive/service/cli/operation/SQLOperation.java   |   38 ++++++++++--
 .../apache/hive/service/cli/CLIServiceTest.java    |   67 ++++++++++++++++++++
 3 files changed, 111 insertions(+), 6 deletions(-)

diff --git a/src/service/src/java/org/apache/hive/service/cli/operation/ExecuteStatementOperation.java b/src/service/src/java/org/apache/hive/service/cli/operation/ExecuteStatementOperation.java
index da236f5..d00db1c 100644
--- a/src/service/src/java/org/apache/hive/service/cli/operation/ExecuteStatementOperation.java
+++ b/src/service/src/java/org/apache/hive/service/cli/operation/ExecuteStatementOperation.java
@@ -40,7 +40,7 @@
   public ExecuteStatementOperation(HiveSession parentSession, String statement, Map<String, String> confOverlay) {
     super(parentSession, OperationType.EXECUTE_STATEMENT);
     this.statement = statement;
-    this.confOverlay = confOverlay;
+    setConfOverlay(confOverlay);
   }
 
   public String getStatement() {
@@ -63,4 +63,14 @@ public static ExecuteStatementOperation newExecuteStatementOperation(
     }
     return new HiveCommandOperation(parentSession, statement, processor, confOverlay);
   }
+
+  protected Map<String, String> getConfOverlay() {
+    return confOverlay;
+  }
+
+  protected void setConfOverlay(Map<String, String> confOverlay) {
+    if (confOverlay != null) {
+      this.confOverlay = confOverlay;
+    }
+  }
 }
diff --git a/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java b/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java
index 492eaf6..cfb2d1b 100644
--- a/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java
+++ b/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java
@@ -80,7 +80,7 @@ public SQLOperation(HiveSession parentSession, String statement, Map<String,
   public void prepare() throws HiveSQLException {
   }
 
-  private void runInternal() throws HiveSQLException {
+  private void runInternal(HiveConf sqlOperationConf) throws HiveSQLException {
     setState(OperationState.RUNNING);
     String statement_trimmed = statement.trim();
     String[] tokens = statement_trimmed.split("\\s");
@@ -91,13 +91,13 @@ private void runInternal() throws HiveSQLException {
     String SQLState = null;
 
     try {
-      driver = new Driver(getParentSession().getHiveConf(), getParentSession().getUserName(), getParentSession().getIpAddress());
+      driver = new Driver(sqlOperationConf, getParentSession().getUserName(),  getParentSession().getIpAddress());
       // In Hive server mode, we are not able to retry in the FetchTask
       // case, when calling fetch queries since execute() has returned.
       // For now, we disable the test attempts.
       driver.setTryCount(Integer.MAX_VALUE);
 
-      String subStatement = new VariableSubstitution().substitute(getParentSession().getHiveConf(), statement);
+      String subStatement = new VariableSubstitution().substitute(sqlOperationConf, statement);
 
       response = driver.run(subStatement);
       if (0 != response.getResponseCode()) {
@@ -143,7 +143,7 @@ private void runInternal() throws HiveSQLException {
   public void run() throws HiveSQLException {
     setState(OperationState.PENDING);
     if (!shouldRunAsync()) {
-      runInternal();
+      runInternal(getConfigForOperation());
     } else {
       Runnable backgroundOperation = new Runnable() {
         SessionState ss = SessionState.get();
@@ -151,7 +151,7 @@ public void run() throws HiveSQLException {
         public void run() {
           SessionState.start(ss);
           try {
-            runInternal();
+            runInternal(getConfigForOperation());
           } catch (HiveSQLException e) {
             LOG.error("Error: ", e);
             // TODO: Return a more detailed error to the client,
@@ -318,4 +318,32 @@ private boolean shouldRunAsync() {
     return runAsync;
   }
 
+  /**
+   * If there are query specific settings to overlay, then create a copy of config
+   * There are two cases we need to clone the session config that's being passed to hive driver
+   * 1. Async query -
+   *    If the client changes a config setting, that shouldn't reflect in the execution already underway
+   * 2. confOverlay -
+   *    The query specific settings should only be applied to the query config and not session
+   * @return new configuration
+   * @throws HiveSQLException
+   */
+  private HiveConf getConfigForOperation() throws HiveSQLException {
+    HiveConf sqlOperationConf = getParentSession().getHiveConf();
+    if (!getConfOverlay().isEmpty() || shouldRunAsync()) {
+      // clone the partent session config for this query
+      sqlOperationConf = new HiveConf(sqlOperationConf);
+
+      // apply overlay query specific settings, if any
+      for (Map.Entry<String, String> confEntry : getConfOverlay().entrySet()) {
+        try {
+          sqlOperationConf.verifyAndSet(confEntry.getKey(), confEntry.getValue());
+        } catch (IllegalArgumentException e) {
+          throw new HiveSQLException("Error applying statement specific settings", e);
+        }
+      }
+    }
+    return sqlOperationConf;
+  }
+
 }
diff --git a/src/service/src/test/org/apache/hive/service/cli/CLIServiceTest.java b/src/service/src/test/org/apache/hive/service/cli/CLIServiceTest.java
index d6caed1..cd9d99a 100644
--- a/src/service/src/test/org/apache/hive/service/cli/CLIServiceTest.java
+++ b/src/service/src/test/org/apache/hive/service/cli/CLIServiceTest.java
@@ -20,10 +20,13 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.fail;
 
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.Map;
 
+import org.apache.hadoop.hive.conf.HiveConf;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -224,4 +227,68 @@ public void testExecuteStatementAsync() throws Exception {
     System.out.println(ophandle + " after cancelling, state= " + state);
     assertEquals("Query should be cancelled", OperationState.CANCELED, state);
   }
+
+  /**
+   * Test per statement configuration overlay.
+   * Create a table using hiveconf: var substitution, with the conf var passed
+   * via confOverlay.Verify the confOverlay works for the query and does set the
+   * value in the session configuration
+   * @throws Exception
+   */
+  @Test
+  public void testConfOverlay() throws Exception {
+    SessionHandle sessionHandle = client.openSession("tom", "password", new HashMap<String, String>());
+    assertNotNull(sessionHandle);
+    String tabName = "TEST_CONF_EXEC";
+    String tabNameVar = "tabNameVar";
+
+    String setLockMgr = "SET " + HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY.varname
+        + " = false";
+    OperationHandle opHandle = client.executeStatement(sessionHandle, setLockMgr, null);
+    client.closeOperation(opHandle);
+
+    String dropTable = "DROP TABLE IF EXISTS " + tabName;
+    opHandle = client.executeStatement(sessionHandle, dropTable, null);
+    client.closeOperation(opHandle);
+
+    // set a pass a property to operation and check if its set the query config
+    Map <String, String> confOverlay = new HashMap<String, String>();
+    confOverlay.put(tabNameVar, tabName);
+
+    // execute statement with the conf overlay
+    String createTab = "CREATE TABLE ${hiveconf:" + tabNameVar + "} (id int)";
+    opHandle = client.executeStatement(sessionHandle, createTab, confOverlay);
+    assertNotNull(opHandle);
+    // query should pass and create the table
+    assertEquals("Query should be finished",
+        OperationState.FINISHED, client.getOperationStatus(opHandle));
+    client.closeOperation(opHandle);
+
+    // select from  the new table should pass
+    String selectTab = "SELECT * FROM " + tabName;
+    opHandle = client.executeStatement(sessionHandle, selectTab, null);
+    assertNotNull(opHandle);
+    // query should pass and create the table
+    assertEquals("Query should be finished",
+        OperationState.FINISHED, client.getOperationStatus(opHandle));
+    client.closeOperation(opHandle);
+
+    // the settings in confoverly should not be part of session config
+    // another query referring that property with the conf overlay should fail
+    selectTab = "SELECT * FROM ${hiveconf:" + tabNameVar + "}";
+    try {
+      opHandle = client.executeStatement(sessionHandle, selectTab, null);
+      fail("Query should fail");
+    } catch (HiveSQLException e) {
+      // Expected exception
+    }
+
+    // cleanup
+    dropTable = "DROP TABLE IF EXISTS " + tabName;
+    opHandle = client.executeStatement(sessionHandle, dropTable, null);
+    client.closeOperation(opHandle);
+
+
+    client.closeSession(sessionHandle);
+  }
 }
-- 
1.7.0.4

