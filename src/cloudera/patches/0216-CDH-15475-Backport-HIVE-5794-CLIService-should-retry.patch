From e69dff1ea58bb45399a0fc3a20544511c2b13478 Mon Sep 17 00:00:00 2001
From: Brock Noland <brock@cloudera.com>
Date: Tue, 31 Dec 2013 16:11:54 -0600
Subject: [PATCH 216/375] CDH-15475 - Backport HIVE-5794 - CLIService should retry creating scratch directories on startup

---
 .../java/org/apache/hadoop/hive/conf/HiveConf.java |    2 +
 conf/hive-default.xml.template                     |   10 +++-
 .../apache/hive/service/server/HiveServer2.java    |   49 ++++++++++++++++----
 3 files changed, 49 insertions(+), 12 deletions(-)

diff --git a/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java b/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
index bb0d6df..ef68d7a 100644
--- a/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
+++ b/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
@@ -732,6 +732,8 @@
     HIVE_ENTITY_SEPARATOR("hive.entity.separator", "@"),
     HIVE_EXTENDED_ENITITY_CAPTURE("hive.entity.capture.input.URI", false),
 
+    HIVE_SERVER2_MAX_START_ATTEMPTS("hive.server2.max.start.attempts", 30L),
+
     // binary or http
     HIVE_SERVER2_TRANSPORT_MODE("hive.server2.transport.mode", "binary"),
 
diff --git a/src/conf/hive-default.xml.template b/src/conf/hive-default.xml.template
index e8ea2f8..522dd04 100644
--- a/src/conf/hive-default.xml.template
+++ b/src/conf/hive-default.xml.template
@@ -877,12 +877,18 @@
   <description>Read from a binary stream and treat each hive.binary.record.max.length bytes as a record.
   The last record before the end of stream can have less than hive.binary.record.max.length bytes</description>
 </property>
-    
+
+<property>
+  <name>hive.server2.max.start.attempts</name>
+  <value>30</value>
+  <description>This number of times HiveServer2 will attempt to start before exiting, sleeping 60 seconds between retries. The default of 30 will keep trying for 30 minutes.</description>
+</property>
+
 <property>
   <name>hive.server2.transport.mode</name>
   <value>binary</value>
   <description>Server transport mode. "binary" or "http".</description>
-</property>    
+</property>
 
 <property>
   <name>hive.server2.thrift.http.port</name>
diff --git a/src/service/src/java/org/apache/hive/service/server/HiveServer2.java b/src/service/src/java/org/apache/hive/service/server/HiveServer2.java
index b191f54..9c61a27 100644
--- a/src/service/src/java/org/apache/hive/service/server/HiveServer2.java
+++ b/src/service/src/java/org/apache/hive/service/server/HiveServer2.java
@@ -36,8 +36,6 @@
  */
 public class HiveServer2 extends CompositeService {
   private static final Log LOG = LogFactory.getLog(HiveServer2.class);
-  private static CompositeServiceShutdownHook serverShutdownHook;
-  public static final int SHUTDOWN_HOOK_PRIORITY = 100;
 
   private CLIService cliService;
   private ThriftCLIService thriftCLIService;
@@ -78,9 +76,42 @@ public synchronized void stop() {
     super.stop();
   }
 
-  /**
-   * @param args
-   */
+  private static void startHiveServer2() throws Throwable {
+    long attempts = 0, maxAttempts = 1;
+    while(true) {
+      HiveConf hiveConf = new HiveConf();
+      maxAttempts = hiveConf.getLongVar(HiveConf.ConfVars.HIVE_SERVER2_MAX_START_ATTEMPTS);
+      HiveServer2 server = null;
+      try {
+        server = new HiveServer2();
+        server.init(hiveConf);
+        server.start();
+        break;
+      } catch (Throwable throwable) {
+        if(++attempts >= maxAttempts) {
+          throw new Error("Max start attempts " + maxAttempts + " exhausted", throwable);
+        } else {
+          LOG.warn("Error starting HiveServer2 on attempt " + attempts +
+            ", will retry in 60 seconds", throwable);
+          try {
+            if (server != null) {
+              server.stop();
+              server = null;
+            }
+          } catch (Exception e) {
+            LOG.info("Exception caught when calling stop of HiveServer2 before" +
+              " retrying start", e);
+          }
+          try {
+            Thread.sleep(60L * 1000L);
+          } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
+          }
+        }
+      }
+    }
+  }
+
   public static void main(String[] args) {
     try {
       ServerOptionsProcessor oproc = new ServerOptionsProcessor("hiveserver2");
@@ -96,12 +127,10 @@ public static void main(String[] args) {
       HiveStringUtils.startupShutdownMessage(HiveServer2.class, args, LOG);
       //log debug message from "oproc" after log4j initialize properly
       LOG.debug(oproc.getDebugMessage().toString());
-      HiveConf hiveConf = new HiveConf();
-      HiveServer2 server = new HiveServer2();
-      server.init(hiveConf);
-      server.start();
+      startHiveServer2();
     } catch (LogInitializationException e) {
-      LOG.warn(e.getMessage());
+      LOG.error("Error initializing log: " + e.getMessage(), e);
+      System.exit(-1);
     } catch (Throwable t) {
       LOG.fatal("Error starting HiveServer2", t);
       System.exit(-1);
-- 
1.7.0.4

