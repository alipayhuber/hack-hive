From 8548deb04a2511ba0e5c29b6f88e54f56cde524e Mon Sep 17 00:00:00 2001
From: Prasad Mujumdar <prasadm@cloudera.com>
Date: Fri, 18 Oct 2013 17:58:43 -0700
Subject: [PATCH 168/375] CLOUDERA-BUILD: CDH-15036: LDAP authentication is broken in HS2

---
 .../apache/hive/service/auth/PlainSaslHelper.java  |   51 +++++++++++++++----
 1 files changed, 40 insertions(+), 11 deletions(-)

diff --git a/src/service/src/java/org/apache/hive/service/auth/PlainSaslHelper.java b/src/service/src/java/org/apache/hive/service/auth/PlainSaslHelper.java
index 82b638c..7bd1b77 100644
--- a/src/service/src/java/org/apache/hive/service/auth/PlainSaslHelper.java
+++ b/src/service/src/java/org/apache/hive/service/auth/PlainSaslHelper.java
@@ -25,10 +25,13 @@
 import javax.security.auth.callback.NameCallback;
 import javax.security.auth.callback.PasswordCallback;
 import javax.security.auth.callback.UnsupportedCallbackException;
+import javax.security.auth.login.LoginException;
+import javax.security.sasl.AuthenticationException;
 import javax.security.sasl.AuthorizeCallback;
 import javax.security.sasl.SaslException;
 
 import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hive.service.auth.AuthenticationProviderFactory.AuthMethods;
 import org.apache.hive.service.auth.PlainSaslServer.ExternalAuthenticationCallback;
 import org.apache.hive.service.auth.PlainSaslServer.SaslPlainProvider;
 import org.apache.hive.service.cli.thrift.TCLIService.Iface;
@@ -44,23 +47,43 @@
 
   private static class PlainServerCallbackHandler implements CallbackHandler {
 
+    private final AuthMethods authMethod;
+    public PlainServerCallbackHandler(String authMethodStr) throws AuthenticationException {
+      authMethod = AuthMethods.getValidAuthMethod(authMethodStr);
+    }
     @Override
     public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
-      ExternalAuthenticationCallback ac = null;
+      String userName = null;
+      String passWord = null;
+      ExternalAuthenticationCallback eac = null;
+      AuthorizeCallback ac = null;
+
       for (int i = 0; i < callbacks.length; i++) {
         if (callbacks[i] instanceof ExternalAuthenticationCallback) {
-          ac = (ExternalAuthenticationCallback) callbacks[i];
+          eac = (ExternalAuthenticationCallback) callbacks[i];
+          userName = eac.getUserName();
+          passWord = eac.getPasswd();
           break;
+        } else if (callbacks[i] instanceof NameCallback) {
+          NameCallback nc = (NameCallback)callbacks[i];
+          userName = nc.getName();
+        } else if (callbacks[i] instanceof PasswordCallback) {
+          PasswordCallback pc = (PasswordCallback)callbacks[i];
+          passWord = new String(pc.getPassword());
+        } else if (callbacks[i] instanceof AuthorizeCallback) {
+          ac = (AuthorizeCallback) callbacks[i];
         } else {
           throw new UnsupportedCallbackException(callbacks[i]);
         }
       }
-
+      PasswdAuthenticationProvider provider =
+            AuthenticationProviderFactory.getAuthenticationProvider(authMethod);
+      provider.Authenticate(userName, passWord);
       if (ac != null) {
-        PasswdAuthenticationProvider provider =
-            AuthenticationProviderFactory.getAuthenticationProvider(ac.getAuthMethod());
-        provider.Authenticate(ac.getUserName(), ac.getPasswd());
-        ac.setAuthenticated(true);
+        ac.setAuthorized(true);
+      }
+      if (eac != null) {
+        eac.setAuthenticated(true);
       }
     }
   }
@@ -122,11 +145,17 @@ public static TProcessorFactory getPlainProcessorFactory(ThriftCLIService servic
     java.security.Security.addProvider(new SaslPlainProvider());
   }
 
-  public static TTransportFactory getPlainTransportFactory(String authTypeStr) {
+  public static TTransportFactory getPlainTransportFactory(String authTypeStr)
+      throws LoginException {
     TSaslServerTransport.Factory saslFactory = new TSaslServerTransport.Factory();
-    saslFactory.addServerDefinition("PLAIN",
-        authTypeStr, null, new HashMap<String, String>(),
-        new PlainServerCallbackHandler());
+    try {
+      saslFactory.addServerDefinition("PLAIN",
+          authTypeStr, null, new HashMap<String, String>(),
+          new PlainServerCallbackHandler(authTypeStr));
+    } catch (AuthenticationException e) {
+      // TODO Auto-generated catch block
+      throw new LoginException ("Error setting callback handler" + e);
+    }
     return saslFactory;
   }
 
-- 
1.7.0.4

