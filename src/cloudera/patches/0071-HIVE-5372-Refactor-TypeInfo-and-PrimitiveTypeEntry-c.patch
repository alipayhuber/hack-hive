From 04a8403ebff8b7a6bbf4c810f73dfc29c9066f3b Mon Sep 17 00:00:00 2001
From: Ashutosh Chauhan <hashutosh@apache.org>
Date: Mon, 7 Oct 2013 06:39:52 +0000
Subject: [PATCH 071/375] HIVE-5372 : Refactor TypeInfo and PrimitiveTypeEntry class hierachy to eliminate info repetition (Xuefu Zhang via Ashutosh Chauhan)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1529771 13f79535-47bb-0310-9956-ffa450edef68
---
 .../util/typedbytes/TypedBytesRecordReader.java    |   27 +-
 .../hadoop/hive/ql/exec/FunctionRegistry.java      |   59 ++--
 .../apache/hadoop/hive/ql/io/orc/OrcStruct.java    |   16 +-
 .../apache/hadoop/hive/ql/io/orc/WriterImpl.java   |   12 +-
 .../hadoop/hive/ql/parse/DDLSemanticAnalyzer.java  |    7 +-
 .../apache/hadoop/hive/ql/parse/ParseUtils.java    |   41 +--
 .../hadoop/hive/ql/parse/TypeCheckProcFactory.java |   14 +-
 .../hadoop/hive/ql/plan/ExprNodeConstantDesc.java  |    3 +-
 .../org/apache/hadoop/hive/ql/udf/SettableUDF.java |    5 +-
 .../hive/ql/udf/generic/GenericUDFConcat.java      |   10 +-
 .../hive/ql/udf/generic/GenericUDFLower.java       |    9 +-
 .../hive/ql/udf/generic/GenericUDFReflect2.java    |    6 +-
 .../hive/ql/udf/generic/GenericUDFToVarchar.java   |   45 +--
 .../hive/ql/udf/generic/GenericUDFUpper.java       |    8 +-
 .../hive/ql/udf/generic/GenericUDFUtils.java       |   26 +-
 .../hive/ql/udf/generic/TestGenericUDFMacro.java   |    4 +-
 .../clientnegative/invalid_varchar_length_1.q.out  |    2 +-
 .../clientnegative/invalid_varchar_length_2.q.out  |    2 +-
 .../clientnegative/invalid_varchar_length_3.q.out  |    2 +-
 ql/src/test/results/compiler/plan/input9.q.xml     |   14 +-
 .../org/apache/hadoop/hive/serde2/RegexSerDe.java  |   57 +---
 .../serde2/avro/AvroObjectInspectorGenerator.java  |   13 +-
 .../serde2/binarysortable/BinarySortableSerDe.java |   17 +-
 .../hive/serde2/dynamic_type/DynamicSerDe.java     |    9 +-
 .../hadoop/hive/serde2/lazy/LazyFactory.java       |    2 -
 .../hadoop/hive/serde2/lazy/LazyHiveVarchar.java   |    8 +-
 .../apache/hadoop/hive/serde2/lazy/LazyUtils.java  |    2 +-
 .../AbstractPrimitiveLazyObjectInspector.java      |    6 +-
 .../primitive/LazyBinaryObjectInspector.java       |    4 +-
 .../primitive/LazyBooleanObjectInspector.java      |    4 +-
 .../primitive/LazyByteObjectInspector.java         |    4 +-
 .../primitive/LazyDateObjectInspector.java         |    4 +-
 .../primitive/LazyDoubleObjectInspector.java       |    4 +-
 .../primitive/LazyFloatObjectInspector.java        |    4 +-
 .../primitive/LazyHiveDecimalObjectInspector.java  |    4 +-
 .../primitive/LazyHiveVarcharObjectInspector.java  |   24 +-
 .../primitive/LazyIntObjectInspector.java          |    4 +-
 .../primitive/LazyLongObjectInspector.java         |    4 +-
 .../LazyPrimitiveObjectInspectorFactory.java       |  168 ++++------
 .../primitive/LazyShortObjectInspector.java        |    4 +-
 .../primitive/LazyStringObjectInspector.java       |    4 +-
 .../primitive/LazyTimestampObjectInspector.java    |    4 +-
 .../primitive/LazyVoidObjectInspector.java         |    4 +-
 .../serde2/lazybinary/LazyBinaryHiveVarchar.java   |    9 +-
 .../objectinspector/ObjectInspectorConverters.java |    5 +-
 .../objectinspector/ObjectInspectorUtils.java      |   23 +-
 .../objectinspector/PrimitiveObjectInspector.java  |   20 +-
 .../AbstractPrimitiveJavaObjectInspector.java      |    6 +-
 .../AbstractPrimitiveObjectInspector.java          |   29 +--
 .../AbstractPrimitiveWritableObjectInspector.java  |    6 +-
 .../primitive/JavaBinaryObjectInspector.java       |    3 +-
 .../primitive/JavaBooleanObjectInspector.java      |    3 +-
 .../primitive/JavaByteObjectInspector.java         |    3 +-
 .../primitive/JavaDateObjectInspector.java         |    3 +-
 .../primitive/JavaDoubleObjectInspector.java       |    3 +-
 .../primitive/JavaFloatObjectInspector.java        |    3 +-
 .../primitive/JavaHiveDecimalObjectInspector.java  |    3 +-
 .../primitive/JavaHiveVarcharObjectInspector.java  |   35 +-
 .../primitive/JavaIntObjectInspector.java          |    3 +-
 .../primitive/JavaLongObjectInspector.java         |    3 +-
 .../primitive/JavaShortObjectInspector.java        |    3 +-
 .../primitive/JavaStringObjectInspector.java       |    3 +-
 .../primitive/JavaTimestampObjectInspector.java    |    3 +-
 .../primitive/JavaVoidObjectInspector.java         |    3 +-
 .../PrimitiveObjectInspectorConverter.java         |    2 -
 .../primitive/PrimitiveObjectInspectorFactory.java |  336 +++++++++-----------
 .../primitive/PrimitiveObjectInspectorUtils.java   |  189 ++----------
 .../primitive/WritableBinaryObjectInspector.java   |    3 +-
 .../primitive/WritableBooleanObjectInspector.java  |    3 +-
 .../primitive/WritableByteObjectInspector.java     |    5 +-
 ...WritableConstantHiveVarcharObjectInspector.java |   24 +-
 .../primitive/WritableDateObjectInspector.java     |    3 +-
 .../primitive/WritableDoubleObjectInspector.java   |    3 +-
 .../primitive/WritableFloatObjectInspector.java    |    3 +-
 .../WritableHiveDecimalObjectInspector.java        |    3 +-
 .../WritableHiveVarcharObjectInspector.java        |   30 +-
 .../primitive/WritableIntObjectInspector.java      |    3 +-
 .../primitive/WritableLongObjectInspector.java     |    3 +-
 .../primitive/WritableShortObjectInspector.java    |    3 +-
 .../primitive/WritableStringObjectInspector.java   |    3 +-
 .../WritableTimestampObjectInspector.java          |    3 +-
 .../primitive/WritableVoidObjectInspector.java     |    3 +-
 .../hive/serde2/typeinfo/BaseCharTypeInfo.java     |   56 ++++
 .../hive/serde2/typeinfo/BaseTypeParams.java       |   50 ---
 .../typeinfo/ParameterizedPrimitiveTypeUtils.java  |   71 ----
 .../hive/serde2/typeinfo/PrimitiveTypeInfo.java    |   49 +---
 .../hive/serde2/typeinfo/PrimitiveTypeSpec.java    |   37 ---
 .../hive/serde2/typeinfo/TypeInfoFactory.java      |  142 +++++----
 .../hadoop/hive/serde2/typeinfo/TypeInfoUtils.java |   39 ++-
 .../hive/serde2/typeinfo/VarcharTypeInfo.java      |   64 ++++
 .../hive/serde2/typeinfo/VarcharTypeParams.java    |   97 ------
 .../hadoop/hive/serde2/typeinfo/VarcharUtils.java  |   43 +++
 .../serde2/lazybinary/TestLazyBinarySerDe.java     |    3 +-
 .../TestObjectInspectorConverters.java             |    8 +-
 .../apache/hive/service/cli/TypeDescriptor.java    |   10 +-
 .../apache/hive/service/cli/TypeQualifiers.java    |   19 +-
 96 files changed, 859 insertions(+), 1293 deletions(-)
 create mode 100644 serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/BaseCharTypeInfo.java
 delete mode 100644 serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/BaseTypeParams.java
 delete mode 100644 serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/ParameterizedPrimitiveTypeUtils.java
 delete mode 100644 serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/PrimitiveTypeSpec.java
 create mode 100644 serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/VarcharTypeInfo.java
 delete mode 100644 serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/VarcharTypeParams.java
 create mode 100644 serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/VarcharUtils.java

diff --git a/src/contrib/src/java/org/apache/hadoop/hive/contrib/util/typedbytes/TypedBytesRecordReader.java b/src/contrib/src/java/org/apache/hadoop/hive/contrib/util/typedbytes/TypedBytesRecordReader.java
index 8fcb3b3..413b873 100644
--- a/src/contrib/src/java/org/apache/hadoop/hive/contrib/util/typedbytes/TypedBytesRecordReader.java
+++ b/src/contrib/src/java/org/apache/hadoop/hive/contrib/util/typedbytes/TypedBytesRecordReader.java
@@ -39,9 +39,8 @@
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters.Converter;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
-import org.apache.hadoop.hive.serde2.typeinfo.ParameterizedPrimitiveTypeUtils;
+import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.BooleanWritable;
 import org.apache.hadoop.io.BytesWritable;
 import org.apache.hadoop.io.FloatWritable;
@@ -59,16 +58,16 @@
   private DataInputStream din;
   private TypedBytesWritableInput tbIn;
 
-  private NonSyncDataOutputBuffer barrStr = new NonSyncDataOutputBuffer();
+  private final NonSyncDataOutputBuffer barrStr = new NonSyncDataOutputBuffer();
   private TypedBytesWritableOutput tbOut;
 
-  private ArrayList<Writable> row = new ArrayList<Writable>(0);
-  private ArrayList<String> rowTypeName = new ArrayList<String>(0);
+  private final ArrayList<Writable> row = new ArrayList<Writable>(0);
+  private final ArrayList<String> rowTypeName = new ArrayList<String>(0);
   private List<String> columnTypes;
 
-  private ArrayList<ObjectInspector> srcOIns = new ArrayList<ObjectInspector>();
-  private ArrayList<ObjectInspector> dstOIns = new ArrayList<ObjectInspector>();
-  private ArrayList<Converter> converters = new ArrayList<Converter>();
+  private final ArrayList<ObjectInspector> srcOIns = new ArrayList<ObjectInspector>();
+  private final ArrayList<ObjectInspector> dstOIns = new ArrayList<ObjectInspector>();
+  private final ArrayList<Converter> converters = new ArrayList<Converter>();
 
   private static Map<Type, String> typedBytesToTypeName = new HashMap<Type, String>();
   static {
@@ -89,10 +88,9 @@ public void initialize(InputStream in, Configuration conf, Properties tbl) throw
     String columnTypeProperty = tbl.getProperty(serdeConstants.LIST_COLUMN_TYPES);
     columnTypes = Arrays.asList(columnTypeProperty.split(","));
     for (String columnType : columnTypes) {
-      PrimitiveTypeEntry dstTypeEntry = PrimitiveObjectInspectorUtils
-          .getTypeEntryFromTypeName(columnType);
+      PrimitiveTypeInfo dstTypeInfo = TypeInfoFactory.getPrimitiveTypeInfo(columnType);
       dstOIns.add(PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
-          dstTypeEntry));
+          dstTypeInfo));
     }
   }
 
@@ -152,11 +150,10 @@ public int next(Writable data) throws IOException {
         row.add(wrt);
         rowTypeName.add(type.name());
         String typeName = typedBytesToTypeName.get(type);
-        PrimitiveTypeEntry srcTypeEntry = PrimitiveObjectInspectorUtils
-            .getTypeEntryFromTypeName(typeName);
+        PrimitiveTypeInfo srcTypeInfo = TypeInfoFactory.getPrimitiveTypeInfo(typeName);
         srcOIns
             .add(PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
-                srcTypeEntry));
+                srcTypeInfo));
         converters.add(ObjectInspectorConverters.getConverter(srcOIns.get(pos),
             dstOIns.get(pos)));
       } else {
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/exec/FunctionRegistry.java b/src/ql/src/java/org/apache/hadoop/hive/ql/exec/FunctionRegistry.java
index 6e38b07..ab23a9a 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/exec/FunctionRegistry.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/exec/FunctionRegistry.java
@@ -39,7 +39,6 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.hive.common.type.HiveVarchar;
 import org.apache.hadoop.hive.ql.metadata.HiveException;
 import org.apache.hadoop.hive.ql.parse.SemanticException;
 import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;
@@ -156,7 +155,6 @@
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
 import org.apache.hadoop.io.IOUtils;
 import org.apache.hadoop.util.ReflectionUtils;
 import org.w3c.dom.Document;
@@ -662,12 +660,7 @@ public static TypeInfo getTypeInfoForPrimitiveCategory(
         int maxLength = getCommonLength(
             TypeInfoUtils.getCharacterLengthForType(a),
             TypeInfoUtils.getCharacterLengthForType(b));
-        VarcharTypeParams varcharParams = new VarcharTypeParams();
-        varcharParams.setLength(maxLength);
-        // Generate type name so that we can retrieve the TypeInfo for that type.
-        String typeName = PrimitiveObjectInspectorUtils
-            .getTypeEntryFromTypeSpecs(typeCategory, varcharParams).toString();
-        return TypeInfoFactory.getPrimitiveTypeInfo(typeName);
+        return TypeInfoFactory.getVarcharTypeInfo(maxLength);
 
       default:
         // Type doesn't require any qualifiers.
@@ -1320,29 +1313,29 @@ public static GenericUDF cloneGenericUDF(GenericUDF genericUDF) {
       GenericUDFMacro bridge = (GenericUDFMacro) genericUDF;
       clonedUDF = new GenericUDFMacro(bridge.getMacroName(), bridge.getBody(),
           bridge.getColNames(), bridge.getColTypes());
-     } else {
-       clonedUDF = (GenericUDF) ReflectionUtils
-           .newInstance(genericUDF.getClass(), null);
-     }
- 
-     if (clonedUDF != null) {
-       // The original may have settable info that needs to be added to the new copy.
-       if (genericUDF instanceof SettableUDF) {
-         try {
-           Object settableData = ((SettableUDF)genericUDF).getParams();
-           if (settableData != null) {
-             ((SettableUDF)clonedUDF).setParams(settableData);
-           }
-         } catch (UDFArgumentException err) {
-           // In theory this should not happen - if the original copy of the UDF had this
-           // data, we should be able to set the UDF copy with this same settableData.
-           LOG.error("Unable to add settable data to UDF " + genericUDF.getClass());
-           throw new IllegalArgumentException(err);
-         }
-       }
-     }
-
-     return clonedUDF;
+    } else {
+      clonedUDF = (GenericUDF) ReflectionUtils
+          .newInstance(genericUDF.getClass(), null);
+    }
+
+    if (clonedUDF != null) {
+      // The original may have settable info that needs to be added to the new copy.
+      if (genericUDF instanceof SettableUDF) {
+        try {
+          TypeInfo typeInfo = ((SettableUDF)genericUDF).getTypeInfo();
+          if (typeInfo != null) {
+            ((SettableUDF)clonedUDF).setTypeInfo(typeInfo);
+          }
+        } catch (UDFArgumentException err) {
+          // In theory this should not happen - if the original copy of the UDF had this
+          // data, we should be able to set the UDF copy with this same settableData.
+          LOG.error("Unable to add settable data to UDF " + genericUDF.getClass());
+          throw new IllegalArgumentException(err);
+        }
+      }
+    }
+
+    return clonedUDF;
   }
 
   /**
@@ -1761,7 +1754,9 @@ public static boolean isNativeFuncExpr(ExprNodeGenericFuncDesc fnExpr) {
   }
 
   private static void registerNativeStatus(FunctionInfo fi) {
-    if (!fi.isNative()) return;
+    if (!fi.isNative()) {
+      return;
+    }
     nativeUdfs.add(fi.getFunctionClass());
   }
 }
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java b/src/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java
index d1b5d48..65ee066 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java
@@ -32,17 +32,14 @@
 import org.apache.hadoop.hive.serde2.objectinspector.SettableMapObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.SettableStructObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.StructField;
-import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
 import org.apache.hadoop.hive.serde2.typeinfo.ListTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.MapTypeInfo;
-import org.apache.hadoop.hive.serde2.typeinfo.ParameterizedPrimitiveTypeUtils;
 import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.StructTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.hive.serde2.typeinfo.UnionTypeInfo;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
 import org.apache.hadoop.io.Writable;
 
 final class OrcStruct implements Writable {
@@ -486,12 +483,6 @@ static ObjectInspector createObjectInspector(TypeInfo info) {
           case STRING:
             return PrimitiveObjectInspectorFactory.writableStringObjectInspector;
           case VARCHAR:
-            // For varchar we need to retrieve the string length from the TypeInfo.
-            VarcharTypeParams varcharParams = (VarcharTypeParams)
-                ParameterizedPrimitiveTypeUtils.getTypeParamsFromTypeInfo(info);
-            if (varcharParams == null) {
-              throw new IllegalArgumentException("varchar type used without type params");
-            }
             return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
                 (PrimitiveTypeInfo) info);
           case TIMESTAMP:
@@ -545,11 +536,8 @@ static ObjectInspector createObjectInspector(int columnId,
           throw new UnsupportedOperationException(
               "Illegal use of varchar type without length in ORC type definition.");
         }
-        VarcharTypeParams varcharParams = new VarcharTypeParams();
-        varcharParams.setLength(type.getMaximumLength());
         return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
-            PrimitiveObjectInspectorUtils.getTypeEntryFromTypeSpecs(
-                PrimitiveCategory.VARCHAR, varcharParams));
+            TypeInfoFactory.getVarcharTypeInfo(type.getMaximumLength()));
       case TIMESTAMP:
         return PrimitiveObjectInspectorFactory.javaTimestampObjectInspector;
       case DATE:
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/io/orc/WriterImpl.java b/src/ql/src/java/org/apache/hadoop/hive/ql/io/orc/WriterImpl.java
index 44961ce..f2fe0ff 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/io/orc/WriterImpl.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/io/orc/WriterImpl.java
@@ -61,8 +61,7 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.ShortObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.StringObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;
-import org.apache.hadoop.hive.serde2.typeinfo.ParameterizedPrimitiveTypeUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 import org.apache.hadoop.io.BytesWritable;
 import org.apache.hadoop.io.Text;
 
@@ -1606,14 +1605,9 @@ private static void writeTypes(OrcProto.Footer.Builder builder,
           case VARCHAR:
             // The varchar length needs to be written to file and should be available
             // from the object inspector
-            VarcharTypeParams varcharParams = (VarcharTypeParams)
-                ParameterizedPrimitiveTypeUtils.getTypeParamsFromPrimitiveObjectInspector(
-                    (PrimitiveObjectInspector) treeWriter.inspector);
-            if (varcharParams == null) {
-              throw new IllegalArgumentException("No varchar length specified in ORC type");
-            }
+            VarcharTypeInfo typeInfo = (VarcharTypeInfo) ((PrimitiveObjectInspector) treeWriter.inspector).getTypeInfo();
             type.setKind(Type.Kind.VARCHAR);
-            type.setMaximumLength(varcharParams.getLength());
+            type.setMaximumLength(typeInfo.getLength());
             break;
           case BINARY:
             type.setKind(OrcProto.Type.Kind.BINARY);
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java
index 36034d6..037191a 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java
@@ -129,7 +129,7 @@
 import org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 import org.apache.hadoop.mapred.InputFormat;
 import org.apache.hadoop.mapred.TextInputFormat;
 
@@ -172,9 +172,8 @@ public static String getTypeName(ASTNode node) throws SemanticException {
     case HiveParser.TOK_VARCHAR:
       PrimitiveCategory primitiveCategory = PrimitiveCategory.VARCHAR;
       typeName = TokenToTypeName.get(token);
-      VarcharTypeParams varcharParams = ParseUtils.getVarcharParams(typeName, node);
-      typeName = PrimitiveObjectInspectorUtils.getTypeEntryFromTypeSpecs(
-          primitiveCategory, varcharParams).toString();
+      VarcharTypeInfo varcharTypeInfo = ParseUtils.getVarcharTypeInfo(typeName, node);
+      typeName = varcharTypeInfo.getQualifiedName();
       break;
     default:
       typeName = TokenToTypeName.get(token);
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/ParseUtils.java b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/ParseUtils.java
index c8c5f63..12a0a69 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/ParseUtils.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/ParseUtils.java
@@ -20,17 +20,15 @@
 
 import java.util.ArrayList;
 import java.util.Iterator;
-import java.util.LinkedList;
 import java.util.List;
 
 import org.apache.hadoop.hive.metastore.api.FieldSchema;
 import org.apache.hadoop.hive.ql.ErrorMsg;
 import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;
-import org.apache.hadoop.hive.serde2.SerDeException;
-import org.apache.hadoop.hive.serde2.typeinfo.BaseTypeParams;
 import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 
 
 /**
@@ -110,49 +108,24 @@ private ParseUtils() {
    */
   static ExprNodeDesc createConversionCast(ExprNodeDesc column, PrimitiveTypeInfo tableFieldTypeInfo)
       throws SemanticException {
-    ExprNodeDesc ret;
-
     // Get base type, since type string may be parameterized
     String baseType = TypeInfoUtils.getBaseName(tableFieldTypeInfo.getTypeName());
-    BaseTypeParams typeParams = null;
-    // If TypeInfo is parameterized, provide the params to the UDF factory method.
-    typeParams = tableFieldTypeInfo.getTypeParams();
-    if (typeParams != null) {
-      switch (tableFieldTypeInfo.getPrimitiveCategory()) {
-        case VARCHAR:
-          // Nothing to do here - the parameter will be passed to the UDF factory method below
-          break;
-        default:
-          throw new SemanticException("Type cast for " + tableFieldTypeInfo.getPrimitiveCategory() +
-              " does not take type parameters");
-      }
-    }
 
     // If the type cast UDF is for a parameterized type, then it should implement
     // the SettableUDF interface so that we can pass in the params.
     // Not sure if this is the cleanest solution, but there does need to be a way
     // to provide the type params to the type cast.
-    ret = TypeCheckProcFactory.DefaultExprProcessor
-        .getFuncExprNodeDescWithUdfData(baseType, typeParams, column);
-
-    return ret;
+    return TypeCheckProcFactory.DefaultExprProcessor.getFuncExprNodeDescWithUdfData(baseType,
+        tableFieldTypeInfo, column);
   }
 
-  public static VarcharTypeParams getVarcharParams(String typeName, ASTNode node)
+  public static VarcharTypeInfo getVarcharTypeInfo(String typeName, ASTNode node)
       throws SemanticException {
     if (node.getChildCount() != 1) {
       throw new SemanticException("Bad params for type " + typeName);
     }
 
-    try {
-      VarcharTypeParams typeParams = new VarcharTypeParams();
-      String lengthStr = node.getChild(0).getText();
-      Integer length = Integer.valueOf(lengthStr);
-      typeParams.setLength(length.intValue());
-      typeParams.validateParams();
-      return typeParams;
-    } catch (SerDeException err) {
-      throw new SemanticException(err);
-    }
+    String lengthStr = node.getChild(0).getText();
+    return TypeInfoFactory.getVarcharTypeInfo(Integer.valueOf(lengthStr));
   }
 }
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java
index abb77a1..e7bea8b 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java
@@ -62,13 +62,13 @@
 import org.apache.hadoop.hive.serde.serdeConstants;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector.Category;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
 import org.apache.hadoop.hive.serde2.typeinfo.ListTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.MapTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.StructTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 
 /**
  * The Factory for creating typecheck processors. The typecheck processors are
@@ -652,7 +652,7 @@ public static String getFunctionText(ASTNode expr, boolean isFunction) {
      *
      * @throws UDFArgumentException
      */
-    static ExprNodeDesc getFuncExprNodeDescWithUdfData(String udfName, Object udfData,
+    static ExprNodeDesc getFuncExprNodeDescWithUdfData(String udfName, TypeInfo typeInfo,
         ExprNodeDesc... children) throws UDFArgumentException {
 
       FunctionInfo fi = FunctionRegistry.getFunctionInfo(udfName);
@@ -667,9 +667,9 @@ static ExprNodeDesc getFuncExprNodeDescWithUdfData(String udfName, Object udfDat
       }
 
       // Add udfData to UDF if necessary
-      if (udfData != null) {
+      if (typeInfo != null) {
         if (genericUDF instanceof SettableUDF) {
-          ((SettableUDF)genericUDF).setParams(udfData);
+          ((SettableUDF)genericUDF).setTypeInfo(typeInfo);
         }
       }
 
@@ -793,10 +793,10 @@ static ExprNodeDesc getXpathOrFuncExprNodeDesc(ASTNode expr,
           switch (funcNameNode.getType()) {
             case HiveParser.TOK_VARCHAR:
               // Add type params
-              VarcharTypeParams varcharTypeParams = new VarcharTypeParams();
-              varcharTypeParams.length = Integer.valueOf((funcNameNode.getChild(0).getText()));
+              VarcharTypeInfo varcharTypeInfo = TypeInfoFactory.getVarcharTypeInfo(
+                  Integer.valueOf((funcNameNode.getChild(0).getText())));
               if (genericUDF != null) {
-                ((SettableUDF)genericUDF).setParams(varcharTypeParams);
+                ((SettableUDF)genericUDF).setTypeInfo(varcharTypeInfo);
               }
               break;
             default:
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/plan/ExprNodeConstantDesc.java b/src/ql/src/java/org/apache/hadoop/hive/ql/plan/ExprNodeConstantDesc.java
index 6538add..3bafb81 100755
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/plan/ExprNodeConstantDesc.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/plan/ExprNodeConstantDesc.java
@@ -66,8 +66,7 @@ public ConstantObjectInspector getWritableObjectInspector() {
         .getPrimitiveJavaObjectInspector(pc).getPrimitiveWritableObject(
           getValue());
     return PrimitiveObjectInspectorFactory
-        .getPrimitiveWritableConstantObjectInspector(
-            (PrimitiveTypeInfo) getTypeInfo(), writableValue);
+        .getPrimitiveWritableConstantObjectInspector((PrimitiveTypeInfo) getTypeInfo(), writableValue);
   }
 
 
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/SettableUDF.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/SettableUDF.java
index 9225aa1..e8f7e15 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/SettableUDF.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/SettableUDF.java
@@ -18,6 +18,7 @@
 package org.apache.hadoop.hive.ql.udf;
 
 import org.apache.hadoop.hive.ql.exec.UDFArgumentException;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
 
 /**
  * THIS INTERFACE IS UNSTABLE AND SHOULD NOT BE USED BY 3RD PARTY UDFS.
@@ -31,8 +32,8 @@
    * An exception may be thrown if the UDF doesn't know what to do with this data.
    * @param params UDF-specific data to add to the UDF
    */
-  void setParams(Object params) throws UDFArgumentException;
+  void setTypeInfo(TypeInfo typeInfo) throws UDFArgumentException;
 
-  Object getParams();
+  TypeInfo getTypeInfo();
 
 }
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcat.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcat.java
index 0ce1825..8d48799 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcat.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcat.java
@@ -29,8 +29,8 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.BinaryObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorConverter.StringConverter;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 import org.apache.hadoop.io.BytesWritable;
 
 /**
@@ -123,10 +123,8 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen
         case STRING:
           return PrimitiveObjectInspectorFactory.writableStringObjectInspector;
         case VARCHAR:
-          VarcharTypeParams varcharParams = new VarcharTypeParams();
-          varcharParams.setLength(returnLength);
-          return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
-              PrimitiveObjectInspectorUtils.getTypeEntryFromTypeSpecs(returnType, varcharParams));
+          VarcharTypeInfo typeInfo = TypeInfoFactory.getVarcharTypeInfo(returnLength);
+          return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(typeInfo);
         default:
           throw new UDFArgumentException("Unexpected CONCAT return type of " + returnType);
       }
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLower.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLower.java
index 366d9e6..06edb14 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLower.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLower.java
@@ -29,7 +29,8 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorConverter;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorConverter.StringConverter;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 
 /**
  * UDFLower.
@@ -65,11 +66,9 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen
       case VARCHAR:
         // return type should have same length as the input.
         returnType = inputType;
-        VarcharTypeParams varcharParams = new VarcharTypeParams();
-        varcharParams.setLength(
+        VarcharTypeInfo typeInfo = TypeInfoFactory.getVarcharTypeInfo(
             GenericUDFUtils.StringHelper.getFixedStringSizeForType(argumentOI));
-        outputOI = PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
-            argumentOI);
+        outputOI = PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(typeInfo);
         break;
       default:
         returnType = PrimitiveCategory.STRING;
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFReflect2.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFReflect2.java
index 5ba2ec5..05e2163 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFReflect2.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFReflect2.java
@@ -94,12 +94,10 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen
 
     try {
       method = findMethod(targetClass, methodName.toString(), null, true);
-      // While getTypeFor() returns a TypeEntry, we won't actually be able to get any
-      // type parameter information from this since the TypeEntry is derived from a return type.
+      // Note: type param is not available here.
       PrimitiveTypeEntry typeEntry = getTypeFor(method.getReturnType());
       returnOI = PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
-          PrimitiveObjectInspectorUtils.getTypeEntryFromTypeSpecs(
-              typeEntry.primitiveCategory, typeEntry.typeParams));
+          typeEntry.primitiveCategory);
       returnObj = (Writable) returnOI.getPrimitiveWritableClass().newInstance();
     } catch (Exception e) {
       throw new UDFArgumentException(e);
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFToVarchar.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFToVarchar.java
index 509a392..58eca86 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFToVarchar.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFToVarchar.java
@@ -27,12 +27,11 @@
 import org.apache.hadoop.hive.ql.udf.SettableUDF;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorConverter.HiveVarcharConverter;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.SettableHiveVarcharObjectInspector;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 
 @Description(name = "varchar",
 value = "CAST(<value> as VARCHAR(length)) - Converts the argument to a varchar value.",
@@ -41,15 +40,15 @@
 + "Example:\n "
 + "  > SELECT CAST(1234 AS varchar(10)) FROM src LIMIT 1;\n"
 + "  '1234'")
-public class GenericUDFToVarchar extends GenericUDF
-    implements SettableUDF, Serializable {
+public class GenericUDFToVarchar extends GenericUDF implements SettableUDF, Serializable {
   private static final Log LOG = LogFactory.getLog(GenericUDFToVarchar.class.getName());
+
   private transient PrimitiveObjectInspector argumentOI;
   private transient HiveVarcharConverter converter;
 
-  // The varchar type parameters need to be set prior to initialization,
+  // The varchar type info need to be set prior to initialization,
   // and must be preserved when the plan serialized to other processes.
-  private VarcharTypeParams typeParams;
+  private VarcharTypeInfo typeInfo;
 
   public GenericUDFToVarchar() {
   }
@@ -68,14 +67,8 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen
 
     // Check if this UDF has been provided with type params for the output varchar type
     SettableHiveVarcharObjectInspector outputOI;
-    if (typeParams != null) {
-      outputOI = (SettableHiveVarcharObjectInspector)
-          PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
-              PrimitiveObjectInspectorUtils.getTypeEntryFromTypeSpecs(
-                  PrimitiveCategory.VARCHAR, typeParams));
-    } else {
-      outputOI = PrimitiveObjectInspectorFactory.writableHiveVarcharObjectInspector;
-    }
+    outputOI = (SettableHiveVarcharObjectInspector)
+          PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(typeInfo);
 
     converter = new HiveVarcharConverter(argumentOI, outputOI);
     return outputOI;
@@ -98,11 +91,7 @@ public String getDisplayString(String[] children) {
     sb.append("CAST( ");
     sb.append(children[0]);
     sb.append(" AS VARCHAR(");
-    String paramsStr = "";
-    if (typeParams != null) {
-      paramsStr = typeParams.toString();
-    }
-    sb.append(paramsStr);
+    sb.append("" + typeInfo.getLength());
     sb.append(")");
     return sb.toString();
   }
@@ -112,21 +101,13 @@ public String getDisplayString(String[] children) {
   * This should be done before the UDF is initialized.
  */
   @Override
-  public void setParams(Object typeParams) throws UDFArgumentException {
-    if (converter != null) {
-      LOG.warn("Type converter already initialized, setting type params now will not be useful");
-    }
-    if (typeParams instanceof VarcharTypeParams) {
-      this.typeParams = (VarcharTypeParams)typeParams;
-    } else {
-      throw new UDFArgumentException(
-          "Was expecting VarcharTypeParams, instead got " + typeParams.getClass().getName());
-    }
+  public void setTypeInfo(TypeInfo typeInfo) throws UDFArgumentException {
+    this.typeInfo = (VarcharTypeInfo) typeInfo;
   }
 
   @Override
-  public Object getParams() {
-    return typeParams;
+  public TypeInfo getTypeInfo() {
+    return typeInfo;
   }
 
 }
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUpper.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUpper.java
index 1bb164a..4b1bab6 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUpper.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUpper.java
@@ -29,7 +29,8 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorConverter;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorConverter.StringConverter;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 
 /**
  * UDFUpper.
@@ -65,11 +66,10 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen
       case VARCHAR:
         // return type should have same length as the input.
         returnType = inputType;
-        VarcharTypeParams varcharParams = new VarcharTypeParams();
-        varcharParams.setLength(
+        VarcharTypeInfo varcharTypeInfo = TypeInfoFactory.getVarcharTypeInfo(
             GenericUDFUtils.StringHelper.getFixedStringSizeForType(argumentOI));
         outputOI = PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
-            argumentOI);
+            varcharTypeInfo);
         break;
       default:
         returnType = PrimitiveCategory.STRING;
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUtils.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUtils.java
index 6815195..b390f97 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUtils.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUtils.java
@@ -32,18 +32,18 @@
 import org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters;
-import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;
-import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorUtils;
-import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters.Converter;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters.IdentityConverter;
+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory.ObjectInspectorOptions;
+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorUtils;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorUtils.ObjectInspectorCopyOption;
+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.VoidObjectInspector;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 import org.apache.hadoop.io.Text;
 
 /**
@@ -52,7 +52,7 @@
 public final class GenericUDFUtils {
   /**
    * Checks if b is the first byte of a UTF-8 character.
-   * 
+   *
    */
   public static boolean isUtfStartByte(byte b) {
     return (b & 0xC0) != 0x80;
@@ -60,15 +60,15 @@ public static boolean isUtfStartByte(byte b) {
 
   /**
    * This class helps to find the return ObjectInspector for a GenericUDF.
-   * 
+   *
    * In many cases like CASE and IF, the GenericUDF is returning a value out of
    * several possibilities. However these possibilities may not always have the
    * same ObjectInspector.
-   * 
+   *
    * This class will help detect whether all possibilities have exactly the same
    * ObjectInspector. If not, then we need to convert the Objects to the same
    * ObjectInspector.
-   * 
+   *
    * A special case is when some values are constant NULL. In this case we can
    * use the same ObjectInspector.
    */
@@ -92,7 +92,7 @@ public ReturnObjectInspectorResolver(boolean allowTypeConversion) {
     /**
      * Update returnObjectInspector and valueInspectorsAreTheSame based on the
      * ObjectInspector seen.
-     * 
+     *
      * @return false if there is a type mismatch
      */
     public boolean update(ObjectInspector oi) throws UDFArgumentTypeException {
@@ -403,12 +403,8 @@ public static int getFixedStringSizeForType(PrimitiveObjectInspector poi)
       // TODO: we can support date, int, .. any types which would have a fixed length value
       switch (poi.getPrimitiveCategory()) {
         case VARCHAR:
-          VarcharTypeParams varcharParams = null;
-          varcharParams = (VarcharTypeParams) poi.getTypeParams();
-          if (varcharParams == null || varcharParams.length < 0) {
-            throw new UDFArgumentException("varchar type used without type params");
-          }
-          return varcharParams.length;
+          VarcharTypeInfo typeInfo = (VarcharTypeInfo) poi.getTypeInfo();
+          return typeInfo.getLength();
         default:
           throw new UDFArgumentException("No fixed size for type " + poi.getTypeName());
       }
diff --git a/src/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFMacro.java b/src/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFMacro.java
index 189bcab..8bbaa6b 100644
--- a/src/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFMacro.java
+++ b/src/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFMacro.java
@@ -62,10 +62,10 @@ public void setup() throws Exception {
     inspectors = new ObjectInspector[] {
         PrimitiveObjectInspectorFactory.
           getPrimitiveWritableConstantObjectInspector(
-            PrimitiveObjectInspector.PrimitiveCategory.INT, x),
+              TypeInfoFactory.intTypeInfo, x),
         PrimitiveObjectInspectorFactory.
           getPrimitiveWritableConstantObjectInspector(
-            PrimitiveObjectInspector.PrimitiveCategory.INT, y),
+              TypeInfoFactory.intTypeInfo, y),
     };
     arguments = new DeferredObject[] {
         new DeferredJavaObject(x),
diff --git a/src/ql/src/test/results/clientnegative/invalid_varchar_length_1.q.out b/src/ql/src/test/results/clientnegative/invalid_varchar_length_1.q.out
index 707f195..0056ae0 100644
--- a/src/ql/src/test/results/clientnegative/invalid_varchar_length_1.q.out
+++ b/src/ql/src/test/results/clientnegative/invalid_varchar_length_1.q.out
@@ -2,4 +2,4 @@ PREHOOK: query: drop table if exists invalid_varchar_length_1
 PREHOOK: type: DROPTABLE
 POSTHOOK: query: drop table if exists invalid_varchar_length_1
 POSTHOOK: type: DROPTABLE
-FAILED: SemanticException org.apache.hadoop.hive.serde2.SerDeException: Length 1000000 exceeds max varchar length of 65535
+FAILED: RuntimeException Varchar length 1000000 out of allowed range [1, 65535]
diff --git a/src/ql/src/test/results/clientnegative/invalid_varchar_length_2.q.out b/src/ql/src/test/results/clientnegative/invalid_varchar_length_2.q.out
index 0ba4621..d970fb6 100644
--- a/src/ql/src/test/results/clientnegative/invalid_varchar_length_2.q.out
+++ b/src/ql/src/test/results/clientnegative/invalid_varchar_length_2.q.out
@@ -1 +1 @@
-FAILED: RuntimeException Error creating type parameters for varchar(100000): org.apache.hadoop.hive.serde2.SerDeException: Error creating type params for varchar: org.apache.hadoop.hive.serde2.SerDeException: Length 100000 exceeds max varchar length of 65535
+FAILED: RuntimeException Varchar length 100000 out of allowed range [1, 65535]
diff --git a/src/ql/src/test/results/clientnegative/invalid_varchar_length_3.q.out b/src/ql/src/test/results/clientnegative/invalid_varchar_length_3.q.out
index 4311082..17d8c27 100644
--- a/src/ql/src/test/results/clientnegative/invalid_varchar_length_3.q.out
+++ b/src/ql/src/test/results/clientnegative/invalid_varchar_length_3.q.out
@@ -2,4 +2,4 @@ PREHOOK: query: drop table if exists invalid_varchar_length_3
 PREHOOK: type: DROPTABLE
 POSTHOOK: query: drop table if exists invalid_varchar_length_3
 POSTHOOK: type: DROPTABLE
-FAILED: SemanticException org.apache.hadoop.hive.serde2.SerDeException: VARCHAR length must be positive
+FAILED: RuntimeException Varchar length 0 out of allowed range [1, 65535]
diff --git a/src/ql/src/test/results/compiler/plan/input9.q.xml b/src/ql/src/test/results/compiler/plan/input9.q.xml
index cc2c31a..b4961b5 100644
--- a/src/ql/src/test/results/compiler/plan/input9.q.xml
+++ b/src/ql/src/test/results/compiler/plan/input9.q.xml
@@ -843,7 +843,7 @@
                        <string>_col0</string> 
                       </void> 
                       <void property="type"> 
-                       <object id="PrimitiveTypeInfo1" class="org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo"> 
+                       <object class="org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo"> 
                         <void property="typeName"> 
                          <string>void</string> 
                         </void> 
@@ -885,18 +885,10 @@
                 <void property="childExprs"> 
                  <object class="java.util.ArrayList"> 
                   <void method="add"> 
-                   <object class="org.apache.hadoop.hive.ql.plan.ExprNodeNullDesc"> 
-                    <void property="typeInfo"> 
-                     <object idref="PrimitiveTypeInfo1"/> 
-                    </void> 
-                   </object> 
+                   <object class="org.apache.hadoop.hive.ql.plan.ExprNodeNullDesc"/> 
                   </void> 
                   <void method="add"> 
-                   <object class="org.apache.hadoop.hive.ql.plan.ExprNodeNullDesc"> 
-                    <void property="typeInfo"> 
-                     <object idref="PrimitiveTypeInfo1"/> 
-                    </void> 
-                   </object> 
+                   <object class="org.apache.hadoop.hive.ql.plan.ExprNodeNullDesc"/> 
                   </void> 
                  </object> 
                 </void> 
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/RegexSerDe.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/RegexSerDe.java
index 5de5bd5..add5bdf 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/RegexSerDe.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/RegexSerDe.java
@@ -35,14 +35,12 @@
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;
 import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
+import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveJavaObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.ParameterizedPrimitiveTypeUtils;
 import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.io.Writable;
 
@@ -126,41 +124,16 @@ public void initialize(Configuration conf, Properties tbl)
     List<ObjectInspector> columnOIs = new ArrayList<ObjectInspector>(columnNames.size());
     for (int c = 0; c < numColumns; c++) {
       TypeInfo typeInfo = columnTypes.get(c);
-      String typeName = typeInfo.getTypeName();
-      if (typeName.equals(serdeConstants.STRING_TYPE_NAME)) {
-        columnOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
-      } else if (typeName.equals(serdeConstants.TINYINT_TYPE_NAME)) {
-        columnOIs.add(PrimitiveObjectInspectorFactory.javaByteObjectInspector);
-      } else if (typeName.equals(serdeConstants.SMALLINT_TYPE_NAME)) {
-       columnOIs.add(PrimitiveObjectInspectorFactory.javaShortObjectInspector);
-      } else if (typeName.equals(serdeConstants.INT_TYPE_NAME)) {
-        columnOIs.add(PrimitiveObjectInspectorFactory.javaIntObjectInspector);
-      } else if (typeName.equals(serdeConstants.BIGINT_TYPE_NAME)) {
-       columnOIs.add(PrimitiveObjectInspectorFactory.javaLongObjectInspector);
-      } else if (typeName.equals(serdeConstants.FLOAT_TYPE_NAME)) {
-        columnOIs.add(PrimitiveObjectInspectorFactory.javaFloatObjectInspector);
-      } else if (typeName.equals(serdeConstants.DOUBLE_TYPE_NAME)) {
-       columnOIs.add(PrimitiveObjectInspectorFactory.javaDoubleObjectInspector);
-      } else if (typeName.equals(serdeConstants.BOOLEAN_TYPE_NAME)) {
-        columnOIs.add(PrimitiveObjectInspectorFactory.javaBooleanObjectInspector);
-      } else if (typeName.equals(serdeConstants.TIMESTAMP_TYPE_NAME)) {
-        columnOIs.add(PrimitiveObjectInspectorFactory.javaTimestampObjectInspector);
-      } else if (typeName.equals(serdeConstants.DATE_TYPE_NAME)) {
-        columnOIs.add(PrimitiveObjectInspectorFactory.javaDateObjectInspector);
-      } else if (typeName.equals(serdeConstants.DECIMAL_TYPE_NAME)) {
-        columnOIs.add(PrimitiveObjectInspectorFactory.javaHiveDecimalObjectInspector);
-      }  else if (typeInfo instanceof PrimitiveTypeInfo
-          &&
-          ((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory() == PrimitiveCategory.VARCHAR) {
-        VarcharTypeParams varcharParams = (VarcharTypeParams)
-            ParameterizedPrimitiveTypeUtils.getTypeParamsFromTypeInfo(typeInfo);
-        columnOIs.add(PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(
-            (PrimitiveTypeInfo) typeInfo));
+      if (typeInfo instanceof PrimitiveTypeInfo) {
+        PrimitiveTypeInfo pti = (PrimitiveTypeInfo) columnTypes.get(c);
+        AbstractPrimitiveJavaObjectInspector oi = 
+            PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(pti);
+        columnOIs.add(oi);
       } else {
-         throw new SerDeException(getClass().getName()
-         + " doesn't allow column [" + c + "] named "
-         + columnNames.get(c) + " with type " + columnTypes.get(c));
-       }
+        throw new SerDeException(getClass().getName()
+            + " doesn't allow column [" + c + "] named "
+            + columnNames.get(c) + " with type " + columnTypes.get(c));
+      }
      }
 
     // StandardStruct uses ArrayList to store the row.
@@ -262,12 +235,8 @@ public Object deserialize(Writable blob) throws SerDeException {
           HiveDecimal bd;
           bd = new HiveDecimal(t);
           row.set(c, bd);
-        } else if (typeInfo instanceof PrimitiveTypeInfo
-            &&
-            ((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory() == PrimitiveCategory.VARCHAR) {
-          VarcharTypeParams varcharParams = (VarcharTypeParams)
-              ParameterizedPrimitiveTypeUtils.getTypeParamsFromTypeInfo(typeInfo);
-          HiveVarchar hv = new HiveVarchar(t, varcharParams != null ? varcharParams.length : -1);
+        } else if (typeInfo instanceof VarcharTypeInfo) {
+          HiveVarchar hv = new HiveVarchar(t, ((VarcharTypeInfo)typeInfo).getLength());
           row.set(c, hv);
         }
       } catch (RuntimeException e) {
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroObjectInspectorGenerator.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroObjectInspectorGenerator.java
index 9183858..46cdb4f 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroObjectInspectorGenerator.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroObjectInspectorGenerator.java
@@ -17,6 +17,9 @@
  */
 package org.apache.hadoop.hive.serde2.avro;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import org.apache.avro.Schema;
 import org.apache.hadoop.hive.serde2.SerDeException;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
@@ -25,15 +28,11 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
 import org.apache.hadoop.hive.serde2.typeinfo.ListTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.MapTypeInfo;
-import org.apache.hadoop.hive.serde2.typeinfo.ParameterizedPrimitiveTypeUtils;
 import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.StructTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.UnionTypeInfo;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * An AvroObjectInspectorGenerator takes an Avro schema and creates the three
  * data structures Hive needs to work with Avro-encoded data:
@@ -56,9 +55,10 @@ public AvroObjectInspectorGenerator(Schema schema) throws SerDeException {
   }
 
   private void verifySchemaIsARecord(Schema schema) throws SerDeException {
-    if(!schema.getType().equals(Schema.Type.RECORD))
+    if(!schema.getType().equals(Schema.Type.RECORD)) {
       throw new AvroSerdeException("Schema for table must be of type RECORD. " +
           "Received type: " + schema.getType());
+    }
   }
 
   public List<String> getColumnNames() {
@@ -86,8 +86,9 @@ private ObjectInspector createObjectInspector() throws SerDeException {
   private ObjectInspector createObjectInspectorWorker(TypeInfo ti) throws SerDeException {
     // We don't need to do the check for U[T,Null] here because we'll give the real type
     // at deserialization and the object inspector will never see the actual union.
-    if(!supportedCategories(ti))
+    if(!supportedCategories(ti)) {
       throw new AvroSerdeException("Don't yet support this type: " + ti);
+    }
     ObjectInspector result;
     switch(ti.getCategory()) {
       case PRIMITIVE:
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/binarysortable/BinarySortableSerDe.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/binarysortable/BinarySortableSerDe.java
index a206023..5b18c8f 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/binarysortable/BinarySortableSerDe.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/binarysortable/BinarySortableSerDe.java
@@ -20,8 +20,6 @@
 
 import java.io.IOException;
 import java.math.BigInteger;
-import java.nio.ByteBuffer;
-import java.nio.charset.CharacterCodingException;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -33,7 +31,6 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.hive.common.type.HiveVarchar;
 import org.apache.hadoop.hive.common.type.HiveDecimal;
 import org.apache.hadoop.hive.serde.serdeConstants;
 import org.apache.hadoop.hive.serde2.AbstractSerDe;
@@ -42,8 +39,8 @@
 import org.apache.hadoop.hive.serde2.io.ByteWritable;
 import org.apache.hadoop.hive.serde2.io.DateWritable;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
-import org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;
 import org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;
+import org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;
 import org.apache.hadoop.hive.serde2.io.ShortWritable;
 import org.apache.hadoop.hive.serde2.io.TimestampWritable;
 import org.apache.hadoop.hive.serde2.objectinspector.ListObjectInspector;
@@ -60,24 +57,22 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.DateObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.DoubleObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.FloatObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.HiveVarcharObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.HiveDecimalObjectInspector;
+import org.apache.hadoop.hive.serde2.objectinspector.primitive.HiveVarcharObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.IntObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.LongObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.ShortObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.StringObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;
-import org.apache.hadoop.hive.serde2.typeinfo.ParameterizedPrimitiveTypeUtils.HiveVarcharSerDeHelper;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
 import org.apache.hadoop.hive.serde2.typeinfo.ListTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.MapTypeInfo;
-import org.apache.hadoop.hive.serde2.typeinfo.ParameterizedPrimitiveTypeUtils;
 import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.StructTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
 import org.apache.hadoop.hive.serde2.typeinfo.UnionTypeInfo;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 import org.apache.hadoop.io.BooleanWritable;
 import org.apache.hadoop.io.BytesWritable;
 import org.apache.hadoop.io.FloatWritable;
@@ -531,11 +526,7 @@ private static int deserializeInt(InputByteBuffer buffer, boolean invert) throws
   }
 
   static int getVarcharMaxLength(TypeInfo type) {
-    VarcharTypeParams typeParams = (VarcharTypeParams) ((PrimitiveTypeInfo) type).getTypeParams();
-    if (typeParams != null ) {
-      return typeParams.length;
-    }
-    return -1;
+    return ((VarcharTypeInfo)type).getLength();
   }
 
   static Text deserializeText(InputByteBuffer buffer, boolean invert, Text r)
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/dynamic_type/DynamicSerDe.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/dynamic_type/DynamicSerDe.java
index ac81ab8..6f344bb 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/dynamic_type/DynamicSerDe.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/dynamic_type/DynamicSerDe.java
@@ -38,7 +38,6 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
 import org.apache.hadoop.hive.serde2.thrift.ConfigurableTProtocol;
 import org.apache.hadoop.hive.serde2.thrift.TReflectionUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.ParameterizedPrimitiveTypeUtils;
 import org.apache.hadoop.io.BytesWritable;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.io.Writable;
@@ -74,6 +73,7 @@
 
   TIOStreamTransport tios;
 
+  @Override
   public void initialize(Configuration job, Properties tbl) throws SerDeException {
     try {
 
@@ -146,6 +146,7 @@ public void initialize(Configuration job, Properties tbl) throws SerDeException 
 
   Object deserializeReuse = null;
 
+  @Override
   public Object deserialize(Writable field) throws SerDeException {
     try {
       if (field instanceof Text) {
@@ -177,7 +178,7 @@ public static ObjectInspector dynamicSerDeStructBaseToObjectInspector(
     } else if (bt.isPrimitive()) {
       PrimitiveTypeEntry pte = PrimitiveObjectInspectorUtils
           .getTypeEntryFromPrimitiveJavaClass(bt.getRealType());
-      return PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(pte);
+      return PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(pte.primitiveCategory);
     } else {
       // Must be a struct
       DynamicSerDeStructBase btStruct = (DynamicSerDeStructBase) bt;
@@ -196,16 +197,19 @@ public static ObjectInspector dynamicSerDeStructBaseToObjectInspector(
     }
   }
 
+  @Override
   public ObjectInspector getObjectInspector() throws SerDeException {
     return dynamicSerDeStructBaseToObjectInspector(bt);
   }
 
+  @Override
   public Class<? extends Writable> getSerializedClass() {
     return BytesWritable.class;
   }
 
   BytesWritable ret = new BytesWritable();
 
+  @Override
   public Writable serialize(Object obj, ObjectInspector objInspector) throws SerDeException {
     try {
       bos_.reset();
@@ -220,6 +224,7 @@ public Writable serialize(Object obj, ObjectInspector objInspector) throws SerDe
   }
 
 
+  @Override
   public SerDeStats getSerDeStats() {
     // no support for statistics
     return null;
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyFactory.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyFactory.java
index 67f032c..12baa34 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyFactory.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyFactory.java
@@ -54,7 +54,6 @@
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
-import org.apache.hadoop.hive.serde2.typeinfo.BaseTypeParams;
 import org.apache.hadoop.hive.serde2.typeinfo.ListTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.MapTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
@@ -219,7 +218,6 @@ public static ObjectInspector createLazyObjectInspector(TypeInfo typeInfo,
     ObjectInspector.Category c = typeInfo.getCategory();
     switch (c) {
     case PRIMITIVE:
-      BaseTypeParams typeParams = ((PrimitiveTypeInfo)typeInfo).getTypeParams();
       return LazyPrimitiveObjectInspectorFactory.getLazyObjectInspector(
           (PrimitiveTypeInfo) typeInfo, escaped, escapeChar);
     case MAP:
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyHiveVarchar.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyHiveVarchar.java
index 1286cba..bc8d41e 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyHiveVarchar.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyHiveVarchar.java
@@ -23,7 +23,7 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;
 import org.apache.hadoop.hive.serde2.lazy.objectinspector.primitive.LazyHiveVarcharObjectInspector;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 import org.apache.hadoop.io.Text;
 
 /**
@@ -39,11 +39,7 @@
 
   public LazyHiveVarchar(LazyHiveVarcharObjectInspector oi) {
     super(oi);
-    VarcharTypeParams typeParams = (VarcharTypeParams)oi.getTypeParams();
-    if (typeParams == null) {
-      throw new RuntimeException("varchar type used without type params");
-    }
-    maxLength = typeParams.getLength();
+    maxLength = ((VarcharTypeInfo)oi.getTypeInfo()).getLength();
     data = new HiveVarcharWritable();
   }
 
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyUtils.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyUtils.java
index ec91717..ede782c 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyUtils.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyUtils.java
@@ -38,6 +38,7 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.BinaryObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.BooleanObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.ByteObjectInspector;
+import org.apache.hadoop.hive.serde2.objectinspector.primitive.DateObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.DoubleObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.FloatObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.HiveVarcharObjectInspector;
@@ -45,7 +46,6 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.LongObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.ShortObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.StringObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.DateObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
 import org.apache.hadoop.io.BytesWritable;
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/AbstractPrimitiveLazyObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/AbstractPrimitiveLazyObjectInspector.java
index 29c8528..1c0405f 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/AbstractPrimitiveLazyObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/AbstractPrimitiveLazyObjectInspector.java
@@ -19,7 +19,7 @@
 
 import org.apache.hadoop.hive.serde2.lazy.LazyPrimitive;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
+import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 import org.apache.hadoop.io.Writable;
 
 /**
@@ -31,8 +31,8 @@
   protected AbstractPrimitiveLazyObjectInspector() {
     super();
   }
-  protected AbstractPrimitiveLazyObjectInspector(PrimitiveTypeEntry typeEntry) {
-    super(typeEntry);
+  protected AbstractPrimitiveLazyObjectInspector(PrimitiveTypeInfo typeInfo) {
+    super(typeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyBinaryObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyBinaryObjectInspector.java
index dbd60f7..df88981 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyBinaryObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyBinaryObjectInspector.java
@@ -21,7 +21,7 @@
 import org.apache.hadoop.hive.serde2.lazy.LazyBinary;
 import org.apache.hadoop.hive.serde2.lazy.LazyUtils;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.BinaryObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.BytesWritable;
 
 public class LazyBinaryObjectInspector extends
@@ -29,7 +29,7 @@
     BinaryObjectInspector {
 
   public LazyBinaryObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.binaryTypeEntry);
+    super(TypeInfoFactory.binaryTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyBooleanObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyBooleanObjectInspector.java
index 954f1d9..2cf7362 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyBooleanObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyBooleanObjectInspector.java
@@ -19,7 +19,7 @@
 
 import org.apache.hadoop.hive.serde2.lazy.LazyBoolean;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.BooleanObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.BooleanWritable;
 
 /**
@@ -30,7 +30,7 @@
     BooleanObjectInspector {
 
   LazyBooleanObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.booleanTypeEntry);
+    super(TypeInfoFactory.booleanTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyByteObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyByteObjectInspector.java
index 57c5169..186aaa0 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyByteObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyByteObjectInspector.java
@@ -20,7 +20,7 @@
 import org.apache.hadoop.hive.serde2.io.ByteWritable;
 import org.apache.hadoop.hive.serde2.lazy.LazyByte;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.ByteObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 /**
  * A WritableByteObjectInspector inspects a ByteWritable Object.
@@ -30,7 +30,7 @@
     ByteObjectInspector {
 
   LazyByteObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.byteTypeEntry);
+    super(TypeInfoFactory.byteTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyDateObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyDateObjectInspector.java
index 679e5ea..032baed 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyDateObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyDateObjectInspector.java
@@ -22,7 +22,7 @@
 import org.apache.hadoop.hive.serde2.io.DateWritable;
 import org.apache.hadoop.hive.serde2.lazy.LazyDate;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.DateObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 /**
  * A WritableDateObjectInspector inspects a DateWritable Object.
@@ -32,7 +32,7 @@
     implements DateObjectInspector {
 
   protected LazyDateObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.dateTypeEntry);
+    super(TypeInfoFactory.dateTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyDoubleObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyDoubleObjectInspector.java
index 675333a..11f409d 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyDoubleObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyDoubleObjectInspector.java
@@ -20,7 +20,7 @@
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
 import org.apache.hadoop.hive.serde2.lazy.LazyDouble;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.DoubleObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 /**
  * A WritableDoubleObjectInspector inspects a DoubleWritable Object.
@@ -30,7 +30,7 @@
     DoubleObjectInspector {
 
   LazyDoubleObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.doubleTypeEntry);
+    super(TypeInfoFactory.doubleTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyFloatObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyFloatObjectInspector.java
index 648b629..18f7287 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyFloatObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyFloatObjectInspector.java
@@ -19,7 +19,7 @@
 
 import org.apache.hadoop.hive.serde2.lazy.LazyFloat;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.FloatObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.FloatWritable;
 
 /**
@@ -30,7 +30,7 @@
     FloatObjectInspector {
 
   LazyFloatObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.floatTypeEntry);
+    super(TypeInfoFactory.floatTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyHiveDecimalObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyHiveDecimalObjectInspector.java
index 564a1aa..5618d0c 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyHiveDecimalObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyHiveDecimalObjectInspector.java
@@ -22,14 +22,14 @@
 import org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;
 import org.apache.hadoop.hive.serde2.lazy.LazyHiveDecimal;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.HiveDecimalObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 public class LazyHiveDecimalObjectInspector
     extends AbstractPrimitiveLazyObjectInspector<HiveDecimalWritable>
     implements HiveDecimalObjectInspector {
 
   protected LazyHiveDecimalObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.decimalTypeEntry);
+    super(TypeInfoFactory.decimalTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyHiveVarcharObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyHiveVarcharObjectInspector.java
index f72cc03..2267e83 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyHiveVarcharObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyHiveVarcharObjectInspector.java
@@ -22,20 +22,19 @@
 import org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;
 import org.apache.hadoop.hive.serde2.lazy.LazyHiveVarchar;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.HiveVarcharObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
-import org.apache.hadoop.hive.serde2.typeinfo.ParameterizedPrimitiveTypeUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharUtils;
 
 public class LazyHiveVarcharObjectInspector
     extends AbstractPrimitiveLazyObjectInspector<HiveVarcharWritable>
     implements HiveVarcharObjectInspector {
 
-  public LazyHiveVarcharObjectInspector(PrimitiveTypeEntry typeEntry) {
-    super(typeEntry);
-    if (typeEntry.primitiveCategory != PrimitiveCategory.VARCHAR) {
-      throw new RuntimeException(
-          "TypeEntry of type varchar expected, got " + typeEntry.primitiveCategory);
-    }
+  // no-arg ctor required for Kyro
+  public LazyHiveVarcharObjectInspector() {
+  }
+
+  public LazyHiveVarcharObjectInspector(VarcharTypeInfo typeInfo) {
+    super(typeInfo);
   }
 
   @Override
@@ -56,10 +55,9 @@ public HiveVarchar getPrimitiveJavaObject(Object o) {
     }
 
     HiveVarchar ret = ((LazyHiveVarchar) o).getWritableObject().getHiveVarchar();
-    VarcharTypeParams typeParams = (VarcharTypeParams)getTypeParams();
-    if (!ParameterizedPrimitiveTypeUtils.doesPrimitiveMatchTypeParams(
-        ret, typeParams)) {
-      HiveVarchar newValue = new HiveVarchar(ret, typeParams.length);
+    if (!VarcharUtils.doesPrimitiveMatchTypeParams(
+        ret, (VarcharTypeInfo)typeInfo)) {
+      HiveVarchar newValue = new HiveVarchar(ret, ((VarcharTypeInfo)typeInfo).getLength());
       return newValue;
     }
     return ret;
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyIntObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyIntObjectInspector.java
index 81f6f05..876aa3e 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyIntObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyIntObjectInspector.java
@@ -19,7 +19,7 @@
 
 import org.apache.hadoop.hive.serde2.lazy.LazyInteger;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.IntObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.IntWritable;
 
 /**
@@ -30,7 +30,7 @@
     IntObjectInspector {
 
   LazyIntObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.intTypeEntry);
+    super(TypeInfoFactory.intTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyLongObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyLongObjectInspector.java
index 9455fbf..a47e584 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyLongObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyLongObjectInspector.java
@@ -19,7 +19,7 @@
 
 import org.apache.hadoop.hive.serde2.lazy.LazyLong;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.LongObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.LongWritable;
 
 /**
@@ -30,7 +30,7 @@
     LongObjectInspector {
 
   LazyLongObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.longTypeEntry);
+    super(TypeInfoFactory.longTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyPrimitiveObjectInspectorFactory.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyPrimitiveObjectInspectorFactory.java
index e28eef7..6f03979 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyPrimitiveObjectInspectorFactory.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyPrimitiveObjectInspectorFactory.java
@@ -20,14 +20,13 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.Map;
 
-import org.apache.hadoop.hive.serde2.SerDeException;
-import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
+import org.apache.hadoop.hive.serde.serdeConstants;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
-import org.apache.hadoop.hive.serde2.typeinfo.BaseTypeParams;
-import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeSpec;
+import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 
 /**
  * LazyPrimitiveObjectInspectorFactory is the primary way to create new
@@ -67,115 +66,88 @@
       new LazyBinaryObjectInspector();
   public static final LazyHiveDecimalObjectInspector LAZY_BIG_DECIMAL_OBJECT_INSPECTOR =
       new LazyHiveDecimalObjectInspector();
-  public static final LazyHiveVarcharObjectInspector LAZY_VARCHAR_OBJECT_INSPECTOR =
-      new LazyHiveVarcharObjectInspector(PrimitiveObjectInspectorUtils.varcharTypeEntry);
 
-  static HashMap<ArrayList<Object>, LazyStringObjectInspector> cachedLazyStringObjectInspector =
-      new HashMap<ArrayList<Object>, LazyStringObjectInspector>();
-
-  public static LazyStringObjectInspector getLazyStringObjectInspector(
-      boolean escaped, byte escapeChar) {
-    ArrayList<Object> signature = new ArrayList<Object>();
-    signature.add(Boolean.valueOf(escaped));
-    signature.add(Byte.valueOf(escapeChar));
-    LazyStringObjectInspector result = cachedLazyStringObjectInspector
-        .get(signature);
-    if (result == null) {
-      result = new LazyStringObjectInspector(escaped, escapeChar);
-      cachedLazyStringObjectInspector.put(signature, result);
-    }
-    return result;
+  private LazyPrimitiveObjectInspectorFactory() {
+    // prevent instantiation
   }
 
-  static PrimitiveObjectInspectorUtils.ParameterizedObjectInspectorMap
-    cachedParameterizedLazyObjectInspectors =
-      new PrimitiveObjectInspectorUtils.ParameterizedObjectInspectorMap();
-
-  public static PrimitiveObjectInspector getParameterizedObjectInspector(
-      PrimitiveTypeSpec typeSpec) {
-    PrimitiveCategory primitiveCategory = typeSpec.getPrimitiveCategory();
-    BaseTypeParams typeParams = typeSpec.getTypeParams();
-    PrimitiveObjectInspector poi =
-        cachedParameterizedLazyObjectInspectors.getObjectInspector(typeSpec);
-    if (poi == null) {
-      // Object inspector hasn't been cached for this type/params yet, create now
-      switch (primitiveCategory) {
-        case VARCHAR:
-          PrimitiveTypeEntry typeEntry = PrimitiveObjectInspectorUtils.getTypeEntryFromTypeSpecs(
-              primitiveCategory,
-              typeParams);
-          poi = new LazyHiveVarcharObjectInspector(typeEntry);
-          poi.setTypeParams(typeParams);
-          cachedParameterizedLazyObjectInspectors.setObjectInspector(poi);
-          break;
-
-        default:
-          throw new RuntimeException(
-              "Primitve type " + primitiveCategory + " should not take parameters");
-      }
-    }
+  private static HashMap<ArrayList<Object>, LazyStringObjectInspector> cachedLazyStringObjectInspector =
+      new HashMap<ArrayList<Object>, LazyStringObjectInspector>();
 
-    return poi;
+  private static Map<PrimitiveTypeInfo, AbstractPrimitiveLazyObjectInspector<?>>
+     cachedPrimitiveLazyObjectInspectors =
+    new HashMap<PrimitiveTypeInfo, AbstractPrimitiveLazyObjectInspector<?>>();
+  static {
+    cachedPrimitiveLazyObjectInspectors.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.BOOLEAN_TYPE_NAME),
+        LAZY_BOOLEAN_OBJECT_INSPECTOR);
+    cachedPrimitiveLazyObjectInspectors.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.TINYINT_TYPE_NAME),
+        LAZY_BYTE_OBJECT_INSPECTOR);
+    cachedPrimitiveLazyObjectInspectors.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.SMALLINT_TYPE_NAME),
+        LAZY_SHORT_OBJECT_INSPECTOR);
+    cachedPrimitiveLazyObjectInspectors.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.INT_TYPE_NAME),
+        LAZY_INT_OBJECT_INSPECTOR);
+    cachedPrimitiveLazyObjectInspectors.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.FLOAT_TYPE_NAME),
+        LAZY_FLOAT_OBJECT_INSPECTOR);
+    cachedPrimitiveLazyObjectInspectors.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.DOUBLE_TYPE_NAME),
+        LAZY_DOUBLE_OBJECT_INSPECTOR);
+    cachedPrimitiveLazyObjectInspectors.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.BIGINT_TYPE_NAME),
+        LAZY_LONG_OBJECT_INSPECTOR);
+    cachedPrimitiveLazyObjectInspectors.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.VOID_TYPE_NAME),
+        LAZY_VOID_OBJECT_INSPECTOR);
+    cachedPrimitiveLazyObjectInspectors.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.DATE_TYPE_NAME),
+        LAZY_DATE_OBJECT_INSPECTOR);
+    cachedPrimitiveLazyObjectInspectors.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.TIMESTAMP_TYPE_NAME),
+        LAZY_TIMESTAMP_OBJECT_INSPECTOR);
+    cachedPrimitiveLazyObjectInspectors.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.DECIMAL_TYPE_NAME),
+        LAZY_BIG_DECIMAL_OBJECT_INSPECTOR);
+    cachedPrimitiveLazyObjectInspectors.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.BINARY_TYPE_NAME),
+        LAZY_BINARY_OBJECT_INSPECTOR);
   }
+
   public static AbstractPrimitiveLazyObjectInspector<?> getLazyObjectInspector(
-      PrimitiveCategory primitiveCategory, boolean escaped, byte escapeChar) {
-    switch (primitiveCategory) {
-    case BOOLEAN:
-      return LAZY_BOOLEAN_OBJECT_INSPECTOR;
-    case BYTE:
-      return LAZY_BYTE_OBJECT_INSPECTOR;
-    case SHORT:
-      return LAZY_SHORT_OBJECT_INSPECTOR;
-    case INT:
-      return LAZY_INT_OBJECT_INSPECTOR;
-    case LONG:
-      return LAZY_LONG_OBJECT_INSPECTOR;
-    case FLOAT:
-      return LAZY_FLOAT_OBJECT_INSPECTOR;
-    case DOUBLE:
-      return LAZY_DOUBLE_OBJECT_INSPECTOR;
+      PrimitiveTypeInfo typeInfo, boolean escaped, byte escapeChar) {
+    PrimitiveCategory primitiveCategory = typeInfo.getPrimitiveCategory();
+
+    switch(primitiveCategory) {
     case STRING:
       return getLazyStringObjectInspector(escaped, escapeChar);
-    case VARCHAR:
-      return LAZY_VARCHAR_OBJECT_INSPECTOR;
-    case BINARY:
-      return LAZY_BINARY_OBJECT_INSPECTOR;
-    case VOID:
-      return LAZY_VOID_OBJECT_INSPECTOR;
-    case DATE:
-      return LAZY_DATE_OBJECT_INSPECTOR;
-    case TIMESTAMP:
-      return LAZY_TIMESTAMP_OBJECT_INSPECTOR;
-    case DECIMAL:
-      return LAZY_BIG_DECIMAL_OBJECT_INSPECTOR;
     default:
-      throw new RuntimeException("Internal error: Cannot find ObjectInspector "
-          + " for " + primitiveCategory);
+     return getLazyObjectInspector(typeInfo);
     }
   }
 
   public static AbstractPrimitiveLazyObjectInspector<?> getLazyObjectInspector(
-      PrimitiveTypeSpec typeSpec, boolean escaped, byte escapeChar) {
-    PrimitiveCategory primitiveCategory = typeSpec.getPrimitiveCategory();
-    BaseTypeParams typeParams = typeSpec.getTypeParams();
-
-    if (typeParams == null) {
-      return getLazyObjectInspector(primitiveCategory, escaped, escapeChar);
-    } else {
-      switch(primitiveCategory) {
-        case VARCHAR:
-          LazyHiveVarcharObjectInspector oi = (LazyHiveVarcharObjectInspector)
-            getParameterizedObjectInspector(typeSpec);
-          return oi;
+      PrimitiveTypeInfo typeInfo) {
+    AbstractPrimitiveLazyObjectInspector<?> poi = cachedPrimitiveLazyObjectInspectors.get(typeInfo);
+    if (poi != null) {
+      return poi;
+    }
 
-        default:
-          throw new RuntimeException("Type " + primitiveCategory + " does not take parameters");
-      }
+    // Object inspector hasn't been cached for this type/params yet, create now
+    switch (typeInfo.getPrimitiveCategory()) {
+    case VARCHAR:
+      poi = new LazyHiveVarcharObjectInspector((VarcharTypeInfo)typeInfo);
+      break;
+    default:
+      throw new RuntimeException(
+          "Primitve type " + typeInfo.getPrimitiveCategory() + " should not take parameters");
     }
+
+    cachedPrimitiveLazyObjectInspectors.put(typeInfo, poi);
+    return poi;
   }
 
-  private LazyPrimitiveObjectInspectorFactory() {
-    // prevent instantiation
+  public static LazyStringObjectInspector getLazyStringObjectInspector(boolean escaped, byte escapeChar) {
+    ArrayList<Object> signature = new ArrayList<Object>();
+    signature.add(Boolean.valueOf(escaped));
+    signature.add(Byte.valueOf(escapeChar));
+    LazyStringObjectInspector result = cachedLazyStringObjectInspector
+        .get(signature);
+    if (result == null) {
+      result = new LazyStringObjectInspector(escaped, escapeChar);
+      cachedLazyStringObjectInspector.put(signature, result);
+    }
+    return result;
   }
 
 }
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyShortObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyShortObjectInspector.java
index 78aba36..166dfd6 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyShortObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyShortObjectInspector.java
@@ -19,8 +19,8 @@
 
 import org.apache.hadoop.hive.serde2.io.ShortWritable;
 import org.apache.hadoop.hive.serde2.lazy.LazyShort;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.ShortObjectInspector;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 /**
  * A WritableShortObjectInspector inspects a ShortWritable Object.
@@ -30,7 +30,7 @@
     ShortObjectInspector {
 
   LazyShortObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.shortTypeEntry);
+    super(TypeInfoFactory.shortTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyStringObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyStringObjectInspector.java
index 2f31d18..28a25d6 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyStringObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyStringObjectInspector.java
@@ -18,8 +18,8 @@
 package org.apache.hadoop.hive.serde2.lazy.objectinspector.primitive;
 
 import org.apache.hadoop.hive.serde2.lazy.LazyString;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.StringObjectInspector;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.Text;
 
 /**
@@ -36,7 +36,7 @@ protected LazyStringObjectInspector() {
   }
 
   LazyStringObjectInspector(boolean escaped, byte escapeChar) {
-    super(PrimitiveObjectInspectorUtils.stringTypeEntry);
+    super(TypeInfoFactory.stringTypeInfo);
     this.escaped = escaped;
     this.escapeChar = escapeChar;
   }
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyTimestampObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyTimestampObjectInspector.java
index cc68e4f..0d15054 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyTimestampObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyTimestampObjectInspector.java
@@ -21,15 +21,15 @@
 
 import org.apache.hadoop.hive.serde2.io.TimestampWritable;
 import org.apache.hadoop.hive.serde2.lazy.LazyTimestamp;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 public class LazyTimestampObjectInspector
     extends AbstractPrimitiveLazyObjectInspector<TimestampWritable>
     implements TimestampObjectInspector {
 
   protected LazyTimestampObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.timestampTypeEntry);
+    super(TypeInfoFactory.timestampTypeInfo);
   }
 
   public Object copyObject(Object o) {
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyVoidObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyVoidObjectInspector.java
index 019653a..d63d75a 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyVoidObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyVoidObjectInspector.java
@@ -17,8 +17,8 @@
  */
 package org.apache.hadoop.hive.serde2.lazy.objectinspector.primitive;
 
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.VoidObjectInspector;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.NullWritable;
 
 /**
@@ -29,7 +29,7 @@
     VoidObjectInspector {
 
   LazyVoidObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.voidTypeEntry);
+    super(TypeInfoFactory.voidTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryHiveVarchar.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryHiveVarchar.java
index fb1b0ea..26df6f3 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryHiveVarchar.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryHiveVarchar.java
@@ -20,7 +20,7 @@
 import org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;
 import org.apache.hadoop.hive.serde2.lazy.ByteArrayRef;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.WritableHiveVarcharObjectInspector;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 import org.apache.hadoop.io.Text;
 
 public class LazyBinaryHiveVarchar extends
@@ -30,12 +30,7 @@
 
   LazyBinaryHiveVarchar(WritableHiveVarcharObjectInspector oi) {
     super(oi);
-    // Check for params
-    VarcharTypeParams typeParams = (VarcharTypeParams)oi.getTypeParams();
-    if (typeParams == null) {
-      throw new RuntimeException("varchar type used without type params");
-    }
-    maxLength = typeParams.length;
+    maxLength = ((VarcharTypeInfo)oi.getTypeInfo()).getLength();
     data = new HiveVarcharWritable();
   }
 
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorConverters.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorConverters.java
index eb307c6..177f142 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorConverters.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorConverters.java
@@ -41,6 +41,7 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.SettableTimestampObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.VoidObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.WritableStringObjectInspector;
+import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 
 /**
  * ObjectInspectorConverters.
@@ -211,8 +212,8 @@ private static ObjectInspector getConvertedOI(
     switch (outputOI.getCategory()) {
     case PRIMITIVE:
       PrimitiveObjectInspector primOutputOI = (PrimitiveObjectInspector) outputOI;
-      return PrimitiveObjectInspectorFactory.
-          getPrimitiveWritableObjectInspector(primOutputOI);
+      return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
+          (PrimitiveTypeInfo)primOutputOI.getTypeInfo());
     case STRUCT:
       StructObjectInspector structOutputOI = (StructObjectInspector) outputOI;
       // create a standard settable struct object inspector
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorUtils.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorUtils.java
index 404ce78..d0fa976 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorUtils.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorUtils.java
@@ -65,6 +65,7 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.StringObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.WritableStringObjectInspector;
+import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
 import org.apache.hadoop.hive.shims.ShimLoader;
 import org.apache.hadoop.io.BytesWritable;
@@ -102,7 +103,8 @@ public static ObjectInspector getWritableObjectInspector(ObjectInspector oi) {
     if (oi.getCategory() == Category.PRIMITIVE) {
       PrimitiveObjectInspector poi = (PrimitiveObjectInspector) oi;
       if (!(poi instanceof AbstractPrimitiveWritableObjectInspector)) {
-        return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(poi);
+        return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
+            (PrimitiveTypeInfo)poi.getTypeInfo());
       }
     }
     return oi;
@@ -126,23 +128,24 @@ public static ObjectInspector getStandardObjectInspector(ObjectInspector oi,
       switch (objectInspectorOption) {
       case DEFAULT: {
         if (poi.preferWritable()) {
-          result = PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(poi);
+          result = PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
+              poi.getTypeInfo());
         } else {
-          result = PrimitiveObjectInspectorFactory
-              .getPrimitiveJavaObjectInspector(poi);
+          result = PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(
+              poi.getTypeInfo());
         }
         break;
       }
       case JAVA: {
-        result = PrimitiveObjectInspectorFactory
-            .getPrimitiveJavaObjectInspector(poi);
+        result = PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(
+            poi.getTypeInfo());
         break;
       }
-      case WRITABLE: {
-        result = PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(poi);
+      case WRITABLE:
+        result = PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
+            poi.getTypeInfo());
         break;
       }
-      }
       break;
     }
     case LIST: {
@@ -971,7 +974,7 @@ public static ConstantObjectInspector getConstantObjectInspector(ObjectInspector
       case PRIMITIVE:
         PrimitiveObjectInspector poi = (PrimitiveObjectInspector) oi;
         return PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(
-            poi, writableValue);
+            poi.getTypeInfo(), writableValue);
       case LIST:
         ListObjectInspector loi = (ListObjectInspector) oi;
         return ObjectInspectorFactory.getStandardConstantListObjectInspector(
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/PrimitiveObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/PrimitiveObjectInspector.java
index 21947ff..22e5ec5 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/PrimitiveObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/PrimitiveObjectInspector.java
@@ -17,14 +17,14 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector;
 
-import org.apache.hadoop.hive.serde2.typeinfo.BaseTypeParams;
-import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeSpec;
+import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
+
 
 /**
  * PrimitiveObjectInspector.
  *
  */
-public interface PrimitiveObjectInspector extends ObjectInspector, PrimitiveTypeSpec {
+public interface PrimitiveObjectInspector extends ObjectInspector {
 
   /**
    * The primitive types supported by Hive.
@@ -34,6 +34,8 @@
     DATE, TIMESTAMP, BINARY, DECIMAL, VARCHAR, UNKNOWN
   };
 
+  public PrimitiveTypeInfo getTypeInfo();
+
   /**
    * Get the primitive category of the PrimitiveObjectInspector.
    */
@@ -78,16 +80,4 @@
    */
   boolean preferWritable();
 
-  /**
-   * If the type has type parameters (such as varchar length, or decimal precision/scale),
-   * then return the parameters for the type.
-   * @return A BaseTypeParams object representing the parameters for the type, or null
-   */
-  BaseTypeParams getTypeParams();
-
-  /**
-   * Set the type parameters for the type.
-   * @param newParams type parameters for the type
-   */
-  void setTypeParams(BaseTypeParams newParams);
 }
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/AbstractPrimitiveJavaObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/AbstractPrimitiveJavaObjectInspector.java
index b2ae767..ff4b2d1 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/AbstractPrimitiveJavaObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/AbstractPrimitiveJavaObjectInspector.java
@@ -17,7 +17,7 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
+import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 
 /**
  * An AbstractJavaPrimitiveObjectInspector for a Java object.
@@ -28,8 +28,8 @@
   protected AbstractPrimitiveJavaObjectInspector() {
     super();
   }
-  protected AbstractPrimitiveJavaObjectInspector(PrimitiveTypeEntry typeEntry) {
-    super(typeEntry);
+  protected AbstractPrimitiveJavaObjectInspector(PrimitiveTypeInfo typeInfo) {
+    super(typeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/AbstractPrimitiveObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/AbstractPrimitiveObjectInspector.java
index af4109b..c19f5aa 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/AbstractPrimitiveObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/AbstractPrimitiveObjectInspector.java
@@ -18,8 +18,7 @@
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
-import org.apache.hadoop.hive.serde2.typeinfo.BaseTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 
 /**
  * An AbstractPrimitiveObjectInspector is based on
@@ -28,7 +27,7 @@
 public abstract class AbstractPrimitiveObjectInspector implements
     PrimitiveObjectInspector {
 
-  protected PrimitiveTypeEntry typeEntry;
+  protected PrimitiveTypeInfo typeInfo;
 
   protected AbstractPrimitiveObjectInspector() {
     super();
@@ -36,8 +35,8 @@ protected AbstractPrimitiveObjectInspector() {
   /**
    * Construct a AbstractPrimitiveObjectInspector.
    */
-  protected AbstractPrimitiveObjectInspector(PrimitiveTypeEntry typeEntry) {
-    this.typeEntry = typeEntry;
+  protected AbstractPrimitiveObjectInspector(PrimitiveTypeInfo typeInfo) {
+    this.typeInfo = typeInfo;
   }
 
   /**
@@ -46,7 +45,7 @@ protected AbstractPrimitiveObjectInspector(PrimitiveTypeEntry typeEntry) {
    */
   @Override
   public Class<?> getJavaPrimitiveClass() {
-    return typeEntry.primitiveJavaClass;
+    return typeInfo.getPrimitiveJavaClass();
   }
 
   /**
@@ -55,7 +54,7 @@ protected AbstractPrimitiveObjectInspector(PrimitiveTypeEntry typeEntry) {
    */
   @Override
   public PrimitiveCategory getPrimitiveCategory() {
-    return typeEntry.primitiveCategory;
+    return typeInfo.getPrimitiveCategory();
   }
 
   /**
@@ -64,7 +63,7 @@ public PrimitiveCategory getPrimitiveCategory() {
    */
   @Override
   public Class<?> getPrimitiveWritableClass() {
-    return typeEntry.primitiveWritableClass;
+    return typeInfo.getPrimitiveWritableClass();
   }
 
   /**
@@ -80,19 +79,11 @@ public Category getCategory() {
    */
   @Override
   public String getTypeName() {
-    return typeEntry.toString();
+    return typeInfo.getTypeName();
   }
 
-  public BaseTypeParams getTypeParams() {
-    return typeEntry.typeParams;
+  public PrimitiveTypeInfo getTypeInfo() {
+    return this.typeInfo;
   }
 
-  public void setTypeParams(BaseTypeParams newParams) {
-    BaseTypeParams typeParams = typeEntry.typeParams;
-    if (typeParams != null && !typeEntry.isParameterized()) {
-      throw new UnsupportedOperationException(
-          "Attempting to add type parameters " + typeParams + " to type " + getTypeName());
-    }
-    typeEntry.typeParams = newParams;
-  }
 }
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/AbstractPrimitiveWritableObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/AbstractPrimitiveWritableObjectInspector.java
index 16daf8f..0b14772 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/AbstractPrimitiveWritableObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/AbstractPrimitiveWritableObjectInspector.java
@@ -17,7 +17,7 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
+import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 
 /**
  * An AbstractWritablePrimitiveObjectInspector for a Writable object.
@@ -29,8 +29,8 @@ protected AbstractPrimitiveWritableObjectInspector() {
     super();
   }
   protected AbstractPrimitiveWritableObjectInspector(
-      PrimitiveTypeEntry typeEntry) {
-    super(typeEntry);
+      PrimitiveTypeInfo typeInfo) {
+    super(typeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaBinaryObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaBinaryObjectInspector.java
index 75a0cad..6746edc 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaBinaryObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaBinaryObjectInspector.java
@@ -3,6 +3,7 @@
 import java.util.Arrays;
 
 import org.apache.hadoop.hive.serde2.lazy.LazyUtils;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.BytesWritable;
 
 /**
@@ -27,7 +28,7 @@
     SettableBinaryObjectInspector {
 
   JavaBinaryObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.binaryTypeEntry);
+    super(TypeInfoFactory.binaryTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaBooleanObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaBooleanObjectInspector.java
index 97bfdac..af27914 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaBooleanObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaBooleanObjectInspector.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.BooleanWritable;
 
 /**
@@ -27,7 +28,7 @@
     SettableBooleanObjectInspector {
 
   JavaBooleanObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.booleanTypeEntry);
+    super(TypeInfoFactory.booleanTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaByteObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaByteObjectInspector.java
index 9c66a4c..5133e8f 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaByteObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaByteObjectInspector.java
@@ -18,6 +18,7 @@
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
 import org.apache.hadoop.hive.serde2.io.ByteWritable;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 /**
  * A JavaByteObjectInspector inspects a Java Byte Object.
@@ -26,7 +27,7 @@
     AbstractPrimitiveJavaObjectInspector implements SettableByteObjectInspector {
 
   JavaByteObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.byteTypeEntry);
+    super(TypeInfoFactory.byteTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaDateObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaDateObjectInspector.java
index e5b4582..5f11b8b 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaDateObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaDateObjectInspector.java
@@ -20,6 +20,7 @@
 import java.sql.Date;
 
 import org.apache.hadoop.hive.serde2.io.DateWritable;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 /**
  * A JavaDateObjectInspector inspects a Java Date Object.
@@ -29,7 +30,7 @@
     implements SettableDateObjectInspector {
 
   protected JavaDateObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.dateTypeEntry);
+    super(TypeInfoFactory.dateTypeInfo);
   }
 
   public DateWritable getPrimitiveWritableObject(Object o) {
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaDoubleObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaDoubleObjectInspector.java
index 666033e..d657f96 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaDoubleObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaDoubleObjectInspector.java
@@ -18,6 +18,7 @@
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 /**
  * A JavaDoubleObjectInspector inspects a Java Double Object.
@@ -27,7 +28,7 @@
     SettableDoubleObjectInspector {
 
   JavaDoubleObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.doubleTypeEntry);
+    super(TypeInfoFactory.doubleTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaFloatObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaFloatObjectInspector.java
index 14db1ae..2c5502c 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaFloatObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaFloatObjectInspector.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.FloatWritable;
 
 /**
@@ -27,7 +28,7 @@
     SettableFloatObjectInspector {
 
   JavaFloatObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.floatTypeEntry);
+    super(TypeInfoFactory.floatTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaHiveDecimalObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaHiveDecimalObjectInspector.java
index d330c5e..92e47fa 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaHiveDecimalObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaHiveDecimalObjectInspector.java
@@ -21,13 +21,14 @@
 
 import org.apache.hadoop.hive.common.type.HiveDecimal;
 import org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 public class JavaHiveDecimalObjectInspector
     extends AbstractPrimitiveJavaObjectInspector
     implements SettableHiveDecimalObjectInspector {
 
   protected JavaHiveDecimalObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.decimalTypeEntry);
+    super(TypeInfoFactory.decimalTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaHiveVarcharObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaHiveVarcharObjectInspector.java
index aece508..590d04b 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaHiveVarcharObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaHiveVarcharObjectInspector.java
@@ -19,20 +19,18 @@
 
 import org.apache.hadoop.hive.common.type.HiveVarchar;
 import org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
-import org.apache.hadoop.hive.serde2.typeinfo.ParameterizedPrimitiveTypeUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharUtils;
 
-public class JavaHiveVarcharObjectInspector
-    extends AbstractPrimitiveJavaObjectInspector
-    implements SettableHiveVarcharObjectInspector {
+public class JavaHiveVarcharObjectInspector extends AbstractPrimitiveJavaObjectInspector
+implements SettableHiveVarcharObjectInspector {
 
-  public JavaHiveVarcharObjectInspector(PrimitiveTypeEntry typeEntry) {
-    super(typeEntry);
-    if (typeEntry.primitiveCategory != PrimitiveCategory.VARCHAR) {
-      throw new RuntimeException(
-          "TypeEntry of type varchar expected, got " + typeEntry.primitiveCategory);
-    }
+  // no-arg ctor required for Kyro serialization
+  public JavaHiveVarcharObjectInspector() {
+  }
+
+  public JavaHiveVarcharObjectInspector(VarcharTypeInfo typeInfo) {
+    super(typeInfo);
   }
 
   @Override
@@ -41,8 +39,8 @@ public HiveVarchar getPrimitiveJavaObject(Object o) {
       return null;
     }
     HiveVarchar value = (HiveVarchar)o;
-    if (ParameterizedPrimitiveTypeUtils.doesPrimitiveMatchTypeParams(
-        value, (VarcharTypeParams) getTypeParams())) {
+    if (VarcharUtils.doesPrimitiveMatchTypeParams(
+        value, (VarcharTypeInfo)typeInfo)) {
       return value;
     }
     // value needs to be converted to match the type params (length, etc).
@@ -71,8 +69,8 @@ private HiveVarcharWritable getWritableWithParams(HiveVarchar val) {
   @Override
   public Object set(Object o, HiveVarchar value) {
     HiveVarchar setValue = (HiveVarchar)o;
-    if (ParameterizedPrimitiveTypeUtils.doesPrimitiveMatchTypeParams(
-        value, (VarcharTypeParams) getTypeParams())) {
+    if (VarcharUtils.doesPrimitiveMatchTypeParams(
+        value, (VarcharTypeInfo)typeInfo)) {
       setValue.setValue(value);
     } else {
       // Otherwise value may be too long, convert to appropriate value based on params
@@ -96,7 +94,8 @@ public Object create(HiveVarchar value) {
   }
 
   public int getMaxLength() {
-    VarcharTypeParams typeParams = (VarcharTypeParams)getTypeParams();
-    return typeParams != null ? typeParams.length : -1;
+    VarcharTypeInfo ti = (VarcharTypeInfo) typeInfo;
+    return ti.getLength();
   }
+
 }
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaIntObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaIntObjectInspector.java
index 6505080..ebf10a0 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaIntObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaIntObjectInspector.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.IntWritable;
 
 /**
@@ -26,7 +27,7 @@
     AbstractPrimitiveJavaObjectInspector implements SettableIntObjectInspector {
 
   JavaIntObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.intTypeEntry);
+    super(TypeInfoFactory.intTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaLongObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaLongObjectInspector.java
index eb96c63..52a2523 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaLongObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaLongObjectInspector.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.LongWritable;
 
 /**
@@ -26,7 +27,7 @@
     AbstractPrimitiveJavaObjectInspector implements SettableLongObjectInspector {
 
   JavaLongObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.longTypeEntry);
+    super(TypeInfoFactory.longTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaShortObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaShortObjectInspector.java
index ad82b4d..b81376f 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaShortObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaShortObjectInspector.java
@@ -18,6 +18,7 @@
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
 import org.apache.hadoop.hive.serde2.io.ShortWritable;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 /**
  * A JavaShortObjectInspector inspects a Java Short Object.
@@ -27,7 +28,7 @@
     SettableShortObjectInspector {
 
   JavaShortObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.shortTypeEntry);
+    super(TypeInfoFactory.shortTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaStringObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaStringObjectInspector.java
index be7c64a..e4c274f 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaStringObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaStringObjectInspector.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.Text;
 
 /**
@@ -27,7 +28,7 @@
     SettableStringObjectInspector {
 
   JavaStringObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.stringTypeEntry);
+    super(TypeInfoFactory.stringTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaTimestampObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaTimestampObjectInspector.java
index 2e8e266..165ccf7 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaTimestampObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaTimestampObjectInspector.java
@@ -20,13 +20,14 @@
 import java.sql.Timestamp;
 
 import org.apache.hadoop.hive.serde2.io.TimestampWritable;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 public class JavaTimestampObjectInspector
     extends AbstractPrimitiveJavaObjectInspector
     implements SettableTimestampObjectInspector {
 
   protected JavaTimestampObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.timestampTypeEntry);
+    super(TypeInfoFactory.timestampTypeInfo);
   }
 
   public TimestampWritable getPrimitiveWritableObject(Object o) {
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaVoidObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaVoidObjectInspector.java
index 6636aba..4ea3651 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaVoidObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaVoidObjectInspector.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.NullWritable;
 
 /**
@@ -26,7 +27,7 @@
     AbstractPrimitiveJavaObjectInspector implements VoidObjectInspector {
 
   JavaVoidObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.voidTypeEntry);
+    super(TypeInfoFactory.voidTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorConverter.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorConverter.java
index ac105d3..5b3756f 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorConverter.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorConverter.java
@@ -29,7 +29,6 @@
 import org.apache.hadoop.hive.serde2.lazy.LazyLong;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters.Converter;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
 import org.apache.hadoop.io.Text;
 
 /**
@@ -452,7 +451,6 @@ public HiveVarcharConverter(PrimitiveObjectInspector inputOI,
         SettableHiveVarcharObjectInspector outputOI) {
       this.inputOI = inputOI;
       this.outputOI = outputOI;
-      VarcharTypeParams typeParams = (VarcharTypeParams) outputOI.getTypeParams();
 
       // unfortunately we seem to get instances of varchar object inspectors without params
       // when an old-style UDF has an evaluate() method with varchar arguments.
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorFactory.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorFactory.java
index c74f24d..fc0cee6 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorFactory.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorFactory.java
@@ -18,8 +18,12 @@
 
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
+import java.util.EnumMap;
 import java.util.HashMap;
+import java.util.Map;
 
+import org.apache.hadoop.hive.common.type.HiveVarchar;
+import org.apache.hadoop.hive.serde.serdeConstants;
 import org.apache.hadoop.hive.serde2.io.ByteWritable;
 import org.apache.hadoop.hive.serde2.io.DateWritable;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
@@ -30,11 +34,10 @@
 import org.apache.hadoop.hive.serde2.objectinspector.ConstantObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.ParameterizedObjectInspectorMap;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
-import org.apache.hadoop.hive.serde2.typeinfo.BaseTypeParams;
-import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeSpec;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 import org.apache.hadoop.io.BooleanWritable;
 import org.apache.hadoop.io.BytesWritable;
 import org.apache.hadoop.io.FloatWritable;
@@ -54,35 +57,6 @@
  */
 public final class PrimitiveObjectInspectorFactory {
 
-  public static final JavaBooleanObjectInspector javaBooleanObjectInspector =
-      new JavaBooleanObjectInspector();
-  public static final JavaByteObjectInspector javaByteObjectInspector =
-      new JavaByteObjectInspector();
-  public static final JavaShortObjectInspector javaShortObjectInspector =
-      new JavaShortObjectInspector();
-  public static final JavaIntObjectInspector javaIntObjectInspector =
-      new JavaIntObjectInspector();
-  public static final JavaLongObjectInspector javaLongObjectInspector =
-      new JavaLongObjectInspector();
-  public static final JavaFloatObjectInspector javaFloatObjectInspector =
-      new JavaFloatObjectInspector();
-  public static final JavaDoubleObjectInspector javaDoubleObjectInspector =
-      new JavaDoubleObjectInspector();
-  public static final JavaStringObjectInspector javaStringObjectInspector =
-      new JavaStringObjectInspector();
-  public static final JavaHiveVarcharObjectInspector javaHiveVarcharObjectInspector =
-      new JavaHiveVarcharObjectInspector(PrimitiveObjectInspectorUtils.varcharTypeEntry);
-  public static final JavaVoidObjectInspector javaVoidObjectInspector =
-      new JavaVoidObjectInspector();
-  public static final JavaDateObjectInspector javaDateObjectInspector =
-      new JavaDateObjectInspector();
-  public static final JavaTimestampObjectInspector javaTimestampObjectInspector =
-      new JavaTimestampObjectInspector();
-  public static final JavaBinaryObjectInspector javaByteArrayObjectInspector =
-      new JavaBinaryObjectInspector();
-  public static final JavaHiveDecimalObjectInspector javaHiveDecimalObjectInspector =
-      new JavaHiveDecimalObjectInspector();
-
   public static final WritableBooleanObjectInspector writableBooleanObjectInspector =
       new WritableBooleanObjectInspector();
   public static final WritableByteObjectInspector writableByteObjectInspector =
@@ -99,8 +73,6 @@
       new WritableDoubleObjectInspector();
   public static final WritableStringObjectInspector writableStringObjectInspector =
       new WritableStringObjectInspector();
-  public static final WritableHiveVarcharObjectInspector writableHiveVarcharObjectInspector =
-      new WritableHiveVarcharObjectInspector(PrimitiveObjectInspectorUtils.varcharTypeEntry);
   public static final WritableVoidObjectInspector writableVoidObjectInspector =
       new WritableVoidObjectInspector();
   public static final WritableDateObjectInspector writableDateObjectInspector =
@@ -112,85 +84,132 @@
   public static final WritableHiveDecimalObjectInspector writableHiveDecimalObjectInspector =
       new WritableHiveDecimalObjectInspector();
 
-  private static HashMap<PrimitiveCategory, AbstractPrimitiveWritableObjectInspector> cachedPrimitiveWritableInspectorCache =
-      new HashMap<PrimitiveCategory, AbstractPrimitiveWritableObjectInspector>();
+  // Map from PrimitiveTypeInfo to AbstractPrimitiveWritableObjectInspector.
+  private static HashMap<PrimitiveTypeInfo, AbstractPrimitiveWritableObjectInspector> cachedPrimitiveWritableInspectorCache =
+      new HashMap<PrimitiveTypeInfo, AbstractPrimitiveWritableObjectInspector>();
   static {
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.BOOLEAN,
+    cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.BOOLEAN_TYPE_NAME),
         writableBooleanObjectInspector);
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.BYTE,
+    cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.TINYINT_TYPE_NAME),
         writableByteObjectInspector);
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.SHORT,
+    cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.SMALLINT_TYPE_NAME),
         writableShortObjectInspector);
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.INT,
+    cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.INT_TYPE_NAME),
         writableIntObjectInspector);
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.LONG,
+    cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.BIGINT_TYPE_NAME),
         writableLongObjectInspector);
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.FLOAT,
+    cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.FLOAT_TYPE_NAME),
         writableFloatObjectInspector);
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.DOUBLE,
+    cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.DOUBLE_TYPE_NAME),
         writableDoubleObjectInspector);
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.STRING,
+    cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.STRING_TYPE_NAME),
         writableStringObjectInspector);
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.VARCHAR,
-        writableHiveVarcharObjectInspector);
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.VOID,
+    cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.VOID_TYPE_NAME),
         writableVoidObjectInspector);
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.DATE,
+    cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.DATE_TYPE_NAME),
         writableDateObjectInspector);
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.TIMESTAMP,
+    cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.TIMESTAMP_TYPE_NAME),
         writableTimestampObjectInspector);
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.BINARY,
+    cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.BINARY_TYPE_NAME),
         writableBinaryObjectInspector);
-    cachedPrimitiveWritableInspectorCache.put(PrimitiveCategory.DECIMAL,
+    cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.DECIMAL_TYPE_NAME),
         writableHiveDecimalObjectInspector);
   }
 
-  private static HashMap<PrimitiveCategory, AbstractPrimitiveJavaObjectInspector> cachedPrimitiveJavaInspectorCache =
-      new HashMap<PrimitiveCategory, AbstractPrimitiveJavaObjectInspector>();
+  private static Map<PrimitiveCategory, AbstractPrimitiveWritableObjectInspector> primitiveCategoryToWritableOI =
+      new EnumMap<PrimitiveCategory, AbstractPrimitiveWritableObjectInspector>(PrimitiveCategory.class);
+  static {
+    primitiveCategoryToWritableOI.put(PrimitiveCategory.BOOLEAN, writableBooleanObjectInspector);
+    primitiveCategoryToWritableOI.put(PrimitiveCategory.BYTE, writableByteObjectInspector);
+    primitiveCategoryToWritableOI.put(PrimitiveCategory.SHORT, writableShortObjectInspector);
+    primitiveCategoryToWritableOI.put(PrimitiveCategory.INT, writableIntObjectInspector);
+    primitiveCategoryToWritableOI.put(PrimitiveCategory.LONG, writableLongObjectInspector);
+    primitiveCategoryToWritableOI.put(PrimitiveCategory.FLOAT, writableFloatObjectInspector);
+    primitiveCategoryToWritableOI.put(PrimitiveCategory.DOUBLE, writableDoubleObjectInspector);
+    primitiveCategoryToWritableOI.put(PrimitiveCategory.STRING, writableStringObjectInspector);
+    primitiveCategoryToWritableOI.put(PrimitiveCategory.VOID, writableVoidObjectInspector);
+    primitiveCategoryToWritableOI.put(PrimitiveCategory.DATE, writableDateObjectInspector);
+    primitiveCategoryToWritableOI.put(PrimitiveCategory.TIMESTAMP, writableTimestampObjectInspector);
+    primitiveCategoryToWritableOI.put(PrimitiveCategory.BINARY, writableBinaryObjectInspector);
+    primitiveCategoryToWritableOI.put(PrimitiveCategory.DECIMAL, writableHiveDecimalObjectInspector);
+  }
+
+  public static final JavaBooleanObjectInspector javaBooleanObjectInspector =
+      new JavaBooleanObjectInspector();
+  public static final JavaByteObjectInspector javaByteObjectInspector =
+      new JavaByteObjectInspector();
+  public static final JavaShortObjectInspector javaShortObjectInspector =
+      new JavaShortObjectInspector();
+  public static final JavaIntObjectInspector javaIntObjectInspector =
+      new JavaIntObjectInspector();
+  public static final JavaLongObjectInspector javaLongObjectInspector =
+      new JavaLongObjectInspector();
+  public static final JavaFloatObjectInspector javaFloatObjectInspector =
+      new JavaFloatObjectInspector();
+  public static final JavaDoubleObjectInspector javaDoubleObjectInspector =
+      new JavaDoubleObjectInspector();
+  public static final JavaStringObjectInspector javaStringObjectInspector =
+      new JavaStringObjectInspector();
+  public static final JavaVoidObjectInspector javaVoidObjectInspector =
+      new JavaVoidObjectInspector();
+  public static final JavaDateObjectInspector javaDateObjectInspector =
+      new JavaDateObjectInspector();
+  public static final JavaTimestampObjectInspector javaTimestampObjectInspector =
+      new JavaTimestampObjectInspector();
+  public static final JavaBinaryObjectInspector javaByteArrayObjectInspector =
+      new JavaBinaryObjectInspector();
+  public static final JavaHiveDecimalObjectInspector javaHiveDecimalObjectInspector =
+      new JavaHiveDecimalObjectInspector();
+
+  // Map from PrimitiveTypeInfo to AbstractPrimitiveJavaObjectInspector.
+  private static HashMap<PrimitiveTypeInfo, AbstractPrimitiveJavaObjectInspector> cachedPrimitiveJavaInspectorCache =
+      new HashMap<PrimitiveTypeInfo, AbstractPrimitiveJavaObjectInspector>();
   static {
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.BOOLEAN,
+    cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.BOOLEAN_TYPE_NAME),
         javaBooleanObjectInspector);
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.BYTE,
+    cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.TINYINT_TYPE_NAME),
         javaByteObjectInspector);
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.SHORT,
+    cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.SMALLINT_TYPE_NAME),
         javaShortObjectInspector);
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.INT,
+    cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.INT_TYPE_NAME),
         javaIntObjectInspector);
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.LONG,
+    cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.BIGINT_TYPE_NAME),
         javaLongObjectInspector);
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.FLOAT,
+    cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.FLOAT_TYPE_NAME),
         javaFloatObjectInspector);
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.DOUBLE,
+    cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.DOUBLE_TYPE_NAME),
         javaDoubleObjectInspector);
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.STRING,
+    cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.STRING_TYPE_NAME),
         javaStringObjectInspector);
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.VARCHAR,
-        javaHiveVarcharObjectInspector);
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.VOID,
+    cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.VOID_TYPE_NAME),
         javaVoidObjectInspector);
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.DATE,
+    cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.DATE_TYPE_NAME),
         javaDateObjectInspector);
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.TIMESTAMP,
+    cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.TIMESTAMP_TYPE_NAME),
         javaTimestampObjectInspector);
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.BINARY,
+    cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.BINARY_TYPE_NAME),
         javaByteArrayObjectInspector);
-    cachedPrimitiveJavaInspectorCache.put(PrimitiveCategory.DECIMAL,
+    cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.DECIMAL_TYPE_NAME),
         javaHiveDecimalObjectInspector);
   }
 
-  /**
-   * Cached Writable object inspectors for parameterized primitive types.
-   */
-  private static ParameterizedObjectInspectorMap
-      cachedParameterizedPrimitiveWritableObjectInspectorCache =
-          new ParameterizedObjectInspectorMap();
-
-  /**
-   * Cached Java object inspectors for parameterized primitive types.
-   */
-  private static ParameterizedObjectInspectorMap
-  cachedParameterizedPrimitiveJavaObjectInspectorCache =
-      new ParameterizedObjectInspectorMap();
+  private static Map<PrimitiveCategory, AbstractPrimitiveJavaObjectInspector> primitiveCategoryToJavaOI =
+      new EnumMap<PrimitiveCategory, AbstractPrimitiveJavaObjectInspector>(PrimitiveCategory.class);
+  static {
+    primitiveCategoryToJavaOI.put(PrimitiveCategory.BOOLEAN, javaBooleanObjectInspector);
+    primitiveCategoryToJavaOI.put(PrimitiveCategory.BYTE, javaByteObjectInspector);
+    primitiveCategoryToJavaOI.put(PrimitiveCategory.SHORT, javaShortObjectInspector);
+    primitiveCategoryToJavaOI.put(PrimitiveCategory.INT, javaIntObjectInspector);
+    primitiveCategoryToJavaOI.put(PrimitiveCategory.LONG, javaLongObjectInspector);
+    primitiveCategoryToJavaOI.put(PrimitiveCategory.FLOAT, javaFloatObjectInspector);
+    primitiveCategoryToJavaOI.put(PrimitiveCategory.DOUBLE, javaDoubleObjectInspector);
+    primitiveCategoryToJavaOI.put(PrimitiveCategory.STRING, javaStringObjectInspector);
+    primitiveCategoryToJavaOI.put(PrimitiveCategory.VOID, javaVoidObjectInspector);
+    primitiveCategoryToJavaOI.put(PrimitiveCategory.DATE, javaDateObjectInspector);
+    primitiveCategoryToJavaOI.put(PrimitiveCategory.TIMESTAMP, javaTimestampObjectInspector);
+    primitiveCategoryToJavaOI.put(PrimitiveCategory.BINARY, javaByteArrayObjectInspector);
+    primitiveCategoryToJavaOI.put(PrimitiveCategory.DECIMAL, javaHiveDecimalObjectInspector);
+  }
 
   /**
    * Returns the PrimitiveWritableObjectInspector for the PrimitiveCategory.
@@ -199,75 +218,38 @@
    */
   public static AbstractPrimitiveWritableObjectInspector getPrimitiveWritableObjectInspector(
       PrimitiveCategory primitiveCategory) {
-    AbstractPrimitiveWritableObjectInspector result =
-        cachedPrimitiveWritableInspectorCache.get(primitiveCategory);
+    AbstractPrimitiveWritableObjectInspector result = primitiveCategoryToWritableOI.get(primitiveCategory);
+
     if (result == null) {
       throw new RuntimeException("Internal error: Cannot find ObjectInspector "
           + " for " + primitiveCategory);
     }
+
     return result;
   }
 
   /**
-   * Returns the PrimitiveWritableObjectInspector for the PrimitiveCategory, with option to
-   * pass in parameters for the primitive type (such as char(10)).
-   * Ideally this method should be used over the method without type parameters,
-   * and the type parameters (or lack of parameters) can be determined from
-   * the input ObjectInspector, TypeInfo, or TypeEntry.
-   * However there are situations where it is not possible to get any information about
-   * type parameters, such as when getting an object inspector based on reflection from
-   * the java or primitive class.
-   * @param primitiveCategory    Primitve type category
-   * @param primitiveTypeParams  Type parameters for the primitve type.
-   *        Set to null if there are no type parameters
-   * @return
+   * Returns the PrimitiveWritableObjectInspector for the given type info
+   * @param PrimitiveTypeInfo    PrimitiveTypeInfo instance
+   * @return AbstractPrimitiveWritableObjectInspector instance
    */
   public static AbstractPrimitiveWritableObjectInspector getPrimitiveWritableObjectInspector(
-      PrimitiveTypeSpec typeSpec) {
-    PrimitiveCategory primitiveCategory = typeSpec.getPrimitiveCategory();
-    BaseTypeParams primitiveTypeParams = typeSpec.getTypeParams();
+      PrimitiveTypeInfo typeInfo) {
+    AbstractPrimitiveWritableObjectInspector result = cachedPrimitiveWritableInspectorCache.get(typeInfo);
+    if (result != null) {
+      return result;
+    }
 
-    if (primitiveTypeParams == null) {
-      // No type params, just search the unparameterized types
-      return getPrimitiveWritableObjectInspector(primitiveCategory);
-    } else {
-      // Check our cached set of parameterized object inspectors for the primitive category,
-      // or create a new object inspector if one doesn't exist yet.
-      PrimitiveObjectInspector oi =
-          cachedParameterizedPrimitiveWritableObjectInspectorCache.getObjectInspector(
-              typeSpec);
-      if (oi == null) {
-        // Do a bit of validation - not all primitive types use parameters.
-        switch (primitiveCategory) {
-          case VARCHAR:
-            PrimitiveTypeEntry typeEntry = PrimitiveObjectInspectorUtils.getTypeEntryFromTypeSpecs(
-                primitiveCategory,
-                primitiveTypeParams);
-            oi = new WritableHiveVarcharObjectInspector(typeEntry);
-            oi.setTypeParams(primitiveTypeParams);
-            cachedParameterizedPrimitiveWritableObjectInspectorCache.setObjectInspector(oi);
-            break;
-          default:
-            throw new RuntimeException(
-                "Primitve type " + primitiveCategory + " should not take parameters");
-        }
-      }
-      return (AbstractPrimitiveWritableObjectInspector)oi;
+    switch (typeInfo.getPrimitiveCategory()) {
+    case VARCHAR:
+      result = new WritableHiveVarcharObjectInspector((VarcharTypeInfo)typeInfo);
+      break;
+      default:
+        throw new RuntimeException("Failed to create WritableHiveVarcharObjectInspector for " + typeInfo );
     }
-  }
 
-  /**
-   * Returns a PrimitiveWritableObjectInspector which implements ConstantObjectInspector
-   * for the PrimitiveCategory.
-   *
-   * @param primitiveCategory
-   * @param value
-   */
-  public static ConstantObjectInspector getPrimitiveWritableConstantObjectInspector(
-      PrimitiveCategory primitiveCategory, Object value) {
-    return getPrimitiveWritableConstantObjectInspector(
-        PrimitiveObjectInspectorUtils.getTypeEntryFromTypeSpecs(primitiveCategory, null),
-        value);
+    cachedPrimitiveWritableInspectorCache.put(typeInfo, result);
+    return result;
   }
 
   /**
@@ -275,15 +257,11 @@ public static ConstantObjectInspector getPrimitiveWritableConstantObjectInspecto
    * for the PrimitiveCategory.
    *
    * @param primitiveCategory
-   * @param typeParams  Type qualifiers for the type (if applicable)
    * @param value
    */
   public static ConstantObjectInspector getPrimitiveWritableConstantObjectInspector(
-      PrimitiveTypeSpec typeSpecs, Object value) {
-    PrimitiveCategory primitiveCategory = typeSpecs.getPrimitiveCategory();
-    BaseTypeParams typeParams = typeSpecs.getTypeParams();
-
-    switch (primitiveCategory) {
+      PrimitiveTypeInfo typeInfo, Object value) {
+    switch (typeInfo.getPrimitiveCategory()) {
     case BOOLEAN:
       return new WritableConstantBooleanObjectInspector((BooleanWritable)value);
     case BYTE:
@@ -301,8 +279,8 @@ public static ConstantObjectInspector getPrimitiveWritableConstantObjectInspecto
     case STRING:
       return new WritableConstantStringObjectInspector((Text)value);
     case VARCHAR:
-      return new WritableConstantHiveVarcharObjectInspector((HiveVarcharWritable)value,
-          (VarcharTypeParams) typeParams);
+      return new WritableConstantHiveVarcharObjectInspector((VarcharTypeInfo)typeInfo,
+          (HiveVarcharWritable)value);
     case DATE:
       return new WritableConstantDateObjectInspector((DateWritable)value);
     case TIMESTAMP:
@@ -315,7 +293,7 @@ public static ConstantObjectInspector getPrimitiveWritableConstantObjectInspecto
       return new WritableVoidObjectInspector();
     default:
       throw new RuntimeException("Internal error: Cannot find "
-        + "ConstantObjectInspector for " + primitiveCategory);
+        + "ConstantObjectInspector for " + typeInfo);
     }
   }
 
@@ -326,62 +304,40 @@ public static ConstantObjectInspector getPrimitiveWritableConstantObjectInspecto
    */
   public static AbstractPrimitiveJavaObjectInspector getPrimitiveJavaObjectInspector(
       PrimitiveCategory primitiveCategory) {
-    AbstractPrimitiveJavaObjectInspector result =
-        cachedPrimitiveJavaInspectorCache.get(primitiveCategory);
+    AbstractPrimitiveJavaObjectInspector result = primitiveCategoryToJavaOI.get(primitiveCategory);
+
     if (result == null) {
       throw new RuntimeException("Internal error: Cannot find ObjectInspector "
           + " for " + primitiveCategory);
     }
+
     return result;
   }
 
   /**
-   * Returns the PrimitiveJavaObjectInspector for the PrimitiveCategory, with option to
-   * pass in parameters for the primitive type (such as char(10)).
-   * Ideally this method should be used over the method without type parameters,
-   * and the type parameters (or lack of parameters) can be determined from
-   * the input ObjectInspector, TypeInfo, or TypeEntry.
-   * However there are situations where it is not possible to get any information about
-   * type parameters, such as when getting an object inspector based on reflection from
-   * the java or primitive class.
-   * @param primitiveCategory    Primitve type category
-   * @param primitiveTypeParams  Type parameters for the primitve type.
-   *        Set to null if there are no type parameters
-   * @return
+   * Returns the PrimitiveJavaObjectInspector for the given PrimitiveTypeInfo instance,
+   * @param PrimitiveTypeInfo    PrimitiveTypeInfo instance
+   * @return AbstractPrimitiveJavaObjectInspector instance
    */
   public static AbstractPrimitiveJavaObjectInspector getPrimitiveJavaObjectInspector(
-        PrimitiveTypeSpec typeSpec) {
-    PrimitiveCategory primitiveCategory = typeSpec.getPrimitiveCategory();
-    BaseTypeParams primitiveTypeParams = typeSpec.getTypeParams();
+        PrimitiveTypeInfo typeInfo) {
+    AbstractPrimitiveJavaObjectInspector result = cachedPrimitiveJavaInspectorCache.get(typeInfo);
+    if (result != null) {
+      return result;
+    }
 
-    if (primitiveTypeParams == null) {
-      // No type params, just search the unparameterized types
-      return getPrimitiveJavaObjectInspector(primitiveCategory);
-    } else {
-      // Check our cached set of parameterized object inspectors for the primitive category,
-      // or create a new object inspector if one doesn't exist yet.
-      PrimitiveObjectInspector oi =
-          cachedParameterizedPrimitiveJavaObjectInspectorCache.getObjectInspector(
-              typeSpec);
-      if (oi == null) {
-        // Do a bit of validation - not all primitive types use parameters.
-        switch (primitiveCategory) {
-          case VARCHAR:
-            PrimitiveTypeEntry typeEntry = PrimitiveObjectInspectorUtils.getTypeEntryFromTypeSpecs(
-                primitiveCategory,
-                primitiveTypeParams);
-            oi = new JavaHiveVarcharObjectInspector(typeEntry);
-            oi.setTypeParams(primitiveTypeParams);
-            cachedParameterizedPrimitiveJavaObjectInspectorCache.setObjectInspector(oi);
-            break;
-          default:
-            throw new RuntimeException(
-                "Primitve type " + primitiveCategory + " should not take parameters");
-        }
-      }
-      return (AbstractPrimitiveJavaObjectInspector)oi;
+    switch (typeInfo.getPrimitiveCategory()) {
+    case VARCHAR:
+      result = new JavaHiveVarcharObjectInspector((VarcharTypeInfo)typeInfo);
+      break;
+      default:
+        throw new RuntimeException("Failed to create JavaHiveVarcharObjectInspector for " + typeInfo );
     }
+
+    cachedPrimitiveJavaInspectorCache.put(typeInfo, result);
+    return result;
   }
+
   /**
    * Returns an ObjectInspector for a primitive Class. The Class can be a Hive
    * Writable class, or a Java Primitive Class.
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorUtils.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorUtils.java
index f6fe169..9a93740 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorUtils.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorUtils.java
@@ -31,7 +31,6 @@
 import org.apache.hadoop.hive.common.type.HiveDecimal;
 import org.apache.hadoop.hive.common.type.HiveVarchar;
 import org.apache.hadoop.hive.serde.serdeConstants;
-import org.apache.hadoop.hive.serde2.SerDeException;
 import org.apache.hadoop.hive.serde2.io.ByteWritable;
 import org.apache.hadoop.hive.serde2.io.DateWritable;
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
@@ -45,9 +44,6 @@
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector.Category;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
-import org.apache.hadoop.hive.serde2.typeinfo.BaseTypeParams;
-import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeSpec;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
 import org.apache.hadoop.io.BooleanWritable;
 import org.apache.hadoop.io.BytesWritable;
 import org.apache.hadoop.io.FloatWritable;
@@ -71,7 +67,7 @@
   /**
    * TypeEntry stores information about a Hive Primitive TypeInfo.
    */
-  public static class PrimitiveTypeEntry implements Writable, Cloneable, PrimitiveTypeSpec {
+  public static class PrimitiveTypeEntry implements Writable, Cloneable {
 
     /**
      * The category of the PrimitiveType.
@@ -96,22 +92,19 @@
      * typeName is the name of the type as in DDL.
      */
     public String typeName;
-    public Class<?> typeParamsClass;
-    public BaseTypeParams typeParams;
 
     protected PrimitiveTypeEntry() {
       super();
     }
-    
+
     PrimitiveTypeEntry(
         PrimitiveObjectInspector.PrimitiveCategory primitiveCategory,
         String typeName, Class<?> primitiveType, Class<?> javaClass,
-        Class<?> hiveClass, Class<?>paramsClass) {
+        Class<?> hiveClass) {
       this.primitiveCategory = primitiveCategory;
       primitiveJavaType = primitiveType;
       primitiveJavaClass = javaClass;
       primitiveWritableClass = hiveClass;
-      typeParamsClass = paramsClass;
       this.typeName = typeName;
     }
 
@@ -120,71 +113,23 @@ public void readFields(DataInput in) throws IOException {
       primitiveCategory = WritableUtils.readEnum(in,
           PrimitiveObjectInspector.PrimitiveCategory.class);
       typeName = WritableUtils.readString(in);
-      int typeParamsIndicator = WritableUtils.readVInt(in);
       try {
         primitiveJavaType = Class.forName(WritableUtils.readString(in));
         primitiveJavaClass = Class.forName(WritableUtils.readString(in));
         primitiveWritableClass = Class.forName(WritableUtils.readString(in));
-        if (typeParamsIndicator == 1) {
-          typeParamsClass = Class.forName(WritableUtils.readString(in));
-          typeParams = (BaseTypeParams)typeParamsClass.newInstance();
-          typeParams.readFields(in);
-        } else {
-          typeParamsClass = null;
-          typeParams = null;
-        }
       } catch (ClassNotFoundException e) {
         throw new IOException(e);
-      } catch (IllegalAccessException e) {
-        throw new IOException(e);
-      } catch (InstantiationException e) {
-        throw new IOException(e);
       }
     }
 
     @Override
     public void write(DataOutput out) throws IOException {
-      int typeParamsIndicator = (isParameterized() && typeParams != null) ? 1 : 0;
 
       WritableUtils.writeEnum(out, primitiveCategory);
       WritableUtils.writeString(out, typeName);
-      WritableUtils.writeVInt(out, typeParamsIndicator);
       WritableUtils.writeString(out, primitiveJavaType.getName());
       WritableUtils.writeString(out, primitiveJavaClass.getName());
       WritableUtils.writeString(out, primitiveWritableClass.getName());
-      if (typeParamsIndicator == 1) {
-        WritableUtils.writeString(out,  typeParamsClass.getName());
-        typeParams.write(out);
-      }
-    }
-
-    public PrimitiveTypeEntry addParameters(String[] parameters) {
-      if (parameters == null || parameters.length == 0) {
-        return this;
-      }
-
-      PrimitiveTypeEntry result;
-      try {
-        BaseTypeParams newTypeParams = (BaseTypeParams)typeParamsClass.newInstance();
-        newTypeParams.set(parameters);
-        String typeNameWithParams = this.typeName + newTypeParams.toString();
-        if (typeNameToTypeEntry.containsKey(typeNameWithParams)) {
-          return typeNameToTypeEntry.get(typeNameWithParams);
-        }
-        result = (PrimitiveTypeEntry)this.clone();
-        result.typeParams = newTypeParams;
-
-        PrimitiveObjectInspectorUtils.addParameterizedType(result);
-
-        return result;
-      } catch (Exception err) {
-        LOG.error("Error while setting type parameters: " + err);
-        throw new RuntimeException(err);
-      }
-    }
-
-    public boolean isParameterized() {
-      return (null != typeParamsClass);
     }
 
     @Override
@@ -194,52 +139,24 @@ public Object clone() {
           this.typeName,
           this.primitiveJavaType,
           this.primitiveJavaClass,
-          this.primitiveWritableClass,
-          this.typeParamsClass);
+          this.primitiveWritableClass);
       return result;
     }
 
     @Override
     public String toString() {
-      if (typeParams != null) {
-        return typeName + typeParams.toString();
-      }
       return typeName;
     }
 
-    public static BaseTypeParams createTypeParams(String typeName, String[] parameters)
-        throws SerDeException {
-      try {
-        PrimitiveTypeEntry typeEntry = getTypeEntryFromTypeName(typeName);
-        if (typeEntry != null && typeEntry.typeParamsClass != null) {
-          BaseTypeParams newTypeParams = (BaseTypeParams)typeEntry.typeParamsClass.newInstance();
-          newTypeParams.set(parameters);
-          return newTypeParams;
-        } else {
-          return null;
-        }
-      } catch (Exception err) {
-        throw new SerDeException("Error creating type params for " + typeName
-            + ": " + err, err);
-      }
-    }
-
-    @Override
-    public PrimitiveCategory getPrimitiveCategory() {
-      return primitiveCategory;
-    }
-
-    @Override
-    public BaseTypeParams getTypeParams() {
-      return typeParams;
-    }
   }
 
   static final Map<PrimitiveCategory, PrimitiveTypeEntry> primitiveCategoryToTypeEntry = new HashMap<PrimitiveCategory, PrimitiveTypeEntry>();
   static final Map<Class<?>, PrimitiveTypeEntry> primitiveJavaTypeToTypeEntry = new HashMap<Class<?>, PrimitiveTypeEntry>();
   static final Map<Class<?>, PrimitiveTypeEntry> primitiveJavaClassToTypeEntry = new HashMap<Class<?>, PrimitiveTypeEntry>();
   static final Map<Class<?>, PrimitiveTypeEntry> primitiveWritableClassToTypeEntry = new HashMap<Class<?>, PrimitiveTypeEntry>();
-  static final Map<String, PrimitiveTypeEntry> typeNameToTypeEntry = new HashMap<String, PrimitiveTypeEntry>();
+
+  // Base type name to PrimitiveTypeEntry map.
+  private static final Map<String, PrimitiveTypeEntry> typeNameToTypeEntry = new HashMap<String, PrimitiveTypeEntry>();
 
   static void addParameterizedType(PrimitiveTypeEntry t) {
     typeNameToTypeEntry.put(t.toString(), t);
@@ -265,52 +182,52 @@ static void registerType(PrimitiveTypeEntry t) {
 
   public static final PrimitiveTypeEntry binaryTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.BINARY, serdeConstants.BINARY_TYPE_NAME, byte[].class,
-      byte[].class, BytesWritable.class, null);
+      byte[].class, BytesWritable.class);
   public static final PrimitiveTypeEntry stringTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.STRING, serdeConstants.STRING_TYPE_NAME, null, String.class,
-      Text.class, null);
+      Text.class);
   public static final PrimitiveTypeEntry booleanTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.BOOLEAN, serdeConstants.BOOLEAN_TYPE_NAME, Boolean.TYPE,
-      Boolean.class, BooleanWritable.class, null);
+      Boolean.class, BooleanWritable.class);
   public static final PrimitiveTypeEntry intTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.INT, serdeConstants.INT_TYPE_NAME, Integer.TYPE,
-      Integer.class, IntWritable.class, null);
+      Integer.class, IntWritable.class);
   public static final PrimitiveTypeEntry longTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.LONG, serdeConstants.BIGINT_TYPE_NAME, Long.TYPE,
-      Long.class, LongWritable.class, null);
+      Long.class, LongWritable.class);
   public static final PrimitiveTypeEntry floatTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.FLOAT, serdeConstants.FLOAT_TYPE_NAME, Float.TYPE,
-      Float.class, FloatWritable.class, null);
+      Float.class, FloatWritable.class);
   public static final PrimitiveTypeEntry voidTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.VOID, serdeConstants.VOID_TYPE_NAME, Void.TYPE, Void.class,
-      NullWritable.class, null);
+      NullWritable.class);
 
   // No corresponding Writable classes for the following 3 in hadoop 0.17.0
   public static final PrimitiveTypeEntry doubleTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.DOUBLE, serdeConstants.DOUBLE_TYPE_NAME, Double.TYPE,
-      Double.class, DoubleWritable.class, null);
+      Double.class, DoubleWritable.class);
   public static final PrimitiveTypeEntry byteTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.BYTE, serdeConstants.TINYINT_TYPE_NAME, Byte.TYPE,
-      Byte.class, ByteWritable.class, null);
+      Byte.class, ByteWritable.class);
   public static final PrimitiveTypeEntry shortTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.SHORT, serdeConstants.SMALLINT_TYPE_NAME, Short.TYPE,
-      Short.class, ShortWritable.class, null);
+      Short.class, ShortWritable.class);
   public static final PrimitiveTypeEntry dateTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.DATE, serdeConstants.DATE_TYPE_NAME, null,
-      Date.class, DateWritable.class, null);
+      Date.class, DateWritable.class);
   public static final PrimitiveTypeEntry timestampTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.TIMESTAMP, serdeConstants.TIMESTAMP_TYPE_NAME, null,
-      Timestamp.class, TimestampWritable.class, null);
+      Timestamp.class, TimestampWritable.class);
   public static final PrimitiveTypeEntry decimalTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.DECIMAL, serdeConstants.DECIMAL_TYPE_NAME, null,
-      HiveDecimal.class, HiveDecimalWritable.class, null);
+      HiveDecimal.class, HiveDecimalWritable.class);
   public static final PrimitiveTypeEntry varcharTypeEntry = new PrimitiveTypeEntry(
       PrimitiveCategory.VARCHAR, serdeConstants.VARCHAR_TYPE_NAME, null, HiveVarchar.class,
-      HiveVarcharWritable.class, VarcharTypeParams.class);
+      HiveVarcharWritable.class);
 
   // The following is a complex type for special handling
   public static final PrimitiveTypeEntry unknownTypeEntry = new PrimitiveTypeEntry(
-      PrimitiveCategory.UNKNOWN, "unknown", null, Object.class, null, null);
+      PrimitiveCategory.UNKNOWN, "unknown", null, Object.class, null);
 
   static {
     registerType(binaryTypeEntry);
@@ -431,39 +348,12 @@ public static PrimitiveTypeEntry getTypeEntryFromPrimitiveWritableClass(
   }
 
   /**
-   * Get the TypeEntry for a Primitive Writable Class.
+   * Get the TypeEntry for the given base type name (int, varchar, etc).
    */
   public static PrimitiveTypeEntry getTypeEntryFromTypeName(String typeName) {
     return typeNameToTypeEntry.get(typeName);
   }
 
-  public static PrimitiveTypeEntry getTypeEntryFromTypeSpecs(
-      PrimitiveCategory primitiveCategory,
-      BaseTypeParams typeParams) {
-    if (typeParams == null) {
-      // No type params, can just use the primitive category
-      return getTypeEntryFromPrimitiveCategory(primitiveCategory);
-    }
-
-    // Type params were passed in. First check for cached version
-    String typeString = primitiveCategory.toString().toLowerCase();
-    typeString += typeParams.toString();
-    PrimitiveTypeEntry typeEntry = getTypeEntryFromTypeName(typeString);
-    if (typeEntry == null) {
-      // Parameterized type doesn't exist yet, create now.
-      typeEntry = 
-          (PrimitiveTypeEntry) getTypeEntryFromPrimitiveCategory(primitiveCategory).clone();
-      if (!typeEntry.isParameterized()) {
-        throw new IllegalArgumentException(
-            primitiveCategory + " type was being used with type parameters "
-            + typeParams + ", which should not be allowed");
-      }
-      typeEntry.typeParams = typeParams;
-      addParameterizedType(typeEntry);
-    }
-    return typeEntry;
-  }
-
   /**
    * Compare 2 primitive objects. Conversion not allowed. Note that NULL does
    * not equal to NULL according to SQL standard.
@@ -1208,37 +1098,4 @@ private PrimitiveObjectInspectorUtils() {
     // prevent instantiation
   }
 
-  /**
-   * Helper class to store parameterized primitive object inspectors, which can be
-   * used by the various object inspector factory methods.
-   */
-  public static class ParameterizedObjectInspectorMap {
-    HashMap<PrimitiveCategory, HashMap<String, PrimitiveObjectInspector>> entries;
-
-    public ParameterizedObjectInspectorMap() {
-      entries =
-          new HashMap<PrimitiveCategory, HashMap<String, PrimitiveObjectInspector>>();
-    }
-
-    public PrimitiveObjectInspector getObjectInspector(
-        PrimitiveTypeSpec typeSpec) {
-      PrimitiveCategory category = typeSpec.getPrimitiveCategory();
-      BaseTypeParams params = typeSpec.getTypeParams();
-      HashMap<String, PrimitiveObjectInspector> entriesForCategory = entries.get(category);
-      if (entriesForCategory == null) {
-        return null;
-      }
-      return (PrimitiveObjectInspector)entriesForCategory.get(params.toString());
-    }
-
-    public void setObjectInspector(PrimitiveObjectInspector oi) {
-      PrimitiveCategory category = oi.getPrimitiveCategory();
-      HashMap<String, PrimitiveObjectInspector> entriesForCategory = entries.get(category);
-      if (entriesForCategory == null) {
-        entriesForCategory = new HashMap<String, PrimitiveObjectInspector>();
-        entries.put(category, entriesForCategory);
-      }
-      entriesForCategory.put(oi.getTypeParams().toString(), oi);
-    }
-  }
 }
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableBinaryObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableBinaryObjectInspector.java
index 3b20f9f..c8a5a78 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableBinaryObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableBinaryObjectInspector.java
@@ -21,6 +21,7 @@
 import java.util.Arrays;
 
 import org.apache.hadoop.hive.serde2.lazy.LazyUtils;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.BytesWritable;
 /**
  * A WritableBinaryObjectInspector inspects a BytesWritable Object.
@@ -29,7 +30,7 @@
     implements SettableBinaryObjectInspector {
 
   WritableBinaryObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.binaryTypeEntry);
+    super(TypeInfoFactory.binaryTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableBooleanObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableBooleanObjectInspector.java
index fe739ec..5d07a1c 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableBooleanObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableBooleanObjectInspector.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.BooleanWritable;
 
 /**
@@ -27,7 +28,7 @@
     SettableBooleanObjectInspector {
 
   WritableBooleanObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.booleanTypeEntry);
+    super(TypeInfoFactory.booleanTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableByteObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableByteObjectInspector.java
index cfda1ef..7ab6cdb 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableByteObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableByteObjectInspector.java
@@ -18,6 +18,7 @@
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
 import org.apache.hadoop.hive.serde2.io.ByteWritable;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 /**
  * A WritableByteObjectInspector inspects a ByteWritable Object.
@@ -26,8 +27,8 @@
     AbstractPrimitiveWritableObjectInspector implements
     SettableByteObjectInspector {
 
-  WritableByteObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.byteTypeEntry);
+  public WritableByteObjectInspector() {
+    super(TypeInfoFactory.byteTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantHiveVarcharObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantHiveVarcharObjectInspector.java
index 8d70dc5..1ab13e2 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantHiveVarcharObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantHiveVarcharObjectInspector.java
@@ -19,7 +19,7 @@
 
 import org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;
 import org.apache.hadoop.hive.serde2.objectinspector.ConstantObjectInspector;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 
 /**
  * A WritableConstantHiveVarcharObjectInspector is a WritableHiveVarcharObjectInspector
@@ -31,29 +31,19 @@
 
   protected HiveVarcharWritable value;
 
-  WritableConstantHiveVarcharObjectInspector(HiveVarcharWritable value) {
-    this(value, null);
+  // no-arg ctor required for Kyro serialization
+  WritableConstantHiveVarcharObjectInspector() {
   }
 
-  WritableConstantHiveVarcharObjectInspector(HiveVarcharWritable value,
-      VarcharTypeParams typeParams) {
-    super(PrimitiveObjectInspectorUtils.varcharTypeEntry);
+  WritableConstantHiveVarcharObjectInspector(VarcharTypeInfo typeInfo,
+      HiveVarcharWritable value) {
+    super(typeInfo);
     this.value = value;
-
-    // If we have been provided with type params, then use them.
-    // Otherwise determine character length and update type params/typeinfo accordingly.
-    if (typeParams == null) {
-      typeParams = new VarcharTypeParams();
-      typeParams.length = this.value.getCharacterLength();
-    }
-    setTypeParams(typeParams);
-    this.typeEntry = PrimitiveObjectInspectorUtils.getTypeEntryFromTypeSpecs(
-        PrimitiveCategory.VARCHAR,
-        typeParams);
   }
 
   @Override
   public HiveVarcharWritable getWritableConstantValue() {
+    // TODO: enforce max length
     return value;
   }
 }
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableDateObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableDateObjectInspector.java
index 7678c44..bcb1d0b 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableDateObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableDateObjectInspector.java
@@ -20,6 +20,7 @@
 import java.sql.Date;
 
 import org.apache.hadoop.hive.serde2.io.DateWritable;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 /**
  * A WritableDateObjectInspector inspects a DateWritable Object.
@@ -29,7 +30,7 @@
     SettableDateObjectInspector {
 
   public WritableDateObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.dateTypeEntry);
+    super(TypeInfoFactory.dateTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableDoubleObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableDoubleObjectInspector.java
index 6e6dee5..28a397a 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableDoubleObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableDoubleObjectInspector.java
@@ -18,6 +18,7 @@
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
 import org.apache.hadoop.hive.serde2.io.DoubleWritable;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 /**
  * A WritableDoubleObjectInspector inspects a DoubleWritable Object.
@@ -27,7 +28,7 @@
     SettableDoubleObjectInspector {
 
   WritableDoubleObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.doubleTypeEntry);
+    super(TypeInfoFactory.doubleTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableFloatObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableFloatObjectInspector.java
index 4efd91d..53bfb9e 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableFloatObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableFloatObjectInspector.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.FloatWritable;
 
 /**
@@ -27,7 +28,7 @@
     SettableFloatObjectInspector {
 
   WritableFloatObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.floatTypeEntry);
+    super(TypeInfoFactory.floatTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableHiveDecimalObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableHiveDecimalObjectInspector.java
index 8c9aedd..d3fc6ea 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableHiveDecimalObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableHiveDecimalObjectInspector.java
@@ -20,13 +20,14 @@
 
 import org.apache.hadoop.hive.common.type.HiveDecimal;
 import org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 public class WritableHiveDecimalObjectInspector
     extends AbstractPrimitiveWritableObjectInspector
     implements SettableHiveDecimalObjectInspector {
 
   protected WritableHiveDecimalObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.decimalTypeEntry);
+    super(TypeInfoFactory.decimalTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableHiveVarcharObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableHiveVarcharObjectInspector.java
index e1394c6..24d09ce 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableHiveVarcharObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableHiveVarcharObjectInspector.java
@@ -21,22 +21,19 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hive.common.type.HiveVarchar;
 import org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
-import org.apache.hadoop.hive.serde2.typeinfo.ParameterizedPrimitiveTypeUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
-
-public class WritableHiveVarcharObjectInspector
-    extends AbstractPrimitiveWritableObjectInspector
-    implements SettableHiveVarcharObjectInspector {
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharUtils;
 
+public class WritableHiveVarcharObjectInspector extends AbstractPrimitiveWritableObjectInspector
+implements SettableHiveVarcharObjectInspector {
   private static final Log LOG = LogFactory.getLog(WritableHiveVarcharObjectInspector.class);
 
-  public WritableHiveVarcharObjectInspector(PrimitiveTypeEntry typeEntry) {
-    super(typeEntry);
-    if (typeEntry.primitiveCategory != PrimitiveCategory.VARCHAR) {
-      throw new RuntimeException(
-          "TypeEntry of type varchar expected, got " + typeEntry.primitiveCategory);
-    }
+  // no-arg ctor required for Kyro serialization
+  public WritableHiveVarcharObjectInspector() {
+  }
+
+  public WritableHiveVarcharObjectInspector(VarcharTypeInfo typeInfo) {
+    super(typeInfo);
   }
 
   @Override
@@ -81,8 +78,8 @@ private HiveVarcharWritable getWritableWithParams(HiveVarcharWritable val) {
   }
 
   private boolean doesWritableMatchTypeParams(HiveVarcharWritable writable) {
-    return ParameterizedPrimitiveTypeUtils.doesWritableMatchTypeParams(
-        writable, (VarcharTypeParams)getTypeParams());
+    return VarcharUtils.doesWritableMatchTypeParams(
+        writable, (VarcharTypeInfo)typeInfo);
   }
 
   @Override
@@ -120,8 +117,7 @@ public Object create(HiveVarchar value) {
   }
 
   public int getMaxLength() {
-    VarcharTypeParams typeParams = (VarcharTypeParams)getTypeParams();
-    return typeParams != null ? typeParams.length : -1;
+    return ((VarcharTypeInfo)typeInfo).getLength();
   }
 
 }
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableIntObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableIntObjectInspector.java
index a896c50..74af72d 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableIntObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableIntObjectInspector.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.IntWritable;
 
 /**
@@ -27,7 +28,7 @@
     SettableIntObjectInspector {
 
   WritableIntObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.intTypeEntry);
+    super(TypeInfoFactory.intTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableLongObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableLongObjectInspector.java
index 7d8bc59..5b1621a 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableLongObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableLongObjectInspector.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.LongWritable;
 
 /**
@@ -27,7 +28,7 @@
     SettableLongObjectInspector {
 
   WritableLongObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.longTypeEntry);
+    super(TypeInfoFactory.longTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableShortObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableShortObjectInspector.java
index 60b63b2..dd2edfd 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableShortObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableShortObjectInspector.java
@@ -18,6 +18,7 @@
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
 import org.apache.hadoop.hive.serde2.io.ShortWritable;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 /**
  * A WritableShortObjectInspector inspects a ShortWritable Object.
@@ -27,7 +28,7 @@
     SettableShortObjectInspector {
 
   WritableShortObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.shortTypeEntry);
+    super(TypeInfoFactory.shortTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableStringObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableStringObjectInspector.java
index c174a83..f925cf3 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableStringObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableStringObjectInspector.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.Text;
 
 /**
@@ -27,7 +28,7 @@
     SettableStringObjectInspector {
 
   WritableStringObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.stringTypeEntry);
+    super(TypeInfoFactory.stringTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableTimestampObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableTimestampObjectInspector.java
index 993223d..5e24034 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableTimestampObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableTimestampObjectInspector.java
@@ -20,13 +20,14 @@
 import java.sql.Timestamp;
 
 import org.apache.hadoop.hive.serde2.io.TimestampWritable;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 public class WritableTimestampObjectInspector extends
     AbstractPrimitiveWritableObjectInspector implements
     SettableTimestampObjectInspector {
 
   public WritableTimestampObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.timestampTypeEntry);
+    super(TypeInfoFactory.timestampTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableVoidObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableVoidObjectInspector.java
index 19df45c..02b672a 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableVoidObjectInspector.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableVoidObjectInspector.java
@@ -18,6 +18,7 @@
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
 import org.apache.hadoop.hive.serde2.objectinspector.ConstantObjectInspector;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 
 /**
  * A WritableVoidObjectInspector inspects a NullWritable Object.
@@ -28,7 +29,7 @@
     VoidObjectInspector, ConstantObjectInspector {
 
   WritableVoidObjectInspector() {
-    super(PrimitiveObjectInspectorUtils.voidTypeEntry);
+    super(TypeInfoFactory.voidTypeInfo);
   }
 
   @Override
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/BaseCharTypeInfo.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/BaseCharTypeInfo.java
new file mode 100644
index 0000000..132a79a
--- /dev/null
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/BaseCharTypeInfo.java
@@ -0,0 +1,56 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hive.serde2.typeinfo;
+
+public abstract class BaseCharTypeInfo extends PrimitiveTypeInfo {
+  private static final long serialVersionUID = 1L;
+
+  private int length;
+
+  // no-arg constructor to make kyro happy.
+  public BaseCharTypeInfo() {
+  }
+
+  public BaseCharTypeInfo(String typeName, int length) {
+    super(typeName);
+    this.length = length;
+  }
+
+  public int getLength() {
+    return length;
+  }
+
+  public void setLength(int length) {
+    this.length = length;
+  }
+
+  @Override
+  public String getQualifiedName() {
+    return getQualifiedName(typeName, length);
+  }
+
+  public static String getQualifiedName(String typeName, int length) {
+    StringBuilder sb = new StringBuilder(typeName);
+    sb.append("(");
+    sb.append(length);
+    sb.append(")");
+    return sb.toString();
+  }
+
+}
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/BaseTypeParams.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/BaseTypeParams.java
deleted file mode 100644
index 1eba561..0000000
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/BaseTypeParams.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.hadoop.hive.serde2.typeinfo;
-
-import java.io.Serializable;
-
-import org.apache.hadoop.hive.serde2.SerDeException;
-import org.apache.hadoop.io.Writable;
-
-/**
- * Base type for type-specific params, such as char(10) or decimal(10, 2).
- */
-public abstract class BaseTypeParams implements Writable, Serializable {
-
-  private static final long serialVersionUID = 1L;
-
-  public abstract void validateParams() throws SerDeException;
-
-  public abstract void populateParams(String[] params) throws SerDeException;
-
-  public abstract String toString();
-
-  public void set(String[] params) throws SerDeException {
-    populateParams(params);
-    validateParams();
-  }
-
-  // Needed for conversion to/from TypeQualifiers. Override in subclasses.
-  public boolean hasCharacterMaximumLength() {
-    return false;
-  }
-  public int getCharacterMaximumLength() {
-    return -1;
-  }
-}
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/ParameterizedPrimitiveTypeUtils.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/ParameterizedPrimitiveTypeUtils.java
deleted file mode 100644
index 8a48349..0000000
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/ParameterizedPrimitiveTypeUtils.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package org.apache.hadoop.hive.serde2.typeinfo;
-
-import org.apache.hadoop.hive.common.type.HiveVarchar;
-import org.apache.hadoop.hive.serde2.SerDeException;
-import org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;
-import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-public class ParameterizedPrimitiveTypeUtils {
-
-  public static BaseTypeParams getTypeParamsFromTypeInfo(TypeInfo typeInfo) {
-    BaseTypeParams typeParams = null;
-    if (typeInfo instanceof PrimitiveTypeInfo) {
-      PrimitiveTypeInfo ppti = (PrimitiveTypeInfo)typeInfo;
-      typeParams = ppti.getTypeParams();
-    }
-    return typeParams;
-  }
-
-  public static BaseTypeParams getTypeParamsFromPrimitiveTypeEntry(PrimitiveTypeEntry typeEntry) {
-    return typeEntry.typeParams;
-  }
-
-  public static BaseTypeParams getTypeParamsFromPrimitiveObjectInspector(
-      PrimitiveObjectInspector oi) {
-    return oi.getTypeParams();
-  }
-
-  /**
-   * Utils for varchar type
-   */
-  public static class HiveVarcharSerDeHelper {
-    public int maxLength;
-    public HiveVarcharWritable writable = new HiveVarcharWritable();
-
-    public HiveVarcharSerDeHelper(VarcharTypeParams typeParams) {
-      if (typeParams == null) {
-        throw new RuntimeException("varchar type used without type params");
-      }
-      maxLength = typeParams.getLength();
-    }
-  }
-
-  public static boolean doesWritableMatchTypeParams(HiveVarcharWritable writable,
-      VarcharTypeParams typeParams) {
-    return (typeParams == null || typeParams.length >= writable.getCharacterLength());
-  }
-
-  public static boolean doesPrimitiveMatchTypeParams(HiveVarchar value,
-      VarcharTypeParams typeParams) {
-    return (typeParams == null || typeParams.length == value.getCharacterLength());
-  }
-}
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/PrimitiveTypeInfo.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/PrimitiveTypeInfo.java
index 40785cd..a66b50a 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/PrimitiveTypeInfo.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/PrimitiveTypeInfo.java
@@ -32,12 +32,11 @@
  * Always use the TypeInfoFactory to create new TypeInfo objects, instead of
  * directly creating an instance of this class.
  */
-public class PrimitiveTypeInfo extends TypeInfo implements Serializable, PrimitiveTypeSpec {
-
+public class PrimitiveTypeInfo extends TypeInfo implements Serializable {
   private static final long serialVersionUID = 1L;
 
+  // Base name (varchar vs fully qualified name such as varchar(200)).
   protected String typeName;
-  protected BaseTypeParams typeParams;
 
   /**
    * For java serialization use only.
@@ -65,11 +64,11 @@ public PrimitiveCategory getPrimitiveCategory() {
   }
 
   public Class<?> getPrimitiveWritableClass() {
-    return PrimitiveObjectInspectorUtils.getTypeEntryFromTypeName(typeName).primitiveWritableClass;
+    return getPrimitiveTypeEntry().primitiveWritableClass;
   }
 
   public Class<?> getPrimitiveJavaClass() {
-    return PrimitiveObjectInspectorUtils.getTypeEntryFromTypeName(typeName).primitiveJavaClass;
+    return getPrimitiveTypeEntry().primitiveJavaClass;
   }
 
   // The following 2 methods are for java serialization use only.
@@ -82,43 +81,19 @@ public String getTypeName() {
     return typeName;
   }
 
-  /**
-   * If the type has type parameters (such as varchar length, or decimal precision/scale),
-   * then return the parameters for the type.
-   * @return A BaseTypeParams object representing the parameters for the type, or null
-   */
-  public BaseTypeParams getTypeParams() {
-    return typeParams;
-  }
-
-  /**
-   * Set the type parameters for the type.
-   * @param typeParams type parameters for the type
-   */
-  public void setTypeParams(BaseTypeParams typeParams) {
-    // Ideally could check here to make sure the type really supports parameters,
-    // however during deserialization some of the required fields are not set at the
-    // time that the type params are set. We would have to customize the way this class
-    // is serialized/deserialized for the check to work.
-    //if (typeParams != null && !getPrimitiveTypeEntry().isParameterized()) {
-    //  throw new UnsupportedOperationException(
-    //      "Attempting to add type parameters " + typeParams + " to type " + getTypeName());
-    //}
-    this.typeParams = typeParams;
-  }
-
   public PrimitiveTypeEntry getPrimitiveTypeEntry() {
-    return PrimitiveObjectInspectorUtils.getTypeEntryFromTypeName(
-        TypeInfoUtils.getBaseName(typeName));
+    return PrimitiveObjectInspectorUtils.getTypeEntryFromTypeName(typeName);
   }
 
-  /**
-   * Compare if 2 TypeInfos are the same. We use TypeInfoFactory to cache
-   * TypeInfos, so we only need to compare the Object pointer.
-   */
   @Override
   public boolean equals(Object other) {
-    return this == other;
+    if (other == null || !(other instanceof PrimitiveTypeInfo)) {
+      return false;
+    }
+
+    PrimitiveTypeInfo pti = (PrimitiveTypeInfo) other;
+
+    return this.typeName.equals(pti.typeName);
   }
 
   /**
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/PrimitiveTypeSpec.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/PrimitiveTypeSpec.java
deleted file mode 100644
index 6d8af3c..0000000
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/PrimitiveTypeSpec.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.hive.serde2.typeinfo;
-
-import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
-
-/**
- * Interface to encapsulate retrieving of type information, for the object inspector factory.
- *
- */
-public interface PrimitiveTypeSpec {
-  /**
-   * @return  PrimitiveCategory referred to by the PrimitiveTypeSpec
-   */
-  PrimitiveCategory getPrimitiveCategory();
-
-  /**
-   * @return Type params referred to by the PrimitiveTypeSpec
-   */
-  BaseTypeParams getTypeParams();
-}
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoFactory.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoFactory.java
index 05dbb81..13d1ec0 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoFactory.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoFactory.java
@@ -25,7 +25,6 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hive.serde.serdeConstants;
-import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
 
@@ -38,71 +37,106 @@
  */
 public final class TypeInfoFactory {
   private static Log LOG = LogFactory.getLog(TypeInfoFactory.class);
-  static ConcurrentHashMap<String, TypeInfo> cachedPrimitiveTypeInfo = new ConcurrentHashMap<String, TypeInfo>();
 
   private TypeInfoFactory() {
     // prevent instantiation
   }
 
-  public static TypeInfo getPrimitiveTypeInfo(String typeName) {
-    PrimitiveTypeEntry typeEntry = PrimitiveObjectInspectorUtils
-        .getTypeEntryFromTypeName(TypeInfoUtils.getBaseName(typeName));
-    if (null == typeEntry) {
-      throw new RuntimeException("Cannot getPrimitiveTypeInfo for " + typeName);
+  public static final PrimitiveTypeInfo voidTypeInfo = new PrimitiveTypeInfo(serdeConstants.VOID_TYPE_NAME);
+  public static final PrimitiveTypeInfo booleanTypeInfo = new PrimitiveTypeInfo(serdeConstants.BOOLEAN_TYPE_NAME);
+  public static final PrimitiveTypeInfo intTypeInfo = new PrimitiveTypeInfo(serdeConstants.INT_TYPE_NAME);
+  public static final PrimitiveTypeInfo longTypeInfo = new PrimitiveTypeInfo(serdeConstants.BIGINT_TYPE_NAME);
+  public static final PrimitiveTypeInfo stringTypeInfo = new PrimitiveTypeInfo(serdeConstants.STRING_TYPE_NAME);
+  public static final PrimitiveTypeInfo floatTypeInfo = new PrimitiveTypeInfo(serdeConstants.FLOAT_TYPE_NAME);
+  public static final PrimitiveTypeInfo doubleTypeInfo = new PrimitiveTypeInfo(serdeConstants.DOUBLE_TYPE_NAME);
+  public static final PrimitiveTypeInfo byteTypeInfo = new PrimitiveTypeInfo(serdeConstants.TINYINT_TYPE_NAME);
+  public static final PrimitiveTypeInfo shortTypeInfo = new PrimitiveTypeInfo(serdeConstants.SMALLINT_TYPE_NAME);
+  public static final PrimitiveTypeInfo dateTypeInfo = new PrimitiveTypeInfo(serdeConstants.DATE_TYPE_NAME);
+  public static final PrimitiveTypeInfo timestampTypeInfo = new PrimitiveTypeInfo(serdeConstants.TIMESTAMP_TYPE_NAME);
+  public static final PrimitiveTypeInfo binaryTypeInfo = new PrimitiveTypeInfo(serdeConstants.BINARY_TYPE_NAME);
+  public static final PrimitiveTypeInfo decimalTypeInfo = new PrimitiveTypeInfo(serdeConstants.DECIMAL_TYPE_NAME);
+
+  public static final PrimitiveTypeInfo unknownTypeInfo = new PrimitiveTypeInfo("unknown");
+
+  // Map from type name (such as int or varchar(40) to the corresponding PrimitiveTypeInfo
+  // instance.
+  private static ConcurrentHashMap<String, PrimitiveTypeInfo> cachedPrimitiveTypeInfo =
+      new ConcurrentHashMap<String, PrimitiveTypeInfo>();
+  static {
+    cachedPrimitiveTypeInfo.put(serdeConstants.VOID_TYPE_NAME, voidTypeInfo);
+    cachedPrimitiveTypeInfo.put(serdeConstants.BOOLEAN_TYPE_NAME, booleanTypeInfo);
+    cachedPrimitiveTypeInfo.put(serdeConstants.INT_TYPE_NAME, intTypeInfo);
+    cachedPrimitiveTypeInfo.put(serdeConstants.BIGINT_TYPE_NAME, longTypeInfo);
+    cachedPrimitiveTypeInfo.put(serdeConstants.STRING_TYPE_NAME, stringTypeInfo);
+    cachedPrimitiveTypeInfo.put(serdeConstants.FLOAT_TYPE_NAME, floatTypeInfo);
+    cachedPrimitiveTypeInfo.put(serdeConstants.DOUBLE_TYPE_NAME, doubleTypeInfo);
+    cachedPrimitiveTypeInfo.put(serdeConstants.TINYINT_TYPE_NAME, byteTypeInfo);
+    cachedPrimitiveTypeInfo.put(serdeConstants.SMALLINT_TYPE_NAME, shortTypeInfo);
+    cachedPrimitiveTypeInfo.put(serdeConstants.DATE_TYPE_NAME, dateTypeInfo);
+    cachedPrimitiveTypeInfo.put(serdeConstants.TIMESTAMP_TYPE_NAME, timestampTypeInfo);
+    cachedPrimitiveTypeInfo.put(serdeConstants.BINARY_TYPE_NAME, binaryTypeInfo);
+    cachedPrimitiveTypeInfo.put(serdeConstants.DECIMAL_TYPE_NAME, decimalTypeInfo);
+    cachedPrimitiveTypeInfo.put("unknown", unknownTypeInfo);
+  }
+
+  /**
+   * Get PrimitiveTypeInfo instance for the given type name of a type
+   * including types with parameters, such as varchar(20).
+   *
+   * @param typeName type name possibly with parameters.
+   * @return aPrimitiveTypeInfo instance
+   */
+  public static PrimitiveTypeInfo getPrimitiveTypeInfo(String typeName) {
+    PrimitiveTypeInfo result = cachedPrimitiveTypeInfo.get(typeName);
+    if (result != null) {
+      return result;
     }
-    TypeInfo result = cachedPrimitiveTypeInfo.get(typeName);
+
+    // Not found in the cache. Must be parameterized types. Create it.
+    result = createPrimitiveTypeInfo(typeName);
     if (result == null) {
-      TypeInfoUtils.PrimitiveParts parts = TypeInfoUtils.parsePrimitiveParts(typeName);
-      // Create params if there are any
-      if (parts.typeParams != null && parts.typeParams.length > 0) {
-        // The type string came with parameters.  Parse and add to TypeInfo
-        try {
-          BaseTypeParams typeParams = PrimitiveTypeEntry.createTypeParams(
-              parts.typeName, parts.typeParams);
-          result = new PrimitiveTypeInfo(typeName);
-          ((PrimitiveTypeInfo) result).setTypeParams(typeParams);
-        } catch (Exception err) {
-          LOG.error(err);
-          throw new RuntimeException("Error creating type parameters for " + typeName
-              + ": " + err, err);
-        }
-      } else {
-        // No type params
-
-        // Prevent creation of varchar TypeInfo with no length specification.
-        // This can happen if an old-style UDF uses a varchar type either as an
-        // argument or return type in an evaluate() function, or other instances
-        // of using reflection-based methods for retrieving a TypeInfo.
-        if (typeEntry.primitiveCategory == PrimitiveCategory.VARCHAR) {
-          LOG.error("varchar type used with no type params");
-          throw new RuntimeException("varchar type used with no type params");
-        }
+      throw new RuntimeException("Error creating PrimitiveTypeInfo instance for " + typeName);
+    }
 
-        result = new PrimitiveTypeInfo(parts.typeName);
-      }
+    cachedPrimitiveTypeInfo.put(typeName, result);
+    return result;
+  }
 
-      cachedPrimitiveTypeInfo.put(typeName, result);
+  /**
+   * Create PrimitiveTypeInfo instance for the given full name of the type. The returned
+   * type is one of the parameterized type info such as VarcharTypeInfo.
+   *
+   * @param fullName Fully qualified name of the type
+   * @return PrimitiveTypeInfo instance
+   */
+  private static PrimitiveTypeInfo createPrimitiveTypeInfo(String fullName) {
+    String baseName = TypeInfoUtils.getBaseName(fullName);
+    PrimitiveTypeEntry typeEntry =
+        PrimitiveObjectInspectorUtils.getTypeEntryFromTypeName(baseName);
+    if (null == typeEntry) {
+      throw new RuntimeException("Unknown type " + fullName);
+    }
+
+    TypeInfoUtils.PrimitiveParts parts = TypeInfoUtils.parsePrimitiveParts(fullName);
+    if (parts.typeParams == null || parts.typeParams.length < 1) {
+      return null;
+    }
+
+    switch (typeEntry.primitiveCategory) {
+      case VARCHAR:
+        if (parts.typeParams.length != 1) {
+          return null;
+        }
+        return new VarcharTypeInfo(Integer.valueOf(parts.typeParams[0]));
+      default:
+        return null;
     }
-    return result;
   }
 
-  public static final TypeInfo voidTypeInfo = getPrimitiveTypeInfo(serdeConstants.VOID_TYPE_NAME);
-  public static final TypeInfo booleanTypeInfo = getPrimitiveTypeInfo(serdeConstants.BOOLEAN_TYPE_NAME);
-  public static final TypeInfo intTypeInfo = getPrimitiveTypeInfo(serdeConstants.INT_TYPE_NAME);
-  public static final TypeInfo longTypeInfo = getPrimitiveTypeInfo(serdeConstants.BIGINT_TYPE_NAME);
-  public static final TypeInfo stringTypeInfo = getPrimitiveTypeInfo(serdeConstants.STRING_TYPE_NAME);
-  public static final TypeInfo floatTypeInfo = getPrimitiveTypeInfo(serdeConstants.FLOAT_TYPE_NAME);
-  public static final TypeInfo doubleTypeInfo = getPrimitiveTypeInfo(serdeConstants.DOUBLE_TYPE_NAME);
-  public static final TypeInfo byteTypeInfo = getPrimitiveTypeInfo(serdeConstants.TINYINT_TYPE_NAME);
-  public static final TypeInfo shortTypeInfo = getPrimitiveTypeInfo(serdeConstants.SMALLINT_TYPE_NAME);
-  public static final TypeInfo dateTypeInfo = getPrimitiveTypeInfo(serdeConstants.DATE_TYPE_NAME);
-  public static final TypeInfo timestampTypeInfo = getPrimitiveTypeInfo(serdeConstants.TIMESTAMP_TYPE_NAME);
-  public static final TypeInfo binaryTypeInfo = getPrimitiveTypeInfo(serdeConstants.BINARY_TYPE_NAME);
-  public static final TypeInfo decimalTypeInfo = getPrimitiveTypeInfo(serdeConstants.DECIMAL_TYPE_NAME);
-  // Disallow usage of varchar without length specifier.
-  //public static final TypeInfo varcharTypeInfo = getPrimitiveTypeInfo(serdeConstants.VARCHAR_TYPE_NAME);
-
-  public static final TypeInfo unknownTypeInfo = getPrimitiveTypeInfo("unknown");
+  public static VarcharTypeInfo getVarcharTypeInfo(int length) {
+    String fullName = BaseCharTypeInfo.getQualifiedName(serdeConstants.VARCHAR_TYPE_NAME, length);
+    return (VarcharTypeInfo) getPrimitiveTypeInfo(fullName);
+  }
 
   public static TypeInfo getPrimitiveTypeInfoFromPrimitiveWritable(
       Class<?> clazz) {
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java
index 0ae4331..d21abd4 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java
@@ -29,7 +29,6 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.hive.common.type.HiveVarchar;
 import org.apache.hadoop.hive.serde.serdeConstants;
 import org.apache.hadoop.hive.serde2.objectinspector.ListObjectInspector;
@@ -392,15 +391,30 @@ private TypeInfo parseType() {
       Token t = expect("type");
 
       // Is this a primitive type?
-      PrimitiveTypeEntry primitiveType = PrimitiveObjectInspectorUtils
-          .getTypeEntryFromTypeName(t.text);
-      if (primitiveType != null
-          && !primitiveType.primitiveCategory.equals(PrimitiveCategory.UNKNOWN)) {
-        if (primitiveType.isParameterized()) {
-          primitiveType = primitiveType.addParameters(parseParams());
+      PrimitiveTypeEntry typeEntry =
+          PrimitiveObjectInspectorUtils.getTypeEntryFromTypeName(t.text);
+      if (typeEntry != null && typeEntry.primitiveCategory != PrimitiveCategory.UNKNOWN ) {
+        String qualifiedTypeName = typeEntry.typeName;
+        if (typeEntry.primitiveCategory == PrimitiveCategory.VARCHAR) {
+          int length = HiveVarchar.MAX_VARCHAR_LENGTH;
+          
+          String[] params = parseParams();
+          if (params == null || params.length == 0) {
+            throw new RuntimeException( "Varchar type is specified without length: " + typeInfoString);
+          }
+          
+          if (params.length == 1) {
+            length = Integer.valueOf(params[0]);
+            VarcharUtils.validateParameter(length);
+          } else if (params.length > 1) {
+            throw new RuntimeException("Type varchar only takes one parameter, but " +
+                params.length + " is seen");
+          } 
+
+          qualifiedTypeName = BaseCharTypeInfo.getQualifiedName(typeEntry.typeName, length);
         }
-        // If type has qualifiers, the TypeInfo needs them in its type string
-        return TypeInfoFactory.getPrimitiveTypeInfo(primitiveType.toString());
+
+        return TypeInfoFactory.getPrimitiveTypeInfo(qualifiedTypeName);
       }
 
       // Is this a list type?
@@ -749,11 +763,8 @@ public static int getCharacterLengthForType(PrimitiveTypeInfo typeInfo) {
       case STRING:
         return HiveVarchar.MAX_VARCHAR_LENGTH;
       case VARCHAR:
-        VarcharTypeParams varcharParams = (VarcharTypeParams) typeInfo.getTypeParams();
-        if (varcharParams == null) {
-          throw new RuntimeException("varchar type used without type params");
-        }
-        return varcharParams.getLength();
+        VarcharTypeInfo varcharTypeInfo = (VarcharTypeInfo) typeInfo;
+        return varcharTypeInfo.getLength();
       default:
         return 0;
     }
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/VarcharTypeInfo.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/VarcharTypeInfo.java
new file mode 100644
index 0000000..5d6f3f4
--- /dev/null
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/VarcharTypeInfo.java
@@ -0,0 +1,64 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hive.serde2.typeinfo;
+
+import org.apache.hadoop.hive.serde.serdeConstants;
+
+public class VarcharTypeInfo extends BaseCharTypeInfo {
+  private static final long serialVersionUID = 1L;
+
+  // no-arg constructor to make kyro happy.
+  public VarcharTypeInfo() {
+  }
+
+  public VarcharTypeInfo(int length) {
+    super(serdeConstants.VARCHAR_TYPE_NAME, length);
+    VarcharUtils.validateParameter(length);
+  }
+
+  @Override
+  public String getTypeName() {
+    return getQualifiedName();
+  }
+
+  @Override
+  public boolean equals(Object other) {
+    if (other == null || !(other instanceof VarcharTypeInfo)) {
+      return false;
+    }
+
+    VarcharTypeInfo pti = (VarcharTypeInfo) other;
+
+    return this.typeName.equals(pti.typeName) && this.getLength() == pti.getLength();
+  }
+
+  /**
+   * Generate the hashCode for this TypeInfo.
+   */
+  @Override
+  public int hashCode() {
+    return getQualifiedName().hashCode();
+  }
+
+  @Override
+  public String toString() {
+    return getQualifiedName();
+  }
+
+}
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/VarcharTypeParams.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/VarcharTypeParams.java
deleted file mode 100644
index c602918..0000000
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/VarcharTypeParams.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.hadoop.hive.serde2.typeinfo;
-
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-import java.io.Serializable;
-
-import org.apache.hadoop.hive.common.type.HiveVarchar;
-import org.apache.hadoop.hive.serde2.SerDeException;
-import org.apache.hadoop.io.WritableUtils;
-
-public class VarcharTypeParams extends BaseTypeParams implements Serializable {
-  private static final long serialVersionUID = 1L;
-
-  public int length;
-
-  @Override
-  public void validateParams() throws SerDeException {
-    if (length < 1) {
-      throw new SerDeException("VARCHAR length must be positive");
-    }
-    if (length > HiveVarchar.MAX_VARCHAR_LENGTH) {
-      throw new SerDeException("Length " + length
-          + " exceeds max varchar length of " + HiveVarchar.MAX_VARCHAR_LENGTH);
-    }
-  }
-
-  @Override
-  public void populateParams(String[] params) throws SerDeException {
-    if (params.length != 1) {
-      throw new SerDeException("Invalid number of parameters for VARCHAR");
-    }
-    try {
-      length = Integer.valueOf(params[0]);
-    } catch (NumberFormatException err) {
-      throw new SerDeException("Error setting VARCHAR length: " + err);
-    }
-  }
-
-  @Override
-  public String toString() {
-    StringBuffer sb = new StringBuffer();
-    sb.append("(");
-    sb.append(length);
-    sb.append(")");
-    return sb.toString();
-  }
-
-  @Override
-  public void readFields(DataInput in) throws IOException {
-    length = WritableUtils.readVInt(in);
-    try {
-      validateParams();
-    } catch (SerDeException err) {
-      throw new IOException(err);
-    }
-  }
-
-  @Override
-  public void write(DataOutput out) throws IOException {
-    WritableUtils.writeVInt(out,  length);
-  }
-
-  public int getLength() {
-    return length;
-  }
-
-  public void setLength(int len) {
-    length = len;
-  }
-
-  @Override
-  public boolean hasCharacterMaximumLength() {
-    return true;
-  }
-  @Override
-  public int getCharacterMaximumLength() {
-    return length;
-  }
-}
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/VarcharUtils.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/VarcharUtils.java
new file mode 100644
index 0000000..0f721c5
--- /dev/null
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/VarcharUtils.java
@@ -0,0 +1,43 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hive.serde2.typeinfo;
+
+import org.apache.hadoop.hive.common.type.HiveVarchar;
+import org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;
+
+public class VarcharUtils {
+
+  public static void validateParameter(int length) {
+    if (length > HiveVarchar.MAX_VARCHAR_LENGTH || length < 1) {
+      throw new RuntimeException("Varchar length " + length + " out of allowed range [1, " +
+          HiveVarchar.MAX_VARCHAR_LENGTH + "]");
+    }
+  }
+
+  public static boolean doesWritableMatchTypeParams(HiveVarcharWritable writable,
+      VarcharTypeInfo typeInfo) {
+    return typeInfo.getLength() >= writable.getCharacterLength();
+  }
+
+  public static boolean doesPrimitiveMatchTypeParams(HiveVarchar value,
+      VarcharTypeInfo typeInfo) {
+    return typeInfo.getLength() == value.getCharacterLength();
+  }
+
+}
diff --git a/src/serde/src/test/org/apache/hadoop/hive/serde2/lazybinary/TestLazyBinarySerDe.java b/src/serde/src/test/org/apache/hadoop/hive/serde2/lazybinary/TestLazyBinarySerDe.java
index 954a4b8..69c891d 100644
--- a/src/serde/src/test/org/apache/hadoop/hive/serde2/lazybinary/TestLazyBinarySerDe.java
+++ b/src/serde/src/test/org/apache/hadoop/hive/serde2/lazybinary/TestLazyBinarySerDe.java
@@ -54,6 +54,7 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.JavaBinaryObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.WritableBinaryObjectInspector;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.io.BytesWritable;
 
 /**
@@ -603,7 +604,7 @@ public void testLazyBinaryObjectInspector() throws Throwable {
     inpBARef.setData(inpBArray);
 
     AbstractPrimitiveLazyObjectInspector<?> binInspector = LazyPrimitiveObjectInspectorFactory
-    .getLazyObjectInspector(PrimitiveCategory.BINARY, false, (byte)0);
+    .getLazyObjectInspector(TypeInfoFactory.binaryTypeInfo, false, (byte)0);
 
     //create LazyBinary initialed with inputBA
     LazyBinary lazyBin = (LazyBinary) LazyFactory.createLazyObject(binInspector);
diff --git a/src/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java b/src/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java
index 72ee1c6..5e546c5 100644
--- a/src/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java
+++ b/src/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java
@@ -27,7 +27,7 @@
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
 import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 import org.apache.hadoop.io.BooleanWritable;
 import org.apache.hadoop.io.BytesWritable;
 import org.apache.hadoop.io.FloatWritable;
@@ -188,8 +188,8 @@ public void testGetConvertedOI() throws Throwable {
 
     // output OI should have varchar type params
     PrimitiveObjectInspector poi = (PrimitiveObjectInspector)
-        ObjectInspectorConverters.getConvertedOI(varchar10OI, varchar5OI, true);
-    VarcharTypeParams vcParams = (VarcharTypeParams) poi.getTypeParams();
-    assertEquals("varchar length doesn't match", 5, vcParams.length);
+        ObjectInspectorConverters.getConvertedOI(varchar10OI, varchar5OI);
+    VarcharTypeInfo vcParams = (VarcharTypeInfo) poi.getTypeInfo();
+    assertEquals("varchar length doesn't match", 5, vcParams.getLength());
   }
 }
diff --git a/src/service/src/java/org/apache/hive/service/cli/TypeDescriptor.java b/src/service/src/java/org/apache/hive/service/cli/TypeDescriptor.java
index 97bdcb1..fb0236c 100644
--- a/src/service/src/java/org/apache/hive/service/cli/TypeDescriptor.java
+++ b/src/service/src/java/org/apache/hive/service/cli/TypeDescriptor.java
@@ -20,10 +20,7 @@
 
 import java.util.List;
 
-import org.apache.hadoop.hive.metastore.api.FieldSchema;
-import org.apache.hadoop.hive.serde2.typeinfo.BaseTypeParams;
 import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
-import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hive.service.cli.thrift.TPrimitiveTypeEntry;
 import org.apache.hive.service.cli.thrift.TTypeDesc;
@@ -57,11 +54,8 @@ public TypeDescriptor(String typeName) {
     if (this.type.isComplexType()) {
       this.typeName = typeName;
     } else if (this.type.isQualifiedType()) {
-      TypeInfo pti = TypeInfoFactory.getPrimitiveTypeInfo(typeName);
-      BaseTypeParams typeParams = ((PrimitiveTypeInfo) pti).getTypeParams();
-      if (typeParams != null) {
-        setTypeQualifiers(TypeQualifiers.fromBaseTypeParams(typeParams));
-      }
+      PrimitiveTypeInfo pti = TypeInfoFactory.getPrimitiveTypeInfo(typeName);
+      setTypeQualifiers(TypeQualifiers.fromTypeInfo(pti));
     }
   }
 
diff --git a/src/service/src/java/org/apache/hive/service/cli/TypeQualifiers.java b/src/service/src/java/org/apache/hive/service/cli/TypeQualifiers.java
index dacb4ef..5f1804e 100644
--- a/src/service/src/java/org/apache/hive/service/cli/TypeQualifiers.java
+++ b/src/service/src/java/org/apache/hive/service/cli/TypeQualifiers.java
@@ -21,7 +21,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.hadoop.hive.serde2.typeinfo.BaseTypeParams;
+import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
+import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 import org.apache.hive.service.cli.thrift.TCLIServiceConstants;
 import org.apache.hive.service.cli.thrift.TTypeQualifierValue;
 import org.apache.hive.service.cli.thrift.TTypeQualifiers;
@@ -73,14 +74,14 @@ public static TypeQualifiers fromTTypeQualifiers(TTypeQualifiers ttq) {
     return ret;
   }
 
-  public static TypeQualifiers fromBaseTypeParams(BaseTypeParams typeParams) {
-    TypeQualifiers ret = null;
-    if (typeParams != null) {
-      ret = new TypeQualifiers();
-      if (typeParams.hasCharacterMaximumLength()) {
-        ret.setCharacterMaximumLength(typeParams.getCharacterMaximumLength());
-      }
+  public static TypeQualifiers fromTypeInfo(PrimitiveTypeInfo pti) {
+    if (pti instanceof VarcharTypeInfo) {
+      TypeQualifiers ret = new TypeQualifiers();
+      ret.setCharacterMaximumLength(((VarcharTypeInfo)pti).getLength());
+      return ret;
+    } else {
+      return null;
     }
-    return ret;
   }
+
 }
-- 
1.7.0.4

