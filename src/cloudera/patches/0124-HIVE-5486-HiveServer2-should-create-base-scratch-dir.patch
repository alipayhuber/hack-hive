From 377a0b6e90914a1bfb7434fa300b6e6cddaa02ea Mon Sep 17 00:00:00 2001
From: Thejas Madhavan Nair <thejas@apache.org>
Date: Mon, 28 Oct 2013 23:16:47 +0000
Subject: [PATCH 124/375] HIVE-5486 : HiveServer2 should create base scratch directories at startup (Prasad Mujumdar via Thejas Nair)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1536554 13f79535-47bb-0310-9956-ffa450edef68
---
 .../java/org/apache/hadoop/hive/conf/HiveConf.java |   10 ---
 .../org/apache/hive/service/cli/CLIService.java    |   29 +++++++-
 .../cli/session/HiveSessionImplwithUGI.java        |   17 -----
 .../cli/TestEmbeddedThriftBinaryCLIService.java    |    3 +-
 .../apache/hive/service/cli/TestScratchDir.java    |   75 ++++++++++++++++++++
 5 files changed, 104 insertions(+), 30 deletions(-)
 create mode 100644 service/src/test/org/apache/hive/service/cli/TestScratchDir.java

diff --git a/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java b/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
index d1b6cd5..bccded6 100644
--- a/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
+++ b/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
@@ -151,16 +151,6 @@
   };
 
   /**
-   * The conf variables that depends on current user
-   */
-  public static final HiveConf.ConfVars[] userVars = {
-    HiveConf.ConfVars.SCRATCHDIR,
-    HiveConf.ConfVars.LOCALSCRATCHDIR,
-    HiveConf.ConfVars.DOWNLOADED_RESOURCES_DIR,
-    HiveConf.ConfVars.HIVEHISTORYFILELOC
-  };
-
-  /**
    * ConfVars.
    *
    * These are the default configuration properties for Hive. Each HiveConf
diff --git a/src/service/src/java/org/apache/hive/service/cli/CLIService.java b/src/service/src/java/org/apache/hive/service/cli/CLIService.java
index 2a335ac..36531c0 100644
--- a/src/service/src/java/org/apache/hive/service/cli/CLIService.java
+++ b/src/service/src/java/org/apache/hive/service/cli/CLIService.java
@@ -26,6 +26,9 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.fs.permission.FsPermission;
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.metastore.HiveMetaStoreClient;
 import org.apache.hadoop.hive.metastore.IMetaStoreClient;
@@ -78,8 +81,17 @@ public synchronized void init(HiveConf hiveConf) {
   public synchronized void start() {
     super.start();
 
-    // Initialize and test a connection to the metastore
     try {
+      // make sure that the base scratch directories exists and writable
+      setupStagingDir(hiveConf.getVar(HiveConf.ConfVars.SCRATCHDIR), false);
+      setupStagingDir(hiveConf.getVar(HiveConf.ConfVars.LOCALSCRATCHDIR), true);
+      setupStagingDir(hiveConf.getVar(HiveConf.ConfVars.DOWNLOADED_RESOURCES_DIR), true);
+    } catch (IOException eIO) {
+      throw new ServiceException("Error setting stage directories", eIO);
+    }
+
+    try {
+      // Initialize and test a connection to the metastore
       metastoreClient = new HiveMetaStoreClient(hiveConf);
       metastoreClient.getDatabases("default");
     } catch (Exception e) {
@@ -379,4 +391,19 @@ public void setUserName(SessionHandle sessionHandle, String userName) {
       LOG.error("Unable to set userName in sessions", e);
     }
   }
+  // create the give Path if doesn't exists and make it writable
+  private void setupStagingDir(String dirPath, boolean isLocal) throws IOException {
+    Path scratchDir = new Path(dirPath);
+    FileSystem fs;
+    if (isLocal) {
+      fs = FileSystem.getLocal(hiveConf);
+    } else {
+      fs = scratchDir.getFileSystem(hiveConf);
+    }
+    if (!fs.exists(scratchDir)) {
+      fs.mkdirs(scratchDir);
+      FsPermission fsPermission = new FsPermission((short)0777);
+      fs.setPermission(scratchDir, fsPermission);
+    }
+  }
 }
diff --git a/src/service/src/java/org/apache/hive/service/cli/session/HiveSessionImplwithUGI.java b/src/service/src/java/org/apache/hive/service/cli/session/HiveSessionImplwithUGI.java
index 13e30fc..a172f57 100644
--- a/src/service/src/java/org/apache/hive/service/cli/session/HiveSessionImplwithUGI.java
+++ b/src/service/src/java/org/apache/hive/service/cli/session/HiveSessionImplwithUGI.java
@@ -18,11 +18,9 @@
 
 package org.apache.hive.service.cli.session;
 
-import java.io.File;
 import java.io.IOException;
 import java.util.Map;
 
-import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.ql.metadata.Hive;
 import org.apache.hadoop.hive.ql.metadata.HiveException;
 import org.apache.hadoop.hive.shims.ShimLoader;
@@ -46,7 +44,6 @@ public HiveSessionImplwithUGI(String username, String password, Map<String, Stri
       String ipAddress, String delegationToken) throws HiveSQLException {
     super(username, password, sessionConf, ipAddress);
     setSessionUGI(username);
-    setUserPath(username);
     setDelegationToken(delegationToken);
   }
 
@@ -138,20 +135,6 @@ private void cancelDelegationToken() throws HiveSQLException {
     }
   }
 
-  // Append the user name to temp/scratch directory path for each impersonated user
-  private void setUserPath(String userName) {
-    for (HiveConf.ConfVars var: HiveConf.userVars) {
-      String userVar = getHiveConf().getVar(var);
-      if (userVar != null) {
-        // If there's a path separator at end then remove it
-        if (userVar.endsWith(File.separator)) {
-          userVar = userVar.substring(0, userVar.length()-2);
-        }
-        getHiveConf().setVar(var, userVar + "-" + userName);
-      }
-    }
-  }
-
   @Override
   protected HiveSession getSession() {
     assert proxySession != null;
diff --git a/src/service/src/test/org/apache/hive/service/cli/TestEmbeddedThriftBinaryCLIService.java b/src/service/src/test/org/apache/hive/service/cli/TestEmbeddedThriftBinaryCLIService.java
index da325da..ebda296 100644
--- a/src/service/src/test/org/apache/hive/service/cli/TestEmbeddedThriftBinaryCLIService.java
+++ b/src/service/src/test/org/apache/hive/service/cli/TestEmbeddedThriftBinaryCLIService.java
@@ -30,8 +30,7 @@
  *
  */
 public class TestEmbeddedThriftBinaryCLIService extends CLIServiceTest {
-
-  private static ThriftCLIService service;
+  protected static ThriftCLIService service;
 
   @BeforeClass
   public static void setUpBeforeClass() throws Exception {
diff --git a/src/service/src/test/org/apache/hive/service/cli/TestScratchDir.java b/src/service/src/test/org/apache/hive/service/cli/TestScratchDir.java
new file mode 100644
index 0000000..bf96b96
--- /dev/null
+++ b/src/service/src/test/org/apache/hive/service/cli/TestScratchDir.java
@@ -0,0 +1,75 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hive.service.cli;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.fs.permission.FsPermission;
+import org.apache.hive.service.cli.thrift.EmbeddedThriftBinaryCLIService;
+import org.apache.hive.service.cli.thrift.ThriftCLIService;
+import org.apache.hive.service.cli.thrift.ThriftCLIServiceClient;
+import org.junit.Test;
+
+public class TestScratchDir {
+  @Test
+  public void testScratchDirs() throws Exception {
+    stageDirTest("hive.exec.scratchdir", "TestScratchDirs_foobar", false);
+  }
+
+  @Test
+  public void testLocalScratchDirs() throws Exception {
+    stageDirTest("hive.exec.local.scratchdir", "TestLocalScratchDirs_foobar", true);
+  }
+
+  @Test
+  public void testResourceDirs() throws Exception {
+    stageDirTest("hive.downloaded.resources.dir", "TestResourceDirs_foobar", true);
+  }
+
+  private void stageDirTest(String stageDirConfigStr, String stageDirName, boolean isLocal) throws IOException {
+    String scratchDirStr = System.getProperty("test.tmp.dir") + File.separator +
+        stageDirName;
+    System.setProperty(stageDirConfigStr, scratchDirStr);
+    ThriftCLIService service = new EmbeddedThriftBinaryCLIService();
+    ThriftCLIServiceClient client = new ThriftCLIServiceClient(service);
+    final Path scratchDir = new Path(scratchDirStr);
+    Configuration conf = new Configuration();
+    FileSystem fs = scratchDir.getFileSystem(conf);
+    if (isLocal) {
+      fs = FileSystem.getLocal(conf);
+    }
+    assertTrue(fs.exists(scratchDir));
+
+    FileStatus[] fStatus = fs.globStatus(scratchDir);
+    boolean foo = fStatus[0].equals(new FsPermission((short)0777));
+    assertEquals(new FsPermission((short)0777), fStatus[0].getPermission());
+    service.stop();
+    fs.delete(scratchDir, true);
+    System.clearProperty(stageDirConfigStr);
+  }
+
+}
-- 
1.7.0.4

