From 75b34224d84531117c853cc36d6a80c0f254b9f4 Mon Sep 17 00:00:00 2001
From: Xuefu Zhang <xuefu@apache.org>
Date: Fri, 20 Dec 2013 18:29:17 +0000
Subject: [PATCH 208/375] HIVE-6039: Round, AVG and SUM functions reject char/varch input while accepting string input (reviewed by Prasad)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1552778 13f79535-47bb-0310-9956-ffa450edef68
---
 data/files/char_varchar_udf.txt                    |    1 +
 .../hive/ql/udf/generic/GenericUDAFAverage.java    |    2 +
 .../hadoop/hive/ql/udf/generic/GenericUDAFSum.java |    2 +
 .../hive/ql/udf/generic/GenericUDFRound.java       |    4 +-
 .../test/queries/clientpositive/char_varchar_udf.q |    9 ++++
 .../results/clientpositive/char_varchar_udf.q.out  |   41 ++++++++++++++++++++
 6 files changed, 58 insertions(+), 1 deletions(-)
 create mode 100644 data/files/char_varchar_udf.txt
 create mode 100644 ql/src/test/queries/clientpositive/char_varchar_udf.q
 create mode 100644 ql/src/test/results/clientpositive/char_varchar_udf.q.out

diff --git a/src/data/files/char_varchar_udf.txt b/src/data/files/char_varchar_udf.txt
new file mode 100644
index 0000000..570078d
--- /dev/null
+++ b/src/data/files/char_varchar_udf.txt
@@ -0,0 +1 @@
+47.3224	2923.29346
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFAverage.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFAverage.java
index 4b219bd..1a00800 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFAverage.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFAverage.java
@@ -77,6 +77,8 @@ public GenericUDAFEvaluator getEvaluator(TypeInfo[] parameters)
     case FLOAT:
     case DOUBLE:
     case STRING:
+    case VARCHAR:
+    case CHAR:
     case TIMESTAMP:
       return new GenericUDAFAverageEvaluatorDouble();
     case DECIMAL:
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFSum.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFSum.java
index 41d5efd..58685f0 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFSum.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFSum.java
@@ -71,6 +71,8 @@ public GenericUDAFEvaluator getEvaluator(TypeInfo[] parameters)
     case FLOAT:
     case DOUBLE:
     case STRING:
+    case VARCHAR:
+    case CHAR:
       return new GenericUDAFSumDouble();
     case DECIMAL:
       return new GenericUDAFSumHiveDecimal();
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFRound.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFRound.java
index 996ba1f..513a415 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFRound.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFRound.java
@@ -139,6 +139,7 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen
       break;
     case STRING:
     case VARCHAR:
+    case CHAR:
       outputOI = PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(PrimitiveCategory.DOUBLE);
       converterFromString = ObjectInspectorConverters.getConverter(inputOI, outputOI);
       break;
@@ -224,7 +225,8 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
      case DOUBLE:
        return round(((DoubleWritable)inputOI.getPrimitiveWritableObject(input)), scale);
     case STRING:
-     case VARCHAR:
+    case VARCHAR:
+    case CHAR:
        DoubleWritable doubleValue = (DoubleWritable) converterFromString.convert(input);
        if (doubleValue == null) {
          return null;
diff --git a/src/ql/src/test/queries/clientpositive/char_varchar_udf.q b/src/ql/src/test/queries/clientpositive/char_varchar_udf.q
new file mode 100644
index 0000000..332b840
--- /dev/null
+++ b/src/ql/src/test/queries/clientpositive/char_varchar_udf.q
@@ -0,0 +1,9 @@
+DROP TABLE IF EXISTS  char_varchar_udf;
+
+CREATE TABLE char_varchar_udf (c char(8), vc varchar(10)) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t';
+LOAD DATA LOCAL INPATH '../../data/files/char_varchar_udf.txt' INTO TABLE char_varchar_udf;
+
+SELECT ROUND(c, 2), ROUND(vc, 3) FROM char_varchar_udf;
+SELECT AVG(c), AVG(vc), SUM(c), SUM(vc) FROM char_varchar_udf;
+
+DROP TABLE char_varchar_udf;
\ No newline at end of file
diff --git a/src/ql/src/test/results/clientpositive/char_varchar_udf.q.out b/src/ql/src/test/results/clientpositive/char_varchar_udf.q.out
new file mode 100644
index 0000000..a8039ab
--- /dev/null
+++ b/src/ql/src/test/results/clientpositive/char_varchar_udf.q.out
@@ -0,0 +1,41 @@
+PREHOOK: query: DROP TABLE IF EXISTS  char_varchar_udf
+PREHOOK: type: DROPTABLE
+POSTHOOK: query: DROP TABLE IF EXISTS  char_varchar_udf
+POSTHOOK: type: DROPTABLE
+PREHOOK: query: CREATE TABLE char_varchar_udf (c char(8), vc varchar(10)) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
+PREHOOK: type: CREATETABLE
+POSTHOOK: query: CREATE TABLE char_varchar_udf (c char(8), vc varchar(10)) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: default@char_varchar_udf
+PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/char_varchar_udf.txt' INTO TABLE char_varchar_udf
+PREHOOK: type: LOAD
+PREHOOK: Output: default@char_varchar_udf
+POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/char_varchar_udf.txt' INTO TABLE char_varchar_udf
+POSTHOOK: type: LOAD
+POSTHOOK: Output: default@char_varchar_udf
+PREHOOK: query: SELECT ROUND(c, 2), ROUND(vc, 3) FROM char_varchar_udf
+PREHOOK: type: QUERY
+PREHOOK: Input: default@char_varchar_udf
+#### A masked pattern was here ####
+POSTHOOK: query: SELECT ROUND(c, 2), ROUND(vc, 3) FROM char_varchar_udf
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@char_varchar_udf
+#### A masked pattern was here ####
+47.32	2923.293
+PREHOOK: query: SELECT AVG(c), AVG(vc), SUM(c), SUM(vc) FROM char_varchar_udf
+PREHOOK: type: QUERY
+PREHOOK: Input: default@char_varchar_udf
+#### A masked pattern was here ####
+POSTHOOK: query: SELECT AVG(c), AVG(vc), SUM(c), SUM(vc) FROM char_varchar_udf
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@char_varchar_udf
+#### A masked pattern was here ####
+47.3224	2923.29346	47.3224	2923.29346
+PREHOOK: query: DROP TABLE char_varchar_udf
+PREHOOK: type: DROPTABLE
+PREHOOK: Input: default@char_varchar_udf
+PREHOOK: Output: default@char_varchar_udf
+POSTHOOK: query: DROP TABLE char_varchar_udf
+POSTHOOK: type: DROPTABLE
+POSTHOOK: Input: default@char_varchar_udf
+POSTHOOK: Output: default@char_varchar_udf
-- 
1.7.0.4

